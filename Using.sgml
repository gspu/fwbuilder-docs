<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!entity fwbuilder-url    "http://www.fwbuilder.org/">
<!entity tutorial-url     "http://www.fwbuilder.org/pages/Tutorial/index.html">
<!entity requirements-url "http://www.fwbuilder.org/pages/Requirements.html">
<!entity iptables-url     "http://netfilter.filewatcher.org/">
<!entity ipfilter-url     "http://coombs.anu.edu.au/~avalon/">
<!entity gtkmm-url        "http://gtkmm.sourceforge.net/">
<!entity gtkmm-download   "http://www.hvrlab.org/pub/gtkmm/">
<!entity ipt-howto        "http://www.netfilter.org/documentation/HOWTO//NAT-HOWTO.html">
<!entity faq-url          "http://www.fwbuilder.org/pages/Documents/FAQ/FAQ.html">
]>

<book id="Using">
  <?dbhtml filename="index.html">
  
  <bookinfo>

    <title>Firewall Builder</title>

    <title>Firewall Builder User's Guide</title>

    <affiliation>
      <orgname>NetCitadel LLC</orgname>
    </affiliation>

    <edition>$Revision: 1.44 $  $Date: 2002-11-11 04:51:44 $</edition>

    <copyright>
      <year>2002</year>
      <holder>NetCitadel LLC</holder>
    </copyright>

    <legalnotice>
      <para>The information in this manual is subject to change
      without notice, and should not be construed as a commitment by
      NetCitadel LLC. NetCitadel LLC assumes no responsibility or
      liability for any errors or inaccuracies that may appear in this
      manual.</para>

      <para>The software described in this manual is furnished under a
      license and may only be used or copied in accordance with the
      terms and conditions of such a license.</para>
    </legalnotice>
    
  </bookinfo>

<!-- ############################################################### -->
  <chapter id="Introduction">
    <title>Introduction</title>

    <sect1>
      <title>Introducing Firewall Builder</title>

      <para>
        Whether you are an experienced professional, switching from
        Checkpoint Firewall-1 to Cisco PIX or to an Open Source
        firewall, or a hobbyist trying to secure your home network,
        Firewall Builder can help you manage your firewall policy in a
        simpler and more efficient way.
      </para>

      <para>
        With Firewall Builder, you can manage the security policy of your
        firewall efficiently and accurately, without the learning
        curve usually associated with command line interfaces of many
        free and commercial firewalls. You do not have to think of a
        policy in terms of obscure port numbers, firewall interfaces
        and make choices about what interface a certain rule should
        belong to and so on. Instead, you create a set of objects
        describing your firewall, subnets of your network and hosts on
        them, and then implement your firewall policy by dragging objects into
        policy rules. You can also take advantage of a large
        collection of predefined objects describing many standard
        protocols and services.Once a policy is built in the GUI, you
        can compile it and install it on the firewall machine.
      </para>
    </sect1>

    <sect1>
      <title>Overview of Firewall Builder Features</title>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Over 100 predefined objects for the most popular and
            widely used protocols and services</para>
          </listitem>

          <listitem>
            <para>Ability to create custom objects describing
            IP,ICMP,TCP,UDP or custom services</para>
          </listitem>

          <listitem>
            <para>Ability to create objects to describe hosts,
            networks and address ranges</para>
          </listitem>

          <listitem>
            <para>Powerful wizards and other tools to help you
            jumpstart your firewall policy, and do it right from the
            first try. Wizards implement standard policies for typical
            network layouts, which can later be extended and edited by
            hand</para>
          </listitem>

          <listitem>
            <para>The Network discovery tool, to automate the creation
            of multiple objects </para>
          </listitem>
          
          <listitem>
            <para>Object oriented approach to the policy management:
            any change made to an object gets immediately reflected in all
            policy rules of all firewalls using that
            object. The configuration for multiple firewalls shares the
            same object database.</para>
          </listitem>

          <listitem>
            <para>The ability to turn a firewall policy into
            a configuration file or a script and then install it on a
            firewall with just a few clicks of a mouse.</para>
          </listitem>

          <listitem>
            <para>Convenient GUI that supports standard Copy/Paste
            operations for both text strings and network objects and
            allows for policy editing using drag and drop</para>
          </listitem>

          <listitem>
            <para>Support for several firewall platforms, including
            Cisco PIX and Open Source firewalls iptables, ipfilter and
            pf.</para>
          </listitem>

          <listitem>
            <para>The ability to print a single object, a firewall
            policy, the whole hierarchy, or export it to the text
            file in either plain text or html format</para>
          </listitem>

        </itemizedlist>
      </para> 

      <figure id="example1" float="1">
        <title>Sample firewall policy</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="scrn2.jpg" format="jpg" align="Left" scale="33">
          </imageobject>
        </mediaobject>
      </figure>

    </sect1>
  </chapter>

<!-- ############################################################### -->
  <chapter id="Installation">
    <title>Installation</title>

<!-- *************************************************************** -->
    <sect1>
      <title>Packaging</title>

      <para>
       Firewall Builder is an Open Source project. Source code for the
       API library, GUI and policy compilers for iptables, ipfilter
       and pf is available for download from our web site
       http://www.fwbuilder.org/. Firewall Builder for PIX is
       available only as a binary package. 
      </para>

      <para>
       We do encourage people to compile from the source code;
       building instructions are available on the same web site in the
       section "Documents". Firewall Builder can be compiled and works
       on the following OS and distributions:
      </para>

      <para><itemizedlist spacing="compact">
        <listitem>
          <para>RedHat Linux 7.2 and 7.3</para>
        </listitem>
        <listitem>
          <para>Mandrake Linux 8.2 </para>
        </listitem>
        <listitem>
          <para>SuSE Linux 7.3 and 8.0</para>
        </listitem>
        <listitem>
          <para>FreeBSD 4.5 and 4.6</para>
        </listitem>
        <listitem>
          <para>OpenBSD 3.0 and 3.1</para>
        </listitem>
        <listitem>
          <para>Solaris 8</para>
        </listitem>
      </itemizedlist></para>

      <para>
       Firewall Builder comes in a several packages:
      </para>

      <para><itemizedlist spacing="compact">
        <listitem>
          <para>Firewall Builder <emphasis>API library</emphasis>: package "libfwbuilder"</para>
        </listitem>

        <listitem>
          <para>Firewall Builder <emphasis>GUI</emphasis>: package "fwbuilder"</para>
        </listitem>

        <listitem>
          <para>Parts of GUI and policy compiler for <emphasis>iptables</emphasis>: package "fwbuilder-ipt"</para>
        </listitem>

        <listitem>
          <para>Parts of GUI and policy compiler for <emphasis>ipfilter</emphasis>: package "fwbuilder-ipf"</para>
        </listitem>

        <listitem>
          <para>Parts of GUI and policy compiler for <emphasis>pf</emphasis>: package "fwbuilder-pf"</para>
        </listitem>

        <listitem>
          <para>Parts of GUI and policy compiler for <emphasis>Cisco PIX</emphasis>: package "fwbuilder-pix"</para>
        </listitem>

      </itemizedlist></para>

      <para>
       You need to install the API library
       <emphasis>libfwbuilder</emphasis>, the GUI
       <emphasis>fwbuilder</emphasis> and at least one module that
       provides support for the target firewall platform; this could
       be either <emphasis>fwbuilder-ipt</emphasis> or one of the
       others.
      </para>

      <para>
       Typical installation problems are addressed in the document "Firewall Builder
       Frequently Asked Questions (FAQ)" which can be found at the following URL: 
       &faq-url
      </para>

    </sect1>

<!-- *************************************************************** -->
    <sect1>
      <title>General prerequisites</title>

      <para>Certain libraries should be installed on your system
      before you can install our pre-built binary packages. Here is
      the list:</para>

      <para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>libstdc++ version 2.9 or newer</para>
          </listitem>
          <listitem>
            <para>gdk-pixbuf version 0.11 or newer</para>
          </listitem>
          <listitem>
            <para>gtkmm version 1.2.8 or newer</para>
          </listitem>
          <listitem>
            <para>libsigc++ version 1.0 or newer</para>
          </listitem>
          <listitem>
            <para>libxml2 version 2.4.10 or newer</para>
          </listitem>
          <listitem>
            <para>libxslt version 1.0.7 or newer</para>
          </listitem>
          <listitem>
            <para>ucd-snmp version 4.2.3 or newer</para>
          </listitem>
          <listitem>
            <para>openssl version 0.9.6b or newer</para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
       Most of these packages come standard with popular Linux
       distributions and may already be on your sysetm. In case they
       are missing, you need to install them from your original OS
       media. On the other hand, some packages are missing on some
       distributions and therefore need to be downloaded and
       installed. See below for specific instructions as of where you
       can get these packages from for different OS and distributions.
      </para>

      <para>
       You can always verify if a certain package is installed on your
       system using the following command:
      </para>

      <programlisting>
       $ rpm -q gtkmm
      </programlisting>

      <para>
       This command checks if the package gtkmm is installed. If the
       package is present, it prints its version, too.
      </para>

      <para>
       Once you have installed all the packages, you can start
       Firewall Builder GUI by simply typing "fwbuilder" on the
       command line.
      </para>

    </sect1>

<!-- *************************************************************** -->
    <sect1>
      <title>Installing pre-built binaries on RedHat Linux 7.2 and 7.3</title>

      <para>
       All prerequisite libraries except gtkmm come with RedHat 7.3,
       so chances are you already have them. If your system is
       configured as "Gnome Workstation" or Ximian Gnome is installed,
       then you already have proper gtk+, gtkmm and libsigc++
       packages. If you are using KDE, then you may need to add these
       packages.
      </para>

      <para>
       We build using gtkmm and libsigc++ packages that come with
       Ximian Gnome.  These RPM can be downloaded from their ftp site
       directly, obtained as part of Ximian Gnome, or using Red
       Carpet. libsigc++ now comes on disk #2 with RedHat 7.3. Users
       of RedHat 7.2 systems can also get it from the home page at
       http://libsigc.sourceforge.net/
      </para>

      <para>
       Firewall Builder implements a number of features which make use
       of SNMP, therefore you will need ucd-snmp RPM installed,
       too. RPMs we distribute are built using ucd-snmp v4.2.3 (as of
       Feb 2002)
      </para>

      <para>
       Here is a list of recommended packages and where you can get
       them from:
      </para>

      <para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>gtkmm-1.2.8-1</para>
            <para> ftp://ftp.ximian.com/pub/ximian-gnome/redhat-73-i386/</para>
          </listitem>
          <listitem>
            <para>gdk-pixbuf-0.16.0</para>
            <para> Ximian Gnome or RedHat updates</para>
          </listitem>
          <listitem>
            <para>libsigc++-1.0.4-1</para>
            <para> RedHat 7.3 distribution or ftp://ftp.ximian.com/pub/ximian-gnome/redhat-73-i386/    </para>
          </listitem>
          <listitem>
            <para>libxml2-2.4.19</para>
            <para> RedHat 7.3 distribution or ftp://ftp.gnome.org/pub/GNOME/stable/redhat/i386/libxml/ </para>
          </listitem>
          <listitem>
            <para>libxslt-1.0.15-1</para>
            <para> RedHat 7.3 distribution or ftp://ftp.gnome.org/pub/GNOME/stable/redhat/i386/libxslt/</para>
          </listitem>
          <listitem>
            <para>ucd-snmp-4.2.3</para>
            <para> RedHat distribution</para>
          </listitem>
          <listitem>
            <para>ucd-snmp-utils-4.2.3</para>
            <para> RedHat distribution</para>
          </listitem>
          <listitem>
            <para>openssl-0.9.6b</para>
            <para> RedHat distribution</para>
          </listitem>
        </itemizedlist>
      </para>

      <para>Firewall Builder for PIX has the same requirements.</para>

    </sect1>

<!-- *************************************************************** -->
    <sect1>
      <title>Installing pre-built binaries on Mandrake Linux 8.2</title>

      <para>
       The requirements for installing Firewall Builder on Mandrake are
       very much the same as for RedHat.
      </para>

      <para>
       Here is the list of recommended packages. All these packages
       come with the standard Mandrake distribution, but you may need
       to add some of them if they are not installed. What packages
       need to be added depends on the configuration of OS. Some of
       these packages can be found on CD #1, while some others are on
       CD #2. Use rpmdrake to install these.
      </para>

      <para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>libglib1.2-1.2.10</para>
          </listitem>
          <listitem>
            <para>libstdc++2.10-2.96</para>
          </listitem>
          <listitem>
            <para>libgtkmm1.2-1.2.8</para>
          </listitem>
          <listitem>
            <para>libgdk-pixbuf2-0.16.0</para>
          </listitem>
          <listitem>
            <para>libsigc++1.0-4.0.4</para>
          </listitem>
          <listitem>
            <para>libxml2-2.4.16</para>
          </listitem>
          <listitem>
            <para>libxslt1-1.0.12</para>
          </listitem>
          <listitem>
            <para>libxslt-proc-1.0.12</para>
          </listitem>
          <listitem>
            <para>libsnmp0-4.2.3</para>
          </listitem>
          <listitem>
            <para>ucd-snmp-utils-4.2.3</para>
          </listitem>
          <listitem>
            <para>libopenssl0-0.9.6c</para>
          </listitem>
        </itemizedlist>
      </para>

      <para>Firewall Builder for PIX has the same requirements.</para>

    </sect1>


  </chapter>

<!-- ############################################################### -->
  <chapter id="using-gui">
    <title>Firewall Builder GUI</title>


<!-- *************************************************************** -->
    <sect1>
      <title>The Main Window</title>

      <para>The main window is divided into two parts: the objects
      tree and a dialog area. The object which is surrently selected
      in the tree is highlighted in a color and is shown in the dialog
      in the right half of the main window. You can create more than
      one main window using the main menu
      <guimenuitem>"File"</guimenuitem>/<guimenuitem>"New
      Window"</guimenuitem>. All windows are synchronized and work
      with the same object tree. Changes made to the object in one
      window are immediately reflected in all windows where it is
      visible, both in the tree and in the dialog. We recommend using
      the multi-window mode if you work with a firewall with a very
      large policy. In this case opening the policy may take some time
      and switching between the policy view and individual objects can
      slow the work down. Opening the policy in one window and working
      with individual objects in another helps avoid this problem.
      </para>

      <para>Drag and drop and Copy/Paste operations work across
      different windows.</para>

      <para>
      <figure id="main-win1">
          <title>Main window</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="main_win1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>
      </para>

    </sect1>

<!-- *************************************************************** -->
    <sect1>
      <title>GUI Options</title>

      <para>Certain aspects of the GUI behavior can be changed by the
      user. These are gathered in the dialog called "Options" which
      can be accessed through the main menu
      "<guimenuitem>Edit</guimenuitem>/<guimenuitem>Options</guimenuitem>". The
      GUI Options dialog is represented in <xref linkend="options1">.
      </para>

      <figure id="options1" float="0" pgwide="1">
        <title>GUI Options Dialog</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="options1.jpg" format="jpg" align="Left" scale="33">
          </imageobject>
        </mediaobject>
      </figure>


      <para>
        <itemizedlist spacing="compact">
          <listitem>
            <para><guimenuitem>General/Paths</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Working directory:</para>

                <para>This option tells the program where the data
                file should be stored. Policy compilers also store
                firewall configuration files or scripts they produce
                in the same directory. If this parameter is left
                blank, then the policy compiler will store the
                firewall configuration it generates in the same
                directory the original data file was loaded
                from.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>Network</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>SNMP Timeout and Retries</para>

                <para>Here you can configure timeout values and retry
                counters for SNMP queries. These values are used when
                the program runs a SNMP query to collect host
                "sysinfo" data and its interfaces. Note that the Network
                discovery Druid has its own settings for the SNMP
                timeout value and retry counter.</para>
              </listitem>
              <listitem>
                <para>DNS Timeout and Retries</para>

                <para>Here you can configure timeout values and retry
                counters for DNS queries. These values are used when
                the program uses DNS to determine the host's address by
                its name. </para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>GUI</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Remember window size at exit</para>

                <para>If this option is checked, the GUI remembers
                the main window size when the program finishes. The
                information is stored in the user's preferences file so
                that when the program is started again next time, it
                opens the window in the same size as before.</para>
              </listitem>

              <listitem>
                <para>Hide navigation bar in object dialog</para>

                <para>The GUI can show the navigation bar on top for the
                object's dialog. The navigation bar shows the current
                position in the tree and familiar buttons that allow
                navigation "up", "down" and "left" in the tree. If this
                option is checked, then the bar will disappear.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>GUI / Object Tooltips</guimenuitem></para>

            <para>Firewall Builder can show the object's properties in
            a quick pop-up window (this feature is often called
            "tooltip") when the user places the mouse cursor over the
            object in a group view or in the firewall policy view,
            where objects are represented by their icons. This is a
            convenient way to quickly check the object's properties
            without having to leave the current dialog and open the
            object's dialog. There are three choices for the tooltip
            feature:
           </para>

            <para>
              <itemizedlist spacing="compact">
                <listitem><para>Off</para></listitem>
                <listitem><para>Show properties in a tooltip pop-up window</para></listitem>
                <listitem><para>Show properties on the main window's status bar</para></listitem>
              </itemizedlist>
            </para>
        
            <para>For the second choice (showing in tooltip window) an
            additional parameter is avaliable; it controls the delay
            before the tooltip window appears ( after the mouse cursor
            is positioned over the object's icon.)</para>
          </listitem>

          <listitem>
            <para><guimenuitem>GUI / Behavior</guimenuitem></para>
            <anchor id="gui-behavior">

            <itemizedlist spacing="compact">
              <listitem>
                <para>Automatically save data in dialogs while
                switching between objects</para>

                <para>The GUI shows a dialog for every opened object
                in the same place (right half of the main
                window). Normally if the user has made some changes to
                the object's data and wants to switch to another
                object without clicking on the
                <guibutton>"Apply"</guibutton> or
                <guibutton>"Undo"</guibutton> button, GUI shows a
                pop-up dialog asking whether data should be saved or
                changes should be ignored. If this option is turned on
                though, the program automatically saves data every
                time the user leaves the dialog with unsaved data to
                open another object.</para>

              </listitem>
            </itemizedlist>

          </listitem>

          <listitem>
            <para><guimenuitem>GUI / Tree View</guimenuitem></para>

            <para>As was mentioned before, objects can be organized
            into different libraries. Usually there are at least two
            libraries: "User" and "Standard". GUI can represent
            objects either in one large tree, or in a separate tree
            for each library.</para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Show object libraries in separate trees</para>

                <para>If this option is checked, the GUI shows objects
                belonging to different libraries in separate
                trees</para>
              </listitem>

              <listitem>
                <para>Combine all libraries in a single tree</para>

                <para>If this option is checked, the GUI combines all
                objects in one large tree.</para>
              </listitem>

              <listitem>
                <para>Show properties of objects in the tree</para>

                <para>If this option is checked, then GUI shows
                brief summary of object's properties, or one most
                frequently used property, in an additional column in
                the tree view.</para>
              </listitem>
            </itemizedlist>

          </listitem>
        </itemizedlist>
      </para>
    </sect1>
  </chapter>

<!-- *************************************************************** -->
  <chapter>
      <title>Object Tree</title>

      <sect1>
        <title>The Standard Tree Structure</title>

        <figure id="tree-structure" float="1" pgwide="0">
          <title>Standard Tree Structure</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="tree_structure1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The object tree provides standard places for all object
        types so that they can be arranged in a hierarchy. Types that
        correspond to network objects (hosts, address ranges, networks
        and groups of these) are located in the "Objects" branch,
        types that correspond to all services are in the "Services"
        branch, time intervals are in the "Time" branch, and all
        firewalls are in the "Firewalls" branch. Newly created objects
        are automatically placed in their corresponding position in
        the tree. Each branch of the tree is automatically sorted by
        the object's name.</para>

        <note>
          <para>Future versions of Firewall Builder will support 
          creation of custom branches in the tree and placing of
          objects and groups of objects in any branch.</para>
        </note>

        <para>The program can maintain all the objects in a single
        tree, or divide them into "libraries". The latter case is
        illustrated by <xref linkend="main-win2"> where each library
        is represented by an individual tree; one tree is always
        called "User" and holds user-defined objects. The other tree
        is called "Standrard" and holds a collection of standard
        objects that come with the program. Some of the standard
        objects are visible on the screenshot <xref
        linkend="main-win2">. Standard objects represent over 100 of
        frequently used protocols and services.  There may be more
        libraries in the future. Both user-defined and standard
        objects can be used equally in firewall policies or in
        groups. </para>

        <figure id="main-win2" float="1">
          <title>Standard Objects</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="main_win2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>
      </sect1>


      <sect1>
        <title>Creating Objects</title>

        <para>New objects can be created using the main menu
        <guimenuitem>"Insert"</guimenuitem>. Certain objects can also
        be created via a pop-up menu that can be opened by clicking
        the right mouse button on the object in the tree.</para>

        <figure id="menu-insert" float="1">
          <title>Creating Objects Using Main Menu 'Insert'</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="scrn-menu1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>You can create all objects through the main menu
        'Insert' (<xref linkend="menu-insert">). Since some objects
        can be placed in the tree only under certain object types,
        corresponding menu items get enabled only when the right
        object is displayed in the dialog in the main window. For
        example, the interface object can only be placed under the
        host or the firewall, therefore the menu item
        <guimenuitem>"Insert"</guimenuitem>/<guimenuitem>"Interface"</guimenuitem>
        is enabled only if the host or firewall object is opened in
        the main window. Likewise, the menu item
        <guimenuitem>"Address"</guimenuitem> is enabled only when the
        interface object is opened.</para>

        <para>Another way to create objects uses the pop-up menu which
        appears if you click the right mouse button on the object
        label in the tree (<xref linkend="popup-menu-insert">).</para>


        <figure id="popup-menu-insert">
          <title>Adding Objects Using Pop-up Menu</title>
          <informaltable frame="none">
          <tgroup cols="2">
            <colspec align="left" colwidth="1*">
            <colspec align="left">
            <tbody>
              <row>
                <entry>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="scrn-menu2.jpg" format="jpg" align="Left" scale="33">
                    </imageobject>
                  </inlinemediaobject>
                </entry>

                <entry>
                  <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="scrn-menu3.jpg" format="jpg" align="Left" scale="33">
                    </imageobject>
                  </inlinemediaobject>
                </entry>
              </row>
            </tbody>
          </tgroup>
          </informaltable>
        </figure>

        <para>Just like items under the main menu
        <guimenuitem>"Insert"</guimenuitem>, items in the popup menu
        are context-sensitive. In particular, menu items that add
        interfaces appear only when the object opened in the main
        window is either the host or the firewall (<xref
        linkend="popup-menu-insert">). You can add interface objects
        by hand (using the menu item <guimenuitem>"Add
        Interface"</guimenuitem>) or import them via SNMP query (using
        menu item <guimenuitem>"Add Interfaces via
        SNMP"</guimenuitem>)
        </para>

      </sect1>

      <sect1>
        <title>Navigating The Object Tree and Editing Objects</title>

        <para>The object selected in the tree automatically appears in
        the dialog area where it can be reviewed or modified. Objects
        are opened at a single mouse click in the tree. Clicking the
        right button when the mouse cursor is over the object's label
        in the tree brings up the pop-up menu. This menu is
        context-sensitive and provides items for the following
        functions (<xref linkend="popup-menu-insert">):</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Duplicate:</para>

              <para>This function creates a copy of the current
              object, places it in the tree and opens it in the main
              window. The new object has the generic name "New
              Object", but once you change the name and click
              <guibutton>"Apply"</guibutton>, its name will
              immediately change in the tree.</para>
            </listitem>
            <listitem>
              <para>Copy:</para>

              <para>This copies an object into the clipboard.</para>
            </listitem>
            <listitem>
              <para>Cut:</para>

              <para>This copies an object into the clipboard and
              removes it from the tree.</para>
            </listitem>
            <listitem>
              <para>Paste:</para>

              <para>This creates a new object which is a copy of the
              current content of the clipboard.</para>
            </listitem>
            <listitem>
              <para>Delete:</para>

              <para>This deletes an object without making a copy in
              the clipboard. This is an unreversible operation and the
              program shows a pop-up dialog, asking the user to
              confirm. </para>
            </listitem>
            <listitem>
              <para>Where used:</para>

              <para>This scans the whole tree, including all groups
              and policies of all firewalls, looking for references to
              the current object. In the end the program shows a
              pop-up dialog with icons corresponding to groups and
              firewalls that use current object. Double-clicking on
              the icon opens the corresponding object in the main
              window.</para>
            </listitem>
          </itemizedlist>
        </para>

        <para>The pop-up menu can also have items to add interface and
        address objects, depending on what type of object it is
        called for (<xref linkend="popup-menu-insert">).
        </para>

        <para>In general, GUI has been designed to "look and feel"
        like a typical file browser (e.g. Windows Explorer). It shows
        object groups as a collection of icons, where each icon
        represents an individual object (<xref
        linkend="group-view">). The user can navigate between objects
        either using the mouse or keyboard "arrow" keys. The active
        object is highlighted with a different color. The
        douple-clicking on the icon in the group view opens the
        corresponding object. Clicking the right mouse button or spacebar
        on the keyboard opens a pop-up menu, which acts as a shortcut to
        frequently used operations such as "Open Object",
        "Copy","Cut" and "Paste" </para>

        <figure id="group-view" float="1">
          <title>Group View</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="group_view1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>Dialogs for objects that can be edited have
        <guibutton>"Apply"</guibutton> and
        <guibutton>"Undo"</guibutton> buttons at the bottom. Initially
        these buttons are inactive, but once the object's parameters
        have been modified in the dialog, or group members have been
        added or removed, both buttons get activated so that the user
        can click <guibutton>"Apply"</guibutton> to save new data or
        <guibutton>"Undo"</guibutton> to reload original values into
        the dialog. If the user tries to switch to another object
        without either saving or reloading data in the current dialog,
        the program shows a pop-up dialog asking the user to take one
        of these actions. There is also an option to make the program
        automatically save modified data when the user switches
        between objects (see <link linkend="gui-behavior">below</link>).
      </para>

      </sect1>
  </chapter>

<!-- *************************************************************** -->
  <chapter>
      <title>Working With Objects</title>

      <sect1>
        <title>Common Properties</title>

        <para>All objects visible to the user have some common
        editable fields, such as their name and comment. The object
        name can contain white spaces and can be arbitrarily long. The
        comment can contain any text of any length.</para>

        <para>Dialogs for those objects that can have an address use
        the standard GUI widget that visually separates the four
        octets of IP address and provides "on the fly" control for the
        validity of an address.</para>

      </sect1>

      <sect1>
        <title>The Host Object</title>

        <para>The host object in Firewall Builder is designed to
        represent real hosts in the network: workstations, servers,
        and any other network node with an address. Just like real
        hosts, the host object can have interfaces, which in turn have
        addresses. Both interfaces and addresses are represented by
        objects, which are organized into a tree-like hierarchy.
        Interface objects is sitting in the tree directly under the
        host; the address objects are located under their
        interfaces. Just like in real computers, in Firewall Builder
        interface object can have either one or multiple addresses. An
        example of a host with one interface, which has multiple
        addresses is shown in <xref linkend="host-in-tree">. In fact
        host may even have an interface with no addresses at all. We
        will go over the features of interface and address objects
        below. </para>

        <figure id="host-in-tree" float="1">
          <title>A Host Object With One Interface And Multiple Virtual Addresses </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="host_in_tree.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>The host object can not have any security or Network
          Address Translation policy associated with it; only firewall
          objects can.</para>
        </note>

        <sect2>
          <title>Creating a Host Object</title>

          <figure id="creating-host1" float="1">
            <title>First Page of the Druid</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="creating_host1.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>To speed up the process and make it simpler, creating
          of a new host object is aided by the Druid which collects
          all data needed for both the host and its interfaces and
          then creates the object. The screenshot (<xref
          linkend="creating-host1">) represents the first page of the
          Druid. First of all you need to enter the host
          name. Generally this name does not have to be the same as
          the real host's name, but if it is, then you can use DNS to
          query for the host's IP address using its name. If the new
          host object has a single interface (this, perhaps, is the
          most common case) then you just need to fill the entry field
          for its address and may be MAC address and click
          <guibutton>"Next"</guibutton>. If the object's name is the
          same as the real host name, then you can use the
          <guibutton>"DNS Lookup"</guibutton> button to get the
          address from DNS. </para>

          <para>In case the new host object should have multiple
          interfaces, you need to check the option at the bottom of the
          dialog and then switch to the next page of the Druid using the
          <guibutton>"Next"</guibutton> button. The next page is
          represented in screenshot <xref linkend="creating-host2">.</para>

          <figure id="creating-host2" float="1">
            <title>Adding Interfaces to the New Host Object</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="creating_host2.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>Here you can add interfaces to the new host
          object. Enter the interface name, its address and netmask in
          the appropriate fields, and click
          <guibutton>"Add"</guibutton> to add it to the list. The
          <guibutton>"Update"</guibutton> button updates information
          for the interface that is selected in the list, and the
          <guibutton>"Delete"</guibutton> button deletes currently
          selected interface.</para>

          <note>
            <para>You can always add, modify and remove
            interfaces of the new host object later using controls
            provided by the main window and the object tree
            view.</para>
          </note>
        </sect2>

        <sect2>
          <title>Editing a Host Object</title>

          <para>The Host object dialog is split into two tabs: "General"
          (<xref linkend="host-dialog1">) and "Sysinfo" (<xref
          linkend="host-dialog2">). </para>

          <figure id="host-dialog1" float="1">
            <title>Editing The Host Object</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="host_dialog1.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>The "General" tab provides GUI controls for the following parameters:</para>

          <para>
            <itemizedlist spacing="compact">
              <listitem>
                <para>Name:</para>

                <para>Host object name.</para>
              </listitem>
              <listitem>
                <para>MAC address filtering:</para>

                <para>If this option is activated, the policy compiler
                uses MAC addresses of all interfaces of this host
                instead of their IP addresses to build firewall rules.
                Not all firewall platforms support MAC address
                filtering, so this option may have no effect on the
                generated firewall script. This is treated as a
                non-critical situation, and the policy compiler will
                only generate a warning while processing a firewall
                policy where such a host is used.</para>
              </listitem>
              <listitem>
                <para>SNMP communities:</para>

                <para>The SNMP 'read' community is used if the host
                runs SNMP agent and you pull the host's "sysinfo"
                variables via SNMP query. The SNMP 'write' community
                is currently not used but we may add features using it
                in the future.  SNMP communities usually can not
                contain spaces. If your host does not run SNMP agent,
                or if you do not need to pull the host info using
                SNMP, then SNMP community strings may be left
                blank.</para>

              </listitem>
              <listitem>
                <para>Comment:</para>

                <para>This is a free-form text field which can be used to
              add comments.</para>
              </listitem>
            </itemizedlist>
        </para>

          <figure id="host-dialog2" float="1">
            <title>Host Object System Information</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="host_dialog2.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>The "Sysinfo" tab holds data retrieved from the host
          via SNMP query. There, you can see the strings that the host
          returned for standard SNMP MIB "Description", "Location" and
          "Contact" variables. These fields are read-only in the
          GUI.</para>

        </sect2>
      </sect1>

      <sect1 id="host-interface">
        <title>The Host's Interface</title>

        <figure id="host-interface1" float="1">
          <title>The Host's Interface</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="host_interface1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The dialog for the interface object that belongs to the
        host has only one tab named "General", which provides controls
        for the following parameters:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Name</para>

              <para>This is the name of the object. Usually it should
              be the real interface's name. For example, on Linux this
              could be 'eth0' or 'eth1', on FreeBSD this could be
              'lnc0' or 'fxp0', on Solaris this could be 'hme0', on
              Cisco PIX it could be 'ethernet0' and so on.</para>
            </listitem>
            <listitem>
              <para>Label</para>

              <para>On most OS this field is not used and serves the
              purpose of a descriptive label. Firewall Builder GUI
              uses a label, if it is not blank, to show interfaces in
              the tree. One of the suggested uses for this field is to
              mark interfaces to reflect the network topology
              ('outside', 'inside') or the purpose ('web frontend' or
              'backup subnet'). The label is mandatory for Cisco PIX
              though, where it must reflect the network topology. See
              below for the chapter describing interfaces of the
              firewall </para>
            </listitem>
            <listitem>
              <para>Checkbox "Address is dynamic"</para>

              <para>Use this option if the interface has a dynamic
              address (obtained by means of DHCP or PPP or another
              protocol); in this case an address is unknown at the
              moment when Firewall Builder generates the firewall
              policy.</para>
            </listitem>
            <listitem>
              <para>Checkbox "This is management interface"</para>

              <para>Sometimes the host has several network interfaces in
              which case one of them can be marked as the 'management
              interface'. The management interface is used for all
              communication between Firewall Builder and the host. In
              the case of a host object this communication is currently
              limited to SNMP query to pull host information (standard
              SNMP MIB variables 'Description', 'Location',
              'Contact'), however in the future we will add
              more.</para>
            </listitem>
            <listitem>
              <para>Physical (MAC) Address</para>

              <para>This field holds the interface's MAC address.</para>
            </listitem>
            <listitem>
              <para>Comment</para>

              <para>This is a free-form text field for a comment.</para>
            </listitem>
          </itemizedlist>
        </para>
      </sect1>

      <sect1>
        <title>The Address Object</title>

        <figure id="address1" float="1">
          <title>The Address Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="address1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The address object describes the IP address of the
        interface; its dialog provides the following entry
        fields:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Name</para>

              <para>This is the name of the object.</para>

              <note>
                <para> It is recommended that you use some descriptive
                name because when the address object is used in the
                firewall policy, it is labeled with this name. It may
                be hard to tell one address from another if their
                names are similar. </para>
              </note>
            </listitem>
            <listitem>
              <para>Address</para>

              <para>This is an IP address. The GUI widget visually
              separates octets and provides syntax control for the
              values entered in the octet fields.</para>
            </listitem>
            <listitem>
              <para>Netmask</para>

              <para>This is a netmask assigned to the interface.</para>
            </listitem>
            <listitem>
              <para>Comment</para>

              <para>This is free-form text field for a comment.</para>
            </listitem>
          </itemizedlist>
        </para>
      </sect1>

      <sect1>
        <title>The Network Object</title>

        <figure id="network-dialog1" float="1">
          <title>The Network Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="network_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The network object describes the IP network or a subnet; its
        dialog provides the following entry fields:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>Network object name</para>
            </listitem>
            <listitem>
              <para>'DNS Lookup' button:</para>

              <para>Clicking on this button runs a DNS query for an "A"
              RR using the name entered in the "Name" field </para>
            </listitem>
            <listitem>
              <para>Address:</para>

              <para>This is an address of the network</para>
            </listitem>
            <listitem>
              <para>Netmask:</para>

              <para>The netmask, in combination with an Address, defines
              the subnet.</para>
            </listitem>
            <listitem>
              <para>Comment:</para>

              <para>This is a free-form text field used for comments</para>
            </listitem>
          </itemizedlist>
        </para>
      </sect1>

    <sect1>
      <title>The Address Range Object</title>

        <figure id="address-range-dialog1" float="1">
          <title>The Address Range Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="address_range_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

      <para>the Address Range object describes a continuous range of IP
        addresses; its dialog provides the following entry fields:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>The name of the Address Range object</para>
            </listitem>
            <listitem>
              <para>Range start:</para>

              <para>The address of the start of the range</para>
            </listitem>
            <listitem>
              <para>Range end:</para>

              <para>The address of the end of the range</para>
            </listitem>
            <listitem>
              <para>Comment:</para>

              <para>A free-form text field used for comments</para>
            </listitem>
          </itemizedlist>
        </para>

        <para>The Address range is inclusive, that is both the start
        and the end addresses are included in the range.</para>
      </sect1>

      <sect1>
        <title>Group of Objects</title>

        <figure id="group-dialog1" float="1">
          <title>Group of Objects</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="group_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The group of objects holds references to Hosts, Networks,
        Address Ranges, Firewalls and other groups of objects (<xref
        linkend="group-dialog1">). Objects can be added to the group
        using the following methods:
        </para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Using drag and drop:</para>

              <para>Objects can be dragged from the tree into the
              group dialog. The tree switches to the object in a
              single click, however pointing a mouse cursor at the
              object and then pressing the button does not switch, but
              rather allows to start a drag and drop operation. </para>
            </listitem>
            <listitem>
              <para>Using the popup menu:</para>

              <para>You can use the "Copy"/"Paste" operations between the
              tree and group dialog. Right mouse clicking on the object
              in the tree brings a pop-up menu. Choose the "Copy" or
              "Cut" item in this menu, then switch to the group dialog and
              right mouse click in the icon field. This also brings
              up a pop-up menu, where you choose  "Paste" item. This inserts
              a reference to the object in the group.</para>
            </listitem>
            <listitem>
              <para>Using the main menu "Edit":</para>

              <para>Just like in the case of a pop-up menu, select the
              object in the tree, use the main menu
              <guimenuitem>"Edit"</guimenuitem>/<guimenuitem>"Copy
              Object"</guimenuitem>, then switch to the group dialog
              and use the main menu
              <guimenuitem>"Edit"</guimenuitem>/<guimenuitem>"Paste
              Object"</guimenuitem>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </sect1>

      <sect1>
        <title>Firewall Object</title>

        <sect2>
          <title>Creating a Firewall Object</title>

          <para>Similar for the creating of a Host Object; creating a
          new Firewall Object is aided by the Druid. The first page of
          this Druid is represented on a screenshot ( <xref
          linkend="creating-firewall1"> ). First of all you need to
          specify the name for new firewall; then click
          <guibutton>"Next"</guibutton>. This brings you to the next
          page of the Druid (<xref
          linkend="creating-firewall2">).</para>

          <figure id="creating-firewall1" float="1">
            <title>First Page of the Druid</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="creating_firewall1.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <figure id="creating-firewall2" float="1">
            <title>Adding Interfaces to the new Firewall Object</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="creating_firewall2.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This page is similar to that of the new Host object
          druid page where you add interfaces. You enter the name,
          address and netmask of the interface in appropriate fields,
          then click <guibutton>"Add"</guibutton>. The
          <guibutton>"Update"</guibutton> button updates parameters of
          the currently selected interface and the
          <guibutton>"Delete"</guibutton> button deletes it. Once all
          the interfaces are configured, click on
          <guibutton>"Next"</guibutton> to create a new firewall
          object.</para>

          <note>
            <para>You can always add, modify and delete
            interfaces later using controls provided by the main
            window and the object tree view.</para>
          </note>

        </sect2>
        <sect2>
          <title>Editing a Firewall Object</title>

          <figure id="firewall-dialog-general" float="1">
            <title>Firewall Object, tab 'General'</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="firewall_dialog_general.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>The Firewall Object represents the firewall machine
          and is the most complex object in Firewall Builder. Its
          dialog has the following tabs: 'General', 'Sysinfo',
          'Compile/Install', 'Firewall' and 'Network'</para>

          <para>The <emphasis>General</emphasis> tab provides the
          following controls:</para>

          <para>
            <itemizedlist spacing="compact">
              <listitem>
                <para>Name:</para>

                <para>This is the name of the object</para>
              </listitem>
              <listitem>
                <para>Host OS:</para>

                <para>Modules that provide support for target OS and
                firewall platforms are distributed separately from the
                GUI and can be installed in various combinations. This
                pull-down menu provides a choice of the host OS and is
                dynamically updated depending on the combination of
                installed modules. </para>
              </listitem>
              <listitem>
                <para>Firewall platform:</para>

                <para>Like the "Host OS" menu, this pull-down menu
                provides a choice of the target firewall platform and
                is dynamically updated depending on a combination of
                installed modules.</para>
              </listitem>
              <listitem>
                <para>SNMP Communities:</para>

                <para>The SNMP "read" community is used to pull
                "sysinfo" MIB variables from the firewall machine,
                provided it runs a SNMP agent. It is also used if you
                want to automatically create interfaces for the
                firewall using SNMP query. The SNMP "write" community
                is not used at this time.</para>
              </listitem>
              <listitem>
                <para>Comment:</para>

                <para>This is a free-form text field used for
                comments</para>
              </listitem>
            </itemizedlist>
          </para>

          <figure id="firewall-dialog-sysinfo" float="1">
            <title>Firewall Object, tab 'Sysinfo'</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="firewall_dialog_sysinfo.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This tab holds the following fields:</para>

          <para>
           <itemizedlist spacing="compact">
              <listitem><para>Description:</para></listitem>
              <listitem><para>Location:</para></listitem>
              <listitem><para>Contact:</para></listitem>
            </itemizedlist>
          </para>

          <para>These fields present values of corresponding MIB
          variables.</para>

          <figure id="firewall-dialog-compile" float="1">
            <title>Firewall Object, tab 'Compile/Install'</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="firewall_dialog_compile.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This tab holds the following fields:</para>

          <para>
            <itemizedlist spacing="compact">
              <listitem>
                <para>Compiler:</para>

                <para>The full directory path and file name for the
                policy compiler program that the GUI invokes when you
                use the main menu item
                <guimenuitem>"Rules"</guimenuitem>/<guimenuitem>"Compile"</guimenuitem>. If
                this field is left blank, then the GUI calls the
                default policy compiler program which is preconfigured
                for the firewall platform chosen in the 'General'
                tab. Use this field if you use a non-standard policy
                compiler, or if you use a wrapper script which calls a
                policy compiler.</para>
              </listitem>
              <listitem>
                <para>Command line parameters for compiler:</para>

                <para>This is where you can specify command line
                parameters for the policy compiler. Here is the list
                of command line options supported by all policy
                compilers:
                </para>

              <para>
                <itemizedlist>
                  <listitem>
                    <para><emphasis>"-f":</emphasis> specifies the
                    data file name to be used by compiler;</para>
                  </listitem>
                  <listitem>
                    <para><emphasis>"-d":</emphasis> specifies the
                    working directory where data the file is located
                    and where produced firewall script should be
                    placed;</para>
                  </listitem>
                  <listitem>
                    <para><emphasis>"-v":</emphasis> turn on verbose
                    diagnostics print during compile;</para>
                  </listitem>
                </itemizedlist>
              </para>
                
              <para>
                Normally the GUI automatically supplies "-f" and "-d"
                options when it calls policy compiler.  See the man
                page for the corresponding policy compiler for the
                complete set of supported command line options.
              </para>

              </listitem>
              <listitem>
                <para>Installer: install script</para>

                <para>In the future there will be two ways to install
                and activate a policy on the firewall machine: using
                install script or fwbd daemon. The daemon is not
                supported yet, so the install script is the only
                method available at this time. The GUI calls the
                install script when you use the main menu
                <guimenuitem>"Rules"</guimenuitem>/<guimenuitem>"Install"</guimenuitem>
                item.</para>
              </listitem>
              <listitem>
                <para>Istaller: fwbd daemon:</para>

                <para><emphasis>Not supported</emphasis></para>
              </listitem>
              <listitem>
                <para>Policy install script:</para>

                <para>The full directory path and file name for the
                install script.</para>
              </listitem>
              <listitem>
                <para>Command line parameters for the script:</para>

                <para>This is where you specify command line
                parameters for the install script. The GUI expects
                install script to accept the same command line
                parameters as all policy compilers (see above) and
                automatically supplies "-f" and "-d" options.  You can
                add more parameters in this entry field if your script
                supports them.</para>
              </listitem>
              <listitem>
                <para>Options for fwbd:</para> 

                <para>Since the current version of Firewall Builder
                does not come with fwbd and does not support it yet,
                these options are reserved for future use.</para>
              </listitem>
            </itemizedlist>
          </para>

          <para>Tabs <emphasis>'Firewall'</emphasis> and
          <emphasis>'Network'</emphasis> provide fields specific to
          the chosen firewall platform and host OS configurations. See
          <xref linkend="tab-firewall"> for the description of the
          dialogs for all supported firewall platforms and <xref
          linkend="tab-network"> for the description of the dialogs
          for supported target host OS.
        </para>
        </sect2>
      </sect1>

      <sect1>
        <title>Firewall's Interface</title>

        <figure id="firewall-interface1" float="1">
          <title>The Interface Object belonging to a firewall</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="firewall_interface1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The dialogue for the interface object that belongs to a
        firewall is similar to that for the Host's interface (<xref
        linkend="host-interface">) but has a few extra controls.
        </para>

        <para>The interfaces of the firewall have a parameter called
        <emphasis>"Security Level"</emphasis>. Depending on the
        firewall platform, the security level may either have two
        values <emphasis>"External"/"Internal"</emphasis> or a numeric
        value between 0 and 100, with 0 being least secure and 100
        being most secure levels. The GUI dialogue adjusts
        automatically and shows appropriate controls depending on the
        choice of the firewall platform in the interface's parent
        firewall object.
        </para>

        <para><xref linkend="firewall-interface1"> shows a screenshot
        of the dialogue for the interface object that belongs to an
        iptables firewall object named "firewall-iptables". <xref
        linkend="firewall-interface2"> shows a screenshot of the
        dialogue for the interface object that belongs to a Cisco PIX
        firewall object named "firewall-pix".
        </para>

        <figure id="firewall-interface2" float="1">
          <title>An Interface with a numeric Security Level </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="firewall_interface2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <sect2>
          <title>Network Zone</title>

          <para>One of the platform-specific parameters of the
          interface is a reference to the Network Zone. Currently only
          a Cisco PIX firewall requires the Network Zone. The
          interface dialogue shows controls for the Network Zone in a
          separate tab (<xref linkend="firewall-interface3">), which
          appears only if the parent firewall object specifies the
          firewall platform which requires it. The GUI dynamically
          generates a pull-down menu with all available network and
          group objects and puts it in the Network Zone dialog. You
          need to choose one object in the menu. Usually the external
          interface (the one which connects your firewall to the
          Internet) has the Network Zone set to
          <emphasis>"Any"</emphasis>. It is also recommended to create
          a group of objects to represent Network Zones of all other
          interfaces of the firewall.</para>

          <figure id="firewall-interface3" float="1">
            <title>The Network Zone dialogue</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="firewall_interface3.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>Consider the network layout as on <xref
          linkend="network-zones">. Here the firewall has three
          interfaces: 'outside', 'dmz' and 'inside'. Behind the
          firewall there is a router which in turn is connected to
          three subnets 'subnet A', 'subnet B' and 'subnet C'. Subnet
          A is shared between the router and the firewall (each device
          has an interface on this subnet). Let's also suppose that we
          have created Network Objects for each subnet and called them
          'subnet DMZ', 'subnet A', 'subnet B' and 'subnet C'
          (remember, spaces are allowed in object names). For this
          setup, network zones should be configured as follows:
          </para>

          <para>
            <informaltable frame="none">
              <tgroup cols="2">
                <colspec colwidth="64pt" align="center">
                <colspec colwidth="150pt" align="center">
                <thead>
                  <row>
                    <entry>Interface</entry>
                    <entry>Network Zone</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry><filename>outside</filename></entry>

                    <entry><emphasis>ANY</emphasis></entry>
                  </row>
                  <row>
                    <entry><filename>dmz</filename></entry>

                    <entry><emphasis>subnet DMZ</emphasis></entry>
                  </row>
                  <row>
                    <entry><filename>inside</filename></entry>

                    <entry>
                      <emphasis>subnet A,</emphasis>
                      <emphasis>subnet B,</emphasis>
                      <emphasis>subnet B</emphasis>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>

          <para>Since the network zone for the
          <emphasis>'inside'</emphasis> interface consists of multiple
          objects, a group must be created so that you could use this
          group as a Network Zone object. </para>

          <figure id="network-zones" float="1">
            <title>Choosing Network Zones</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="fwbuilder-using-netzone1.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>


          <para><xref
          linkend="platform-specific-interface-parameters"> explains
          differences in the way firewall platforms interpret values
          in the Security Level and Network Zone parameters of the
          firewall interfaces.</para>

          <table pgwide="0" id="platform-specific-interface-parameters">
            <title></title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry><para>Firewall Platform</para></entry>
                  <entry><para>Security Level Values</para></entry>
                  <entry><para>Network Zone</para></entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><para>iptables</para></entry>
                  <entry><para>two values: 'External' or 'Internal'</para></entry>
                  <entry><para>N/A</para></entry>
                </row>
                <row>
                  <entry><para>ipfilter</para></entry>
                  <entry><para>two values: 'External' or 'Internal'</para></entry>
                  <entry><para>N/A</para></entry>
                </row>
                <row>
                  <entry><para>pf</para></entry>
                  <entry><para>two values: 'External' or 'Internal'</para></entry>
                  <entry><para>N/A</para></entry>
                </row>
                <row>
                  <entry><para>Cisco PIX</para></entry>
                  <entry><para>numeric, 0 - 100</para></entry>
                  <entry><para>a reference to a group or network object</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table>


        </sect2>
      </sect1>

      <sect1 id="global-policy">
        <title>Global Firewall Policy</title>

        <figure id="global-policy1" float="1">
          <title>Global Policy</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="global_policy.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>The Firewall policy consists of a set of rules. Packets
        are analysed by comparing their parameters with rules in the
        policy; inspecting rules in an orderly manner from top to
        bottom. The first rule that matches the packet is used. Each
        rule includes a standard set of parameters, or <emphasis>Rule
        Elements</emphasis>, which are used to compare the data packet
        with, such as "Source", "Deestination", "Service",
        "Direction". If a rule is part of the Interface Policy (<xref
        linkend="interface-policy">), then the interface it belongs to
        acts as yet another parameter. For example, if a packet
        entering the firewall has a source address which matches the
        object in the "Source" field of the rule, its destination
        address matches the object in "Destination", its protocol and
        port numbers match the object in the field "Service", and its
        direction matches that specified in the field "Direction",
        then the firewall will take action, specified in the "Action"
        field of the matching rule. In the case of Interface rule, the
        firewall will also take into account the interface through
        which packet had entered or through which it is about to leave
        the firewall.</para>

        <para>For example on <xref linkend="global-policy1">, the rule
        #0 says that all fragmented packets should be dropped (the
        rule uses service object <emphasis>ip_fragments</emphasis> and
        the <emphasis>Deny</emphasis> action). Rule #1 says that
        connections from the internal network (object
        <emphasis>internal-net</emphasis>) to the firewall itself
        (object <emphasis>firewall-pix</emphasis>) using protocols
        <emphasis>telnet</emphasis> and <emphasis>ssh</emphasis> are
        allowed (action <emphasis>Accept</emphasis>). The "Catch all"
        rule #8 denies all packets that have not been matched by any
        other rule above it. The global policy on <xref
        linkend="global-policy1"> is built to allow only specific
        services and deny everything else, which is a good practice.
        </para>

        <para><xref linkend="rule-elements"> lists rule elements
        available in the policy, depending on the chosen target
        firewall platform.
        </para>
      </sect1>

      <sect1 id="interface-policy">
        <title>Interface Policy</title>

        <figure id="interface-policy1" float="1">
          <title>Interface Policy for iptables firewall</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="interface_policy1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <figure id="interface-policy2" float="1">
          <title>Interface Policy for Cisco PIX firewall</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="interface_policy2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>Each firewall's interface may have a security policy
        associated with it. Different firewalls require different
        commands to attach policy rules to the firewall, but policy
        compilers take care of that and generate the appropriate
        code. The Interface Policy consists of a set of rules; each
        rule has the same rule elements as a Global Policy rule and
        adds some additional ones. </para>

        <para>In <xref linkend="interface-policy1"> rule #0 (the so
        called Anti-spoofing rule) says that all packets which enter
        the firewall's interface eth0 (direction is
        <emphasis>"Inbound"</emphasis>) and have their source address
        match either the internal network or dmz network or any
        address that belongs to the firewall itself, should be dropped
        and a record should be made in the log (since there is a
        "notebook and pencil" icon in the
        <emphasis>"Options"</emphasis> rule element).
        </para>
      </sect1>

      <sect1>
        <title>Network Address Translation Rules</title>

        <figure id="nat-policy" float="1">
          <title>Network Address Translation Rules</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="nat_policy.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>

        <para>Just like the firewall policy, the Network Address
        Translation (NAT) rules are inspected by the firewall in the
        order they appear in the NAT policy. Each NAT rule consists of
        the following rule elements:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem><para>Original Source</para>

              <para>This is the object which the source address of
              original packet should match for it to be translated by
              this rule </para>
            </listitem>
            <listitem><para>Original Destination</para>

              <para>This is the object which the destination address
              of original packet should match for it to be translated
              by this rule </para>
            </listitem>
            <listitem><para>Original Service</para>

              <para>This is the service which the original packet should
              match to be translated by this rule</para>
            </listitem>
            <listitem><para>Translated Source</para>

              <para>This object defines the address which should be
              used to substitute the original packet's source address
              </para>
            </listitem>
            <listitem><para>Translated Destination</para>

              <para>This object defines the address which should be
              used to substitute the destination address in the original
              packet.</para>
            </listitem>
            <listitem><para>Translated Service</para>

              <para>This object defines the protocol and port numbers
              which should be used to substitute those parameters in
              the original packet</para>
            </listitem>
            <listitem><para>Comment</para>
            </listitem>
          </itemizedlist>
        </para>

        <para>Here is how it works:</para>

        <para>The original packet is compared with NAT rules, one at a
        time, starting with the topmost rule. Once the rule which
        matches the packet's source and destination addresses and its
        service is found, the firewall takes parameters from the
        second half of that rule and makes substitutions for the
        source and destination addresses and port numbers. Some rule
        elements in the first half of the rule may be left empty (they
        show "Any" in this case); these elements match any value of a
        corresponding parameter of the packet.  Some rule elements in
        the second half of the rule may also be left empty (in which
        case the GUI shows the word "Original" in the rule
        element). This tells the firewall that no substitution should
        happen for those elements. </para>

        <para>In fact the firewall not only substitutes addresses and
        port numbers, it also makes a record in its internal table to
        remember the original packet and translated packet it just
        produced. This way the firewall can perform a reverse
        translation when the reply packet comes back. </para>

        <para>The NAT rules in the screenshot <xref
        linkend="nat-policy"> tell the firewall to do the
        following:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Rule #0:</para>

              <para>If the original packet has a destination address
              which matches the addresses of an external interface of
              the firewall object "firewall-iptables" and protocol TCP
              and port 80 (matches service "http", protocol used by
              web servers), then its destination address should be
              changed to that of the object "mail server" and the
              service should be left the same. Note that this rule
              would have had the same effect if the "Translated
              Service" was left "Original".</para>
            </listitem>
            <listitem>
              <para>Rule #1:</para>

              <para>This rule is very much the same as #0, except it
              works for packets headed for TCP port 25 (service "smtp"
              which describes protocol used to send and receive
              Internet email)</para>
            </listitem>
            <listitem>
              <para>Rule #2:</para>

              <para>This rule is like #0 and #1, except it works for
              the service "ssh"</para>
            </listitem>
            <listitem>
              <para>Rule #3:</para>

              <para>This rule follows the same pattern as #0-2, but
              translates packets headed for the external firewall's
              address, TCP port 2222, and sends them to the standard
              TCP port that belongs to the service "ssh" on the
              internal machine "build server". This rule illustrates
              that you can simultaneously translate both addresses and
              services: it makes changes to the destination address of
              the packet and the service.</para>
            </listitem>
            <listitem>
              <para>Rule #4:</para>

              <para>This rule matches packets that originated in the
              internal network (object "internal-net") and headed for
              DMZ net (object "dmz-net"). Since all rule elements in
              the second half of the rule are left blank, this rule
              tells the firewall that no translation is needed for
              these packets.</para>
            </listitem>
            <listitem>
              <para>Rule #5:</para>

              <para>This rule defines another type of translation: all
              packets originated in either the internal network or in
              DMZ net, going to any destination, should have their
              source address replaced with the address of the
              firewall's external interface. This type of translation
              rule is sometimes called the "Masquerading".</para>
            </listitem>
          </itemizedlist>
        </para>

        <para>Some firewall platforms support negation in NAT
        rules. If it is supported, this feature can be activated
        through the pop-up menu ( <xref linkend="editing-policy2"> )
        that appears when you click the right mouse button on the rule
        element in the NAT rule. <xref linkend="rule-elements"> shows
        what firewall platforms support negation in NAT.</para>

        <para>See below in "Tutorial" for detailed discussion of
        different types of NAT rules.</para>

        <para>You can create NAT rules and edit them using the same
        methods as described in <xref linkend="editing-policy-and-nat"></para>

      </sect1>

      <sect1 id="editing-policy-and-nat">
        <title>Editing firewall Policy and NAT Rules</title>

        <sect2>
          <title>Adding and removing rules</title>

          <figure id="editing-policy1" float="1">
            <title>Modifying Policy rules</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="editing_policy1.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>Rules can be added, removed or moved around in the
          policy using commands in a popup menu which appears if you
          click the right mouse button on the rule element "Num" (the
          very first rule element, counting from the left). Screenshot
          <xref linkend="editing-policy1"> illustrates this
          menu. </para>

          <para>This menu allows for adding new rules above or below
          of the currently selected rule in the policy, removing
          rules, moving the current rule up and down, plus the usual
          <guimenuitem>"Copy"</guimenuitem>/<guimenuitem>"Paste"</guimenuitem>
          operations done on policy rules.</para>

          <para>Functions of this pop-up menu are also duplicated in
          the main menu <guimenuitem>"Rules"</guimenuitem></para>

          <para>You can also use the drag and drop operation to move
          rules up and down in the policy. Just drag the rule with the
          mouse by its "number" rule element.</para>
        </sect2>

        <sect2>
          <title>Adding, removing and modifying objects in the policy
          and NAT rules</title>

          <para>To add objects to the policy or NAT rule you can
          either drag them from the tree and drop them into the
          corresponding rule element, or use the
          <guimenuitem>"Copy"</guimenuitem>/<guimenuitem>"Paste"</guimenuitem>
          operation. Objects can be copied into clipboard both from
          the tree and from another policy rule; in both cases use the
          pop-up menu or main menu <guimenuitem>"Edit"</guimenuitem>.</para>

          <para>Clicking the right mouse button when the cursor is
          over rule elements "Source","Destination" or "Service"
          brings a context-sensitive pop-up menu ( <xref
          linkend="editing-policy2"> ). The same pop-up menu appears
          when you do that over the "Original Source", "Original
          Destination", "Original Service", "Translated Source",
          "Translated Destination" and "Translated Service" rule
          elements in the NAT rule. </para>

          <figure id="editing-policy2" float="1">
            <title>Modifying Object in the Policy Rule</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="editing_policy2.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <para>
          <itemizedlist spacing="compact">
              <listitem>
                <para>Edit:</para>

                <para>This menu item opens the currently selected
                object in the dialog</para>
              </listitem>
              <listitem>
                <para>Edit in a new window:</para>

                <para>This menu item creates a new main window and
                opens the currently selected object in it. If more
                than one main window currently exists, the object will
                be opened in one of the existing windows.</para>
              </listitem>
              <listitem>
                <para>Copy:</para>

                <para>The object is copied into clipboard.</para>
              </listitem>
              <listitem>
                <para>Cut:</para>

                <para>The object is copied into clipboard and removed from the rule.</para>
              </listitem>
              <listitem>
                <para>Paste:</para>

                <para>The object is copied from the clipboard to the rule.</para>
              </listitem>
              <listitem>
                <para>Negate:</para>

                <para>All objects in the selected rule element are
                negated. The rule element "Source" is negated in
                rule #1 in screenshot <xref linkend="editing-policy2">
                </para>
              </listitem>
            </itemizedlist>
        </para>

        </sect2>

        <sect2>
          <title>Changing rule action</title>

          <para>Clicking the right mouse button when the cursor is
          over the rule element "Action" brings a context-sensitive
          pop-up menu ( <xref linkend="editing-policy3"> ).</para>

          <figure id="editing-policy3" float="1">
            <title>Modifying the Action of the Policy Rule</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="editing_policy3.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Accept:</para>

              <para>The rule will accept the packet matching it</para>
            </listitem>
            <listitem>
              <para>Deny:</para>

              <para>The rule will drop the packet matching it</para>
            </listitem>
            <listitem>
              <para>Reject:</para>

              <para>The rule will drop the packet matching it, and will also
            send appropriate ICMP responce message back to
            source.</para>
            </listitem>
          </itemizedlist>

        </sect2>

        <sect2>
          <title>Changing rule direction</title>

          <para>Clicking the right mouse button when the cursor is
          over the rule element "Direction" brings a context-sensitive
          pop-up menu ( <xref linkend="editing-policy4"> ).</para>

          <figure id="editing-policy4" float="1">
            <title>Modifying the Direction of the Policy Rule</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="editing_policy4.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Inbound:</para>

              <para>The rule matches packets entering the firewall</para>
            </listitem>
            <listitem>
              <para>Outbound:</para>

              <para>The rule matches packets exiting the firewall</para>
            </listitem>
            <listitem>
              <para>Both:</para>

              <para>The rule matches both entering and exiting packets</para>
            </listitem>
          </itemizedlist>

        </sect2>

        <sect2>
          <title>Changing rule options and logging</title>

          <para>clicking the right mouse button when the cursor is
          over the rule element "Options" brings up a
          context-sensitive pop-up menu ( <xref
          linkend="editing-policy5">. )</para>

          <figure id="editing-policy5" float="1">
            <title>Modifying Options of the Policy Rule</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="editing_policy5.jpg" format="jpg" align="Left" scale="33">
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Modify Options:</para>

              <para>This menu item brings up a dialogue which allows
              you to modify certain options specific to the target
              firewall platform and associated only with the current
              rule. See <xref linkend="policy-rule-options-dialogs">
              for a detailed explanation. </para>
            </listitem>
            <listitem>
              <para>Turn logging ON:</para>

              <para>Turns logging on for all packets matching this
              rule. If the target firewall platform does not support
              selective logging of packets, this menu item is
              disabled.</para>
            </listitem>
            <listitem>
              <para>Turn logging OFF:</para>

              <para>Turn logging off for packets matching this rule.
              If the target firewall platform does not support
              selective logging of packets, this menu item is
              disabled.</para>
            </listitem>
          </itemizedlist>

        </sect2>

      </sect1>



      <sect1 id="rule-elements">
        <title>Support for Rule Elements and Features on Various Firewalls</title>

        <para>Certain fields in the rules are only available if the
        target firewall platform supports them.  For example, the
        iptables firewall provides controls for logging of matched
        packets, while Cisco PIX does not and always logs every packet
        it drops. Where possible, the policy compilers try to emulate
        the missing feature. For example, OpenBSD PF does not support
        negation natively, but policy compiler
        <emphasis>"fwb_pf"</emphasis> provides a workaround and tries
        to emulate this feature for PF. Another example is policy
        rules with direction "Outbound". Cisco PIX supports only
        inbound Access Lists, so the policy compiler emulates outbound
        Access Lists while generating configuration for PIX. <xref
        linkend="policy-rule-elements"> represents a list of fields in
        the rules and what firewall platforms support
        them. Information about these fields and features is available
        for fwbuilder GUI which disables corresponding menu items and
        hides corresponding policy elements when they are not
        supported.</para>

        <para>
          <table id="policy-rule-elements">
            <title></title>
            <tgroup cols="11">
              <thead>
                <row>
                  <entry>Firewall Platform</entry>
                  <entry>Source</entry>
                  <entry>Destination</entry>
                  <entry>Service</entry>
                  <entry>Time Interval</entry>
                  <entry>Direction</entry>
                  <entry>Action</entry>
                  <entry>Logging/ Options</entry>
                  <entry>Comment</entry>
                  <entry>Negation in Policy rules</entry>
                  <entry>Negation in NAT rules</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>iptables</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                </row>
                <row>
                  <entry>ipfilter</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                </row>
                <row>
                  <entry>pf</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                </row>
                <row>
                  <entry>Cisco PIX</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                  <entry>+</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                  <entry>+</entry>
                  <entry>-</entry>
                  <entry>-</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </para>

      </sect1>
  </chapter>

<!-- *************************************************************** -->
  <chapter>
    <title>Network Discovery: A Quick Way to Create Objects</title>

    <figure id="discovery-menu" float="1">
      <title>Calling the Object Discovery Druid</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="discovery_menu.jpg" format="jpg" align="Left" scale="33">
        </imageobject>
      </mediaobject>
    </figure>
      
    <para>One of the distinguishing features that Firewall Builder
    provides is support for automated object creation. This helps
    populate the objects tree for large networks with lots of hosts
    and subnets. It would have taken hours if the user always had to
    do it manually, while the Objects Discovery Druid helps complete
    this task in minutes. You can bring this Druid up using the main
    menu <guimenuitem>"Tools"</guimenuitem>/<guimenuitem>"Discover
    Objects"</guimenuitem> </para>

    <para>The Druid supports three main methods for automated object
    creation:</para>

    <para>
        <itemizedlist spacing="compact">
        <listitem><para>Reading file /etc/hosts</para></listitem>
        <listitem><para>Import of DNS zone</para></listitem>
        <listitem><para>Network discovery using SNMP queries</para></listitem>
      </itemizedlist>
    </para>
    
    <para>You choose the method on the first page of the Druid ( <xref
    linkend="discovery-page1">. )</para>

    <figure id="discovery-page1" float="1">
      <title>Calling Object Discovery Druid</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="discovery_page1.jpg" format="jpg" align="Left" scale="33">
        </imageobject>
      </mediaobject>
    </figure>
      
    <para>Just check the radio-button next to the method you want to
    use and click the <guibutton>'Next'</guibutton> button.</para>

      <sect1>
        <title>Reading file /etc/hosts</title>

        <para>This method imports host records present in the standard
        file <emphasis>/etc/hosts</emphasis> or any other file that
        contain records in the following format (this format is
        actually described in the man page hosts(5)).</para>

        <para>IP_Address   host_name</para>

        <para>The IP address must be separated from the host name with
        any number of spaces or tab symbols. Lines starting with
        '#' are considered comments and are ignored. Currently
        Firewall Builder does not support ipv6 addresses and ignores
        them.</para>

        <para>When you choose the import from /etc/hosts on the first
        page, the Druid asks you for the file path and name on the
        next page. Once that information is entered, it reads the
        contents of that file and presents a table of new objects
        (<xref linkend="discovery-hosts-2">):</para>

        <figure id="discovery-hosts-2" float="1">
          <title>Creating objects using gathered information</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_hosts_2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>
      
        <para>This page of the druid is the same for all discovery
        methods, so let's discuss it in detail.</para>

        <para>Discovered objects are shown in the table. Since the
        source of information used for discovery could have had
        different host names for the same IP address, object names are
        shown in a pull-down menu. If there was only one name for the
        address, then the pull-down menu would have only one entry,
        otherwise it has several entries. The rightmost column in the
        table shows choices for the object type to be created: it can
        become either the Host, Network, or Firewall. Sometimes, the
        Druid can guess the type of the object or use the proper type
        depending on the discovery method used.</para>

        <para>The Druid creates objects only for selected records in
        the table. Use the checkbox in the very first column of the
        table to select objects. The comment to the right shows the
        total number of selected objects at any given moment (text
        "Selected: N objects"). 6 objects are selected in the
        screenshot <xref linkend="discovery-hosts-2">
        </para>

        <para>This page of the Druid also has the following buttons:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para><guibutton>"Select All"</guibutton></para>

              <para>Selects all records in the table</para>
            </listitem>
            <listitem>
              <para><guibutton>"Unselect All"</guibutton></para>

              <para>Unselects all records in the table</para>
            </listitem>
            <listitem>
              <para><guibutton>"Filter"</guibutton></para>

              <para>Brings up a filter dialog. Filtering helps manage
              long lists of objects.</para>
            </listitem>
            <listitem>
              <para><guibutton>"Remove Filter"</guibutton></para>

              <para>Removes currently applied filter and shows all
              records in the table</para>
            </listitem>
          </itemizedlist>
        </para>

        <figure id="discovery-hosts-filter" float="1">
          <title>Filter Dialog</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_hosts_filter.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>The Druid can filter records in the table either by
        their address, by their name, or by both. To filter by address
        enter part of it in the "Address" field. The program compares
        the text entered in the filter dialog with an address in the
        table and shows only those records whose address starts with
        the text of the filter. For example, to only filter out hosts
        with addresses on the net 10.3.14.0 we could use the filter
        "10.3.14". Likewise, to remove hosts "bear" and "beaver"
        (addresses 10.3.14.50 and 10.3.14.74) we could use the filter
        "10.3.14.6". Note that filter string does not contain any
        wildcard symbols like "*". The filter shows only records that
        have addresses which literarily match the filter string.
        </para>

        <para>Filtering by the object name uses POSIX regular
        expressions syntax described in the man page regex(7). For
        example, to find all records whose names start with 'f' we
        could use the regular expression '^f'. Symbol '^' matches the
        beginning of the string, so this regular expression matches
        any name that starts with 'f'. To find all names that end with
        'somedomain.com', we could use the regular expression
        '.*somedomain.com$' </para>

      </sect1>

      <sect1>
        <title>DNS zone import</title>

        <para>This method works only on those OS where there is a
        library supporting DNS zone transfers. Currently it is
        available on Linux and Solaris. </para>

        <para>First, the Druid asks you for the domain name you wish to
        import (<xref linkend="discovery-dns-domain">)</para>

        <figure id="discovery-dns-domain" float="1">
          <title>Entering the domain name</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_dns_domain.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>Once the domain name is entered and you have clicked
        <guibutton>"Next"</guibutton>, the program first runs the DNS
        query to find out what name servers are responsible for that
        domain. It then presents a list of name servers on the next
        page for you to choose from (<xref
        linkend="discovery-dns-ns">).</para>

        <figure id="discovery-dns-ns" float="1">
          <title>List of name servers</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_dns_ns.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      


        <para> You can use one of the registsred name servers, or, if
        you have your own local name server which is authoritative for
        this domain (for example the local secondary server), you can
        enter its name or address in the entry field at the bottom of
        the dialog. Clicking <guibutton>"Next"</guibutton> initiates
        the zone transfer process (<xref
        linkend="discovery-dns-transfer">). </para>

        <figure id="discovery-dns-transfer" float="1">
          <title>DNS zone transfer</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_dns_transfer.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>If the DNS zone transfer succeeded and the druid was
        able to pull the information it needs to create objects, you
        can switch to the next page where you choose and create
        objects. That page is the same as the one presented in <xref
        linkend="discovery-hosts-2">. </para>

      </sect1>

      <sect1>
        <title>Network Discovery</title>

        <figure id="discovery-snmp-seed" float="1">
          <title>Initial Parameters for the Network Discovery program</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_snmp_seed.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>The Network discovery program (sometimes referred to as
        the "Network Crawler") needs a host to start from. This host
        is called the "seed host"; you enter it in the first page of
        the Druid (<xref linkend="discovery-snmp-seed">). The crawler
        implements the following algorithm (this is a somewhat
        simplified explanation):</para>

        <para>First, it runs several SNMP queries against the seed
        host trying to collect the following data: the list of its
        interfaces and its ARP and routing tables. This host is then
        added to the table of discovered network objects, together
        with its interfaces, their addresses and netmasks and the
        host's "sysinfo" parameters. Then the crawler analyses the
        routing table of that host; this allows it to discover the
        networks and subnets which in turn are also added to the list
        of discovered objects. Then it analyses the ARP table, which
        holds MAC and IP addresses of neighboring hosts. It takes one
        host found in this table at a time and repeats the same
        algorithm using it as a seed host. When it pulls an ARP table
        from the next host, it discards entries that describe objects
        it already knows about. However if it finds new entries, it
        tries them as well and thus travels further down the
        network. Eventually it will visit every host on all subnets on
        the network.</para>

        <para>This algorithm relies on hosts answering to the SNMP
        queries. If the very first host (the "seed" host) does not run
        SNMP agent, the crawler will stop on the first run of its
        algorithm and won't find anything. Therefore it is important
        to use a host which does run SNMP agent as a "seed" host. Even
        if most of the hosts on the network do not run SNMP agents,
        but a few do, the crawler will most likely find all of
        them. This happens because it discovers objects when it reads
        the ARP tables from the host which answers; so even if
        discovered hosts do not answer to SNMP queries, the crawler
        already found them anyway. </para>

        <para>One of the ways to limit the scope of the network that
        the crawler will visit is to use the parameter "Confine scan
        to the network". You need to enter both a network address and
        a netmask; the crawler will then check if hosts it discovers
        belong to this network and if they do not, discard
        them.</para>

        <figure id="discovery-snmp-options" float="1">
          <title>Parameters for Network Discovery: Page 1</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_snmp_options.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <figure id="discovery-snmp-options2" float="1">
          <title>Parameters for Network Discovery: Page 2</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_snmp_options2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>There are few settings that affect crawler's algorithm
        (see <xref linkend="discovery-snmp-options"> and <xref
        linkend="discovery-snmp-options2">). Here is the list:</para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Run network scan recursively</para>

              <para>As was described above, crawler starts with the
              "seed" host and then repeats its algorithm using every
              discovered host as a new "seed". If this option is
              turned ON, then crawler runs its algorithm only once and
              stops.</para>
            </listitem>
            <listitem>
              <para>Follow point-to-point links</para>

              <para>If firewall or a router has point-to-point
              interface (for example, PPP interface), then crawler can
              automatically calculate IP address of the other side of
              this interface. It then continues discovery process by
              querying a router on the other side. Very often
              point-to-point link connects organization's network to
              an ISP and you are not really interested in collecting
              data about your ISP network. This option, if activated,
              prevents crawler from crossing point-to-point
              links. </para>
            </listitem>
            <listitem>
              <para>Include virtual addresses</para>

              <para>Sometimes servers or routers have more than one IP
              address assigned to the same interface. If this option
              is turned on, then crawler "discovers" these virtual
              addresses and tries to create objects for them.</para>
            </listitem>
            <listitem>
              <para>Run reverse name lookup queries to determine host
              names</para>

              <para>If host discovered by crawler answers SNMP
              queries, then it will report is name, which crawler will
              use to create an object in Firewall Builder. However, if
              the host does not answer the query, the crawler can not
              determine its name and only knows its IP
              address. Crawler can use DNS to back-resolve such
              addresses and determine host names if this option is
              turned ON. </para>
            </listitem>

            <listitem>
              <para>SNMP query parameters</para>

              <para>You must specify SNMP "read" community string
              which will be used for SNMP queries. You can also
              specify number of retries and a timeout for the
              query.</para>
            </listitem>

            <listitem>
              <para>DNS parameters:</para>

              <para>You can specify number of retries and a timeout
              for DNS lookup query, as well as number of threads.
              Firewall Builder uses multithreaded resolver in order to
              speed up the process. In other words, it can run several
              DNS lookups simultaneously and parameter "Number of
              threads" defines how many lookups it can run in
              parallel.</para>
            </listitem>
          </itemizedlist>
        </para>


        <para>Once all parameters are entered, crawler actually gets
        to work which may take a while. Depending on the size of the
        network and such parameters as SNMP timeout value, scanning
        may take minutes or even hours. The progress of the scanner
        can be monitored on the page in the Druid (<xref
        linkend="discovery-snmp-crawler">). You can always stop
        crawler using button <guibutton>"Stop network
        scan"</guibutton>. Data does not get lost if you do that as
        Druid will use whatever objects crawler discovered before you
        stopped it.</para>

        <figure id="discovery-snmp-crawler" float="1">
          <title>Parameters for Network Discovery: Page 2</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="discovery_snmp_crawler.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>Button <guibutton>"Save scan log to file"</guibutton>
        saves content of the progress window to the text file and is
        mostly used for troubleshooting and bug reports related to
        crawler. </para>

        <para>If crawler succeeded and was able to collect information
        it needs to create objects, you can switch to the next page
        where you chose and create objects. That page is the same as
        the one presented on <xref linkend="discovery-hosts-2">.</para>

      </sect1>
  </chapter>

<!-- *************************************************************** -->
  <chapter>
      <title>Working With Services</title>
      <sect1>
        <title>IP Service</title>

        <para>The simple IP service object is represented on
        screenshot <xref linkend="ip-service-dialog1">. Firewall
        Builder provides standard object types for well-known and
        frequently used protocols such as ICMP (IP protocol number 1),
        TCP (IP protocol number 6) and UDP (IP protocol number 17). IP
        service object helps describe other protocols which are
        neither ICMP nor TCP nor UDP. Protocol is defined by the 8-bit
        field in the IP packet header. Screenshot <xref
        linkend="ip-service-dialog1"> represents object 'ESP'
        (Encapsulating Security Payload, part of IPSEC protocol
        family) which uses IP protocol number 50. Protocols numbers
        are assigned by IANA; one can look up the number for
        particular protocol at the following URL:
        http://www.iana.org/assignments/protocol-numbers/</para>

        <para>Besides protocol number, header of the IP packet has
        also a field called "options" which is variable-length list of
        optional information for the packet. Not all firewalls can
        examine options, and those that can usually have certain
        limitations as of what options they can match
        against. Firewall Builder tries to provide controls for many
        popular options, supported by most sophisticated
        firewalls. Not all options supported by Firewall Builder are
        supported by all target firewall platforms (<xref
        linkend="support-for-ip-options">).</para>

        <para>Firewall Builder supports the following options:</para>

        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="150pt" align="left">
            <tbody>
              <row>
                <entry><filename>Source route options: LSRR, SSRR</filename></entry>

                <entry>Normally IP routing is dynamic with each router
                making decisions about which next hop router to send
                the packet to. However another option exists, where
                sender can choose the route. In case of Loose Source
                Route, sender host can specify list of routers the
                packet must traverse, but it can also pass through
                other routers between any two addresses in the
                list. Strict Source Route works very much the same
                way, except packet must traverse only through the
                specified addresses. Source routing can potentially be
                used to reach hosts behind firewall even if these
                hosts use private IP addresses which normally are not
                reachable on the Internet.</entry>
              </row>
              <row>
                <entry><filename>Record route option: RR</filename></entry>

                <entry>This option causes every router that handles
                the packet on its way to add its IP address to a list
                in the options field. This option is used by ping
                utility when it is called with "-R" command line
                switch and can potentially be exploited to discover
                internal network addressing and layout behind the
                firewall. Although the risk is low, some firewall
                administrators prefer to block packets with this
                option set.</entry>
              </row>
              <row>
                <entry><filename>Timestamp option:</filename></entry>

                <entry>This option tells routers that handle the
                packet to record their timestamps and sometimes
                addresses (like in the case of record route
                option). This option is seldom used, but can
                potentially be exploited to gather information about
                protected network, so some firewall administrators
                prefer to block packets with this option set. </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>


        <para>IP packets sometimes may become fragmented. This happens
        if original datagram was larger than what a physical network
        layer can transmit. IP packet header has special fields
        (called Flags and Fragmentation Offset) which help detect
        fragmented packets and reassembly them. Many firewalls can
        check these bits as well. Certain combinations of flags and
        fragmentation offset can never happen during normal operation
        but were seen to be used by attackers. Firewall Builder
        provides two options for most commonly used cases related to
        packet fragmentation: option 'all fragments' matches the
        second and further fragments, while option 'short' is used to
        match packets that are too short to contain even complete IP
        header.</para>

        <para>Standard IP Service objects that come with Firewall
        Builder appear in the tree "Standard", in the branch
        <guimenuitem>Services/IP</guimenuitem>.</para>

        <table id="support-for-ip-options">
          <title>Support for IP options and fragmentation on various firewall platforms</title>
          <tgroup cols="7">
            <colspec                 align="center">
            <colspec colwidth="64pt" align="center">
            <colspec colwidth="64pt" align="center">
            <colspec colwidth="64pt" align="center">
            <colspec                 align="center">
            <colspec                 align="center">
            <colspec                 align="center">
            <thead>
              <row>
                <entry>Firewall</entry>
                <entry>  lsrr   </entry>
                <entry>  ssrr   </entry>
                <entry>   rr    </entry>
                <entry>timestamp</entry>
                <entry>all fragments</entry>
                <entry>'short' packets</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>iptables</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>-</entry>
              </row>
              <row>
                <entry>ipfilter</entry>
                <entry>-</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
                <entry>+</entry>
              </row>
              <row>
                <entry>pf</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
              </row>
              <row>
                <entry>Cisco PIX</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
                <entry>-</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <figure id="ip-service-dialog1" float="1">
          <title>Editing IP Service Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="ip_service_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>IP Service dialog provides the following controls: </para>

        <para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>This is the name of the object</para>
            </listitem>

            <listitem>
              <para>Protocol:</para>

              <para>This is protocol number. </para>
            </listitem>

            <listitem>
              <para>Options:</para>

              <para>These flags represent IP header 'Options' flags:</para>

              <para>
                <simplelist>
                  <member>lsrr (loose source route)</member>
                  <member>ssrr (strict source route)</member>
                  <member>rr (record route)</member>
                  <member>timestamp</member>
                  <member>all fragments</member>
                  <member>short packet</member>
                </simplelist>
              </para>
            </listitem>
            <listitem>
              <para>Comments:</para>

              <para>This is free-style text field used for comments.</para>
            </listitem>
          </itemizedlist>
        </para>

      </sect1>

      <sect1>
        <title>ICMP Service</title>

        <para>ICMP Service object is a generalized representation of
        ICMP protocol. ICMP packets are often used to communicate
        error messages which are acted upon by either IP layer or
        higher layer protocols (TCP or UDP). ICMP can also be used as
        a simple query protocol.  Firewall administrator needs to
        understand the nature and purpose of ICMP in order to properly
        configure firewall to block unwanted and permit useful ICMP
        messages. ICMP packets have two header fields that distibguish
        particular ICMP messages: the <emphasis>"type"</emphasis> and
        <emphasis>"code"</emphasis> fields. There can be 15 different
        ICMP types, each of which may use different values for its
        <emphasis>"code"</emphasis> field to further specify the
        condition. Firewall Builder provides dialog with built-in list
        of all possible ICMP types and corresponding codes which helps
        administrator to pick appropriate one without having to look
        up these numbers in the book (<xref
        linkend="icmp-service-dialog1">). Standard ICMP Service
        objects that come with Firewall Builder appear in the tree
        "Standard", in the branch <guimenuitem>Services/ICMP</guimenuitem>.
        </para>

        <figure id="icmp-service-dialog1" float="1">
          <title>Editing ICMP Service Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="icmp_service_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>ICMP Service dialog provides the following controls:</para>

        <para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Name:</para>
              <para>This is the name of the object.</para>
            </listitem>
            <listitem>
              <para>ICMP Type and Code:</para>

              <itemizedlist spacing="compact">
                <listitem>
                  <para>Type:</para>

                  <para>ICMP message type. This control consists of
                  two widgets: numeric field and pull-down menu that
                  represent list of possible types and their
                  names. You can choose type either by number (using
                  the numeric entry field) or by its description
                  (using the pull-down menu).</para>
                </listitem>

                <listitem>
                  <para>Code:</para>

                  <para>ICMP message code. Just like the above, this
                  control consists of two widgets: numeric field and
                  pull-down menu that represent list of possible codes
                  and their names. This menu changes when you choose
                  different ICMP type since different types use
                  different codes. You can choose code either by
                  number (using the numeric entry field) or by its
                  description (using the pull-down menu).</para>
                </listitem>

                <listitem>
                  <para>Checkbox <guibutton>'Any Type'</guibutton></para>

                  <para>Check this if you wish to create an object
                  that would match with any ICMP type and code.</para>
                </listitem>
              </itemizedlist>

            </listitem>

            <listitem>
              <para>Comment:</para>

              <para>This is free-style text field used for comments.</para>
            </listitem>
          </itemizedlist>

        </para>
      </sect1>

      <sect1>
        <title>TCP Service</title>

        <para>TCP Service object is a generalization of TCP protocol
        which provides a connection-oriented, reliable, byte stream
        service. Many well-known frequently used application protocols
        use underlying TCP protocol: FTP (File Transfer Protocol),
        SMTP (Simple Mail Transfer Protocol), HTTP (Hyper Text
        Transfer Protocol) and so on. TCP header contains special
        fields called source and destination port numbers that are
        used to identify the sending and receiving application using
        data stream. These two values, along with the source and
        destination IP addresses in the IP header, uniquely identify
        each connection. </para>

        <para>Since port numbers are used to distnguish applications
        using data stream provided by TCP protocol, each application
        should use unique port number. To ensure interoperability,
        these numbers must be assigned by a central authority in a
        coordinated manner. Internet Assigned Numbers Authority
        (IANA) does that; assigned TCP and UDP port numbers can be
        looked up at the following URL
        http://www.iana.org/assignments/port-numbers . Most Unix
        systems also come with a file /etc/services which also
        contains a list of assigned port numbers.</para>

        <para>Firewall Builder comes with a collection of predefined
        TCP Service objects with port numbers already configured. You
        can simply use these objects in your policy rules and do not
        have to look up port numbers every time you need them. </para>

        <para>Typical TCP Service object is represented on a
        screenshot <xref linkend="tcp-service-dialog1">.</para>

        <figure id="tcp-service-dialog1" float="1">
          <title>Editing TCP Service Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="tcp_service_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>In Firewall Builder, TCP Service object is a
        generalization of TCP protocol. TCP header of a packet carries
        only one fixed value for the source port and one fixed value
        for destination port. In TCP Service object one can specify a
        range of values for the source and destination ports. This
        allows single TCP Service object to describe either a family
        of protocols using consequitive port numbers, or a protocol
        that may use variable port numbers or simply many protocols
        that use port numbers from a certain range. For example, on
        Unix systems TCP sessions opened by priviliged process always
        have their source port number assigned from the range below
        1024, while unpriviliged processes use source port numbers
        from the range starting from 1024 and above. One could create
        TCP Service object in Firewall Builder with source ports
        defined as shown on screenshot <xref
        linkend="tcp-service-dialog2"> to describe all priviliged TCP
        sessions.</para>

        <figure id="tcp-service-dialog2" float="1">
          <title>TCP Service Object: priviliged source ports</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="tcp_service_dialog2.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      

        <para>Using '0' as both start and end values for a range means
        'any value' for that range. Source port range of the object
        'priviliged TCP' starts from 0 and ends at 1023 (range are
        inclusive in Firewall Builder), while its destination port
        range start and end are both set to zero, which means 'any
        destination port'. Thus this object describes any TCP protocol
        with source port in range 0-1023 and any destination
        port.</para>

        <para>If all you need is to create an object to describe TCP
        protocol with particular destination port, just use the same
        port number for both start and end of destination port range
        (which effectively creates a range that consists of a single
        value). Example on <xref linkend="tcp-service-dialog1"> shows
        such service.</para>

        <para>TCP header also contains a collection of one-bit fields,
        or flags, that carry a variety of control information. For
        example, the SYN and ACK fkags are used for connection
        establishment, and the FIN flag is used for connection
        termination. Certain combination of flags are not allowed
        during the normal protocol operation bt may cause unpredicted
        reaction from systems when encountered in real packets;
        because of this reason firewall administrator may want to
        block TCP packets with unwanted combination of flags. </para>

        <para>There are six flags in TCP header. We just briefly
        mention them here; more information can be found in <citetitle
        pubwork="book">TCP/IP Illustrated, vol 1</citetitle> by
        W. Richard Stevens, chapter 17. </para>

        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colwidth="64pt" align="center">
            <colspec                 align="left">
            <tbody>
              <row>
                <entry><filename>URG</filename></entry>

                <entry>The "urgent" pointer is valid</entry>

              </row>
              <row>
                <entry><filename>ACK</filename></entry>

                <entry>The acknowledgment number is valid</entry>

              </row>
              <row>
                <entry><filename>PSH</filename></entry>

                <entry>The reciever should pass this data to the
                application as soon as possible</entry>

              </row>
              <row>
                <entry><filename>RST</filename></entry>

                <entry>Reset the connection</entry>

              </row>
              <row>
                <entry><filename>SYN</filename></entry>

                <entry>Synchronize sequence numbers to initiate a
                connection.</entry>

              </row>
              <row>
                <entry><filename>FIN</filename></entry>

                <entry>The sender is finished sending data.</entry>

              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Firewall Builder supports all six flags, although not
        all target firewall platforms can match against combinations
        of TCP or against flags at all (See <xref linkend="support-for-tcp-flags">).</para>

        <table id="support-for-tcp-flags" pgwide="0">
          <title>Support for Matching against TCP flags</title>
          <tgroup cols="2">
            <colspec colwidth="64pt"  align="center">
            <colspec colwidth="200pt" align="center">
            <thead>
              <row>
                <entry>Firewall</entry>
                <entry>Can inspect TCP header flags in the packet</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>iptables</entry>
                <entry>Yes</entry>
              </row>
              <row>
                <entry>ipfilter</entry>
                <entry>Yes</entry>
              </row>
              <row>
                <entry>pf</entry>
                <entry>Yes</entry>
              </row>
              <row>
                <entry>Cisco PIX</entry>
                <entry>No</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>TCP Service dialog provides the following controls:</para>

        <para>
          <itemizedlist  spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>This is the name of the object</para>
            </listitem>
            <listitem>
              <para>Source port range:</para>

              <para>These two controls define start and end of the
              source port range; they accept values between 0 and
              65535.</para>
            </listitem>
            <listitem>
              <para>Destination port range:</para>

              <para>These two controls define start and end of the
              destination port range; they accept values between 0 and
              65535.</para>
            </listitem>
            <listitem>
              <para>TCP Flags:</para>

              <para>TCP flags, see table above.</para>
            </listitem>
            <listitem>
              <para>Comments:</para>

              <para>This is free-style text field used for comments.</para>
            </listitem>
          </itemizedlist>
        </para>
      </sect1>

      <sect1>
        <title>UDP Service</title>

        <para>UDP Service object is a generalization of UDP protocol
        which is connectionless transport layer protocol. Many well
        known applicaitons use UDP as their transport, such as DNS
        (Domain Name System), DHCP (Dynamic Host Configuration
        Protocol), NTP (Network Time Protocol), SNMP (Simple Network
        Management Protocol) and so on.</para>

        <para>Similarly to that in TCP, UDP uses port numbers to
        distinguish multiple applications running on one machine from
        one another. UDP packet header carries two port numbers:
        source port and destination port. UDP Service object in
        Firewall Builder allows for definition of ranges for both
        source and destination port. The meaning of values assigned to
        range start and end is the same as in TCP Service object:
        ranges are inclusive, that is range start and end are
        included, using '0' for both start and end of either range
        means 'any port'. Screenshot <xref
        linkend="udp-service-dialog1"> shows UDP Service object 'dns'
        that represents Domain Name System protocol which uses
        destination port 53.  </para>

        <para>
        <figure id="udp-service-dialog1" float="1">
          <title>Editing UDP Service Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="udp_service_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      
        </para>

        <para>UDP Service dialog provides the following controls:</para>

        <para>
          <itemizedlist  spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>This is the name of the object</para>
            </listitem>
            <listitem>
              <para>Source port range:</para>

              <para>These two controls define start and end of the
              source port range; they accept values between 0 and
              65535.</para>
            </listitem>
            <listitem>
              <para>Destination port range:</para>

              <para>These two controls define start and end of the
              destination port range; they accept values between 0 and
              65535.</para>
            </listitem>
            <listitem>
              <para>Comments:</para>

              <para>This is free-style text field used for comments.</para>
            </listitem>
          </itemizedlist>
        </para>

      </sect1>

      <sect1>
        <title>Custom Service</title>

        <para>custom Service object can be used to inject arbitrary
        code into generated firewall script. Any combination of
        options allowed in the target firewall command line language
        which does not fit in a strict model of standard service
        object types can be expressed using Custom Service object. For
        example, iptables comes with a collection of patches called
        "Patch-o-matic" which add ability to match against complex
        combinations of packet parameters or header fields that are
        not supported by a standard code. One of the patches adds an
        ability to detect a port scan condition, where offending host
        tries to connect to UDP or TCP ports on the firewall or hosts
        behind it picking port numbers in turns trying to detect which
        ports have an applications listening on and which are
        'dead'. Normally firewall would inspect each attempt to
        connect to port separately from others and would generate many
        log records, one line per connection attempt. While this
        behavior is normal, it still fails to recognize a pattern in
        the actions of offending host, which may be important in
        investigation of malicious activity since port scanning is
        often a step in a preparation for more focused attack.
        </para>

        <para>Screenshot <xref linkend="custom-service-dialog1">
        represents Custom Service object that uses capabilities of
        'PSD' module from patch-o-matic. This module can match against
        spread in time port scan attempts and has few parameters to
        fine tune detection mechanism. Custom Object 'psd' defines
        command line options specific for module 'psd' in the field
        'Code'</para>

        <para>In general, Custom service can store custom piece of
        code for each supported firewall platform. When this object is
        used in firewall policy, policy compiler picks appropriate
        line of code depending on what target firewall platform the
        code is being compiled for.</para>

        <note>
          <para> The code specified in the Custom Service is used
          literally; no validation is done either by Firewall Builder
          GUI or policy compilers. </para>
        </note>

        <para>
        <figure id="custom-service-dialog1" float="1">
          <title>Editing Custom Service Object</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="custom_service_dialog1.jpg" format="jpg" align="Left" scale="33">
            </imageobject>
          </mediaobject>
        </figure>      
        </para>
        <para>Custom Service dialog provides the following controls:</para>

        <para>
          <itemizedlist  spacing="compact">
            <listitem>
              <para>Name:</para>

              <para>This is the name of the object</para>
            </listitem>
            <listitem>
              <para>Platform:</para>

              <para>This is pull-down menu that shows list of all
              firewall platform for which modules were installed and
              loaded when the GUI started. </para>
            </listitem>
            <listitem>
              <para>Code:</para>

              <para>This is a line of code in the target firewall language.</para>
            </listitem>
            <listitem>
              <para>Comments:</para>

              <para>This is free-style text field used for comments.</para>
            </listitem>
          </itemizedlist>
        </para>


        <para></para>
      </sect1>

  </chapter>


<!-- ############################################################### -->
<!-- TODO: pick better name for this chapter 

  What is it about:

  Examples and comparison of code produced by policy compilers for different firewall platforms

  -->

  <chapter>
    <title>Generating the code for different firewall platforms</title>

    <sect1>
      <title>Filtering rules</title>

      <sect2>
        <title>Filtering rule in interface policy</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Filtering rule in Global Policy</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Filtering rule using group of objects</title>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>NAT Rules</title>

      <sect2>
        <title>Simple 'masquerading' type NAT rule</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Access to the server inside, using its translated address</title>

        <para></para>
      </sect2>

      <sect2>
        <title>"No NAT" rule</title>

        <para></para>
      </sect2>
    </sect1>
  </chapter>


<!-- ############################################################### -->
  <appendix id="tab-firewall">
    <title>Using Firewall Dialog Tab 'Firewall' to configure target
    firewall options and control behavior of policy compiler </title>

    <sect1>
      <title>iptables</title>

      <para></para>
    </sect1>

    <sect1>
      <title>ipfilter</title>

      <para></para>
    </sect1>

    <sect1>
      <title>pf</title>

      <para></para>
    </sect1>

    <sect1>
      <title>Cisco PIX</title>

      <para></para>
    </sect1>
  </appendix>

<!-- ############################################################### -->
  <appendix id="tab-network">
    <title>Using Firewall Dialog Tab 'Network' to adjust network setup
    on the target host OS</title>

    <sect1>
      <title>Linux</title>

      <para></para>
    </sect1>

    <sect1>
      <title>FreeBSD</title>

      <para></para>
    </sect1>

    <sect1>
      <title>OpenBSD</title>

      <para></para>
    </sect1>

    <sect1>
      <title>Solaris</title>

      <para></para>
    </sect1>

    <sect1>
      <title>Cisco PIX</title>

      <para></para>
    </sect1>

  </appendix>

  <appendix id="policy-rule-options-dialogs">
    <title>Policy Rule Options</title>

    <sect1>
      <title>iptables</title>

      <para></para>
    </sect1>

    <sect1>
      <title>ipfilter</title>

      <para></para>
    </sect1>

    <sect1>
      <title>pf</title>

      <para></para>
    </sect1>

    <sect1>
      <title>Cisco PIX</title>

      <para></para>
    </sect1>
  </appendix>
</book>
