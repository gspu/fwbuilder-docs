<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY fwbuilder-url "http://www.fwbuilder.org/">
<!ENTITY iptables-url "http://netfilter.filewatcher.org/">
<!ENTITY ipfilter-url "http://coombs.anu.edu.au/~avalon/">
<!ENTITY gtkmm-url "http://gtkmm.sourceforge.net/">
<!ENTITY gtkmm-download "http://www.hvrlab.org/pub/gtkmm/">
<!ENTITY ipt-howto "http://www.netfilter.org/documentation/HOWTO//NAT-HOWTO.html">
<!ENTITY faq-url "http://www.fwbuilder.org/docs/firewall_builder_faq.html">
]>
<book id="Using">
  <bookinfo>
    <title>Firewall Builder User's Guide</title>

    <affiliation>
      <orgname>NetCitadel LLC</orgname>
    </affiliation>

    <edition>$Revision: 3.24 $ $Date: 2009-05-04 06:46:19 $</edition>

    <copyright>
      <year>2003,2009</year>

      <holder>NetCitadel, LLC</holder>
    </copyright>

    <legalnotice>
      <para>The information in this manual is subject to change without notice
      and should not be construed as a commitment by NetCitadel LLC.
      NetCitadel LLC assumes no responsibility or liability for any errors or
      inaccuracies that may appear in this manual.</para>

      <!--
      <para>The software described in this manual is furnished under a
      license and may only be used or copied in accordance with the
      terms and conditions of such a license.</para>
-->
    </legalnotice>
  </bookinfo>

  <!-- ############################################################### -->

  <chapter id="Introduction">
    <title>Introduction</title>

    <sect1>
      <title>Introducing Firewall Builder</title>

      <para>Whether you are an experienced professional, switching from
      Checkpoint Firewall-1 to Cisco PIX or an Open Source firewall, or a
      hobbyist trying to secure your home network, Firewall Builder simplifies
      firewall policy management.</para>

      <para>With Firewall Builder, you can manage the security policy of your
      firewall efficiently and accurately, without the learning curve usually
      associated with command line interfaces. Instead of thinking in terms of
      obscure commands and parameters, you simply create a set of objects
      describing your firewall, servers, and subnets, and then implement your
      firewall policy by dragging objects into policy rules. You can also take
      advantage of a large collection of predefined objects describing many
      standard protocols and services. Once a policy is built in the GUI, you
      can compile it and install it on one, or several, firewall
      machines.</para>
    </sect1>

    <sect1>
      <title>Overview of Firewall Builder Features</title>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Over 100 predefined objects for the most popular and widely
            used protocols and services</para>
          </listitem>

          <listitem>
            <para>Ability to create custom objects describing IP,ICMP,TCP,UDP
            or custom services</para>
          </listitem>

          <listitem>
            <para>Ability to create objects to describe hosts, networks and
            address ranges</para>
          </listitem>

          <listitem>
            <para>Powerful wizards and other tools to help you jumpstart your
            firewall policy, and do it right from the first try. Wizards
            implement standard policies for typical network layouts, which can
            later be extended and edited by hand</para>
          </listitem>

          <listitem>
            <para>The Network discovery tool which automates the creation of
            multiple objects</para>
          </listitem>

          <listitem>
            <para>An object oriented approach to the policy management: any
            change made to an object gets immediately reflected in all policy
            rules of all firewalls using that object. The configuration for
            multiple firewalls shares the same object database.</para>
          </listitem>

          <listitem>
            <para>The ability to turn a firewall policy into a configuration
            file or a script and then install it on a firewall with just a few
            clicks of the mouse.</para>
          </listitem>

          <listitem>
            <para>Convenient GUI that supports standard Copy/Paste operations
            for both text strings and network objects and allows for policy
            editing using drag and drop</para>
          </listitem>

          <listitem>
            <para>Support for several firewall platforms, including Cisco PIX
            and Open Source firewalls iptables, ipfilter and pf.</para>
          </listitem>

          <listitem>
            <para>The ability to print a single object, a firewall policy, the
            whole hierarchy, or export it to the text file in either plain
            text or html format</para>
          </listitem>
        </itemizedlist></para>

      <figure float="1" id="example1">
        <title>Sample firewall policy</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="scrn2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>
  </chapter>

  <!-- ############################################################### -->
  <chapter id="install">
    <title>Installing Firewall Builder</title>
    <sect1>
      <title>Red Hat Installation</title>
      <para>Using pre-built binary RPMs</para>

      <para>You need to download and install two RPMs: <filename>libfwbuilder-3.0.0-1.i386.rpm</filename> and <filename>fwbuilder-3.0.0-1.i386.rpm</filename>. To satisfy dependencies, you need the following packages installed on your system:</para>

      <itemizedlist>
	<listitem><para>libxml2 v2.4.10 or newer
	</para></listitem>
	<listitem><para>libxslt v1.0.7 o newer
	</para></listitem>
	<listitem><para>ucd-snmp or net-snmp
	</para></listitem>
	<listitem><para>openssl - always use latest version
	</para></listitem>
	<listitem><para>QT 4.3.x, 4.4.x Fwbuilder depends on QT 4.3 or 4.4, it will not work with 4.2
	</para></listitem>
      </itemizedlist>
	<para>Pre-built binary RPMs for RedHat Enterprise Linux 5 (RHEL 5) and CentOS 5.2</para>

	<para>These distributions do not come with QT4 and third-party binary RPMs of QT v4.3.x and 4.4.x are hard to come by. We distribute binary RPMs of Firewall Builder 3.0 statically linked with QT 4.4.1 for these distributions. These RPMs are posted in the downloads area on the SourceForge project site. These RPMs have the same standard names: <filename>libfwbuilder-3.0.0-1.i386.el5.rpm</filename> and <filename>fwbuilder-3.0.0-1.i386.el5.rpm</filename>, they just have no dependency on QT RPMs.</para>

	<para>If fwbuilder statically linked with QT crashes on start on your CentOS system, check if you have the following font packages installed: bitmap-fonts or bitstream-vera-fonts. Either one should make fwbuilder work (but I am told bitstream-vera fonts look better). See bug report <ulink url="http://sourceforge.net/tracker/?func=detail%26aid=2595205%26group_id=5314%26atid=1070394"><citetitle>#2595205</citetitle></ulink> on SourceForge for more details.</para>
    </sect1>
    <sect1>
      <title>Ubuntu Installation</title>
      <para>Using pre-built binary packages</para>
      
      <para>You need to download and install two packages: 

      <itemizedlist>
	<listitem><para><filename>libfwbuilder_&lt;version&gt;-&lt;os&gt;_&lt;platform&gt;.deb</filename> Example: <filename>libfwbuilder_3.0.4-b778-ubuntu-hardy-1_i386.deb</filename>
	</para></listitem>
	<listitem><para><filename>fwbuilder_&lt;version&gt;-&lt;os&gt;_&lt;platform&gt;.deb</filename> Example: <filename>fwbuilder_3.0.4-b778-ubuntu-hardy-1_i386.deb</filename>
	</para></listitem>
      </itemizedlist></para>

      <para>To satisfy dependencies, you need the following packages installed on your system:</para>

      <itemizedlist>
	<listitem><para>QT 4.3.x, 4.4.x. Fwbuilder depends on QT 4.3 or 4.4, it will not work with 4.2
	</para></listitem>
      </itemizedlist>

      <para>You can get QT via your regular package manager.</para>

      <para>To install Firewall Builder, go to your download directory and run the following command:</para>

      <para><command>dpkg -i libfwbuilder_&lt;version&gt;-&lt;os&gt;_&lt;platform&gt;.deb fwbuilder_&lt;version&gt;-&lt;os&gt;_&lt;platform&gt;.deb</command></para>

      <para>Example: <command>dpkg -i libfwbuilder_3.0.4-b778-ubuntu-hardy-1_i386.deb fwbuilder_3.0.4-b778-ubuntu-hardy-1_i386.deb</command></para>
    </sect1>
    <sect1>
      <title>Installing FreeBSD Ports</title>
      <para>Firewall Builder consists of two ports: <filename>/usr/ports/security/libfwbuilder</filename>  and <filename>/usr/ports/security/fwbuilder</filename>. Once both ports are updated (it usually takes couple of weeks to update ports after the package is released), just install the port as usual using portinstall or issuing "make install" in <filename>/usr/ports/security/fwbuilder</filename>.</para>
    </sect1>
    <sect1>
      <title>Windows Installation</title>

      <para>Double-click on the package file, then follow the step-by-step instructions in the installation wizard.</para>
    </sect1>
    <sect1>
      <title>Mac OS X Installation</title>

      <para>Mac OS X package is distributed in the form of a disk image ( .dmg file). Doubleclick on the image to mount it, then drag Firewall Builder application to your Applications folder (or any other place).</para>
    </sect1>
    <sect1>
      <title>Compiling from Source</title>
      <para>See Appendix XXXX for instructions.</para>
    </sect1>
  </chapter>
    <!-- *************************************************************** -->
  <chapter id="definitions">
    <title>Definitions and Terms</title>

    <para>This chapter defines common terms that pertain to the Firewall
    Builder program.</para>
    <variablelist>
      <varlistentry>
	<term>
	Firewall
	</term>
      <listitem>
	<para>The term <emphasis>firewall</emphasis> can refer to a device that implements firewall software, or it can refer to the software and policy running on the device, or it can refer to just the firewall access policy.</para>
	<para>In this document, the term <emphasis>firewall</emphasis> refers the firewall object in in Firewall Builder. The firewall object contains a logical representation of the firewall devices interfaces, and the access policy ruleset, NAT ruleset, and Routing ruleset that will be placed on the firewall device.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	Policy
	</term>
      <listitem>
	<para>The term <emphasis>policy</emphasis> can refer to the entire set of "business logic" that is implemented in the firewall, or it can refer to the access policy portion of firewall only.</para>
	<para>In this document, the term <emphasis>policy</emphasis> refers to the access policy ruleset</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </chapter>
    <!-- *************************************************************** -->
  <chapter id="gettingstarted">
    <title>Getting Started</title>
    <para>The Firewall Builder package for most Linux distributions creates a menu item that makes starting the program easy. (On Ubuntu, it's System > Administration > Firewall Builder.) However, if the menu item is not there, you can always launch it from the command line by just typing <command>fwbuilder</command> at the shell prompt.</para>

    <para>The program starts by opening the main window and a greeting dialog. The dialog provides links to the project web site where you can find more tutorials, FAQ, Firewall Builder Cookbook and other documentation, as well as the bug tracking system and links to user forums and mailing list. Clicking on a link in the dialog opens corresponding the web page in your web browser. This works the same on all supported OS: Linux, Windows and Mac OS X. You can always open this dialog later using an item in the <guimenu>Help</guimenu> menu.</para>

      <para><figure id="pict_020">
          <title>Starting Firewall Builder</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_020.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

     <para>Let's create our first firewall object. To do this, we'll use the object creation menu that appears when you click on the icon in the small toolbar right above the object tree. Choose <guimenuitem>New Firewall</guimenuitem> from the menu that appears.</para>

      <para><figure id="pict_030">
          <title>Select New Firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_030.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>The first page of the New Firewall wizard appears. In this page of the wizard we can enter the name for the new firewall object (here it is "guardian"), its platform ("iptables") and its host OS ("Linux 2.4/2.6").</para>

      <para>The name of the new firewall object can be anything you want. However, if you want to use SNMP to populate the interface objects, or if you want to use DNS lookups to populate IP address objects, you must name the firewall object the same name as the actual firewall machine.</para>

      <para>There are three ways a new firewall can be created: you can use a pre-configured template firewall object, create it from scratch, or use SNMP to create a firewall object with interfaces but an empty policy.</para>

      <para>This tutorial demonstrates the first method (using template object). To do this, check <guilabel>Use pre-configured template firewall objects</guilabel> checkbox. Firewall Builder comes with a default set of objects, and we'll be using one of those there. Alternatively, an administrator can distribute a library of predefined templates to other users in the enterprise.</para>

      <para>Since we are using one of the standard templates in this tutorial, we'll leave the standard template library path and name in the <guilabel>Template file</guilabel> input field. Click <guibutton>Next</guibutton> to move on to the next page of the wizard.</para>

      <para>Note that template firewall object comes completely configured, including addresses and netmasks for its interfaces and some basic policy and NAT rules. This configuration is intended as a starting point only. You should reconfigure addresses of interfaces to match those used on your network. You most likely will have to adjust rules to match your security policy.</para>

      <para><figure id="pict_040">
          <title>Define firewall platform</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_040.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>This page of the wizard shows template objects and their configuration. Standard template objects represent firewalls with two or three interfaces, a host with one interface, a web server or a Cisco router. We choose <guilabel>fw template 3</guilabel>, a firewall with three interfaces, for this tutorial. Click <guibutton>Finish</guibutton> to create a new firewall object using the chosen template. </para>

      <para><figure id="pict_050">
          <title>Pick a template</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_050.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here is our new firewall object. Its name is "guardian", it appears in the object tree in the left hand side of the main window in the folder "Firewalls". When an object is selected in the tree, a brief summary of its properties appears in the panel under the tree. Double-clicking on the object in the tree opens it in the editor panel at the bottom-right panel of the main window. The editor for the firewall object allows us to change its name, platform and host OS, and also provides buttons that open dialogs for "advanced" settings for the firewall platform and host OS. We will inspect these little later in this tutorial. </para>

      <para><figure id="pict_060">
          <title>New Firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_060.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Now would be a good time to save the data to a disk file. To do so use main menu <guimenuitem>File/Save As</guimenuitem>. </para>

      <para><figure id="pict_070">
          <title>Save firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_070.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Pick a location and name for the new data file. Firewall Builder uses file extension ".fwb" for data files. </para>

      <para><figure id="pict_080">
          <title>Specify filename</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_080.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Note that once the firewall data is saved to a file, its name appears in the main window title. Here it is "test.fwb."</para>

      <para><figure id="pict_090">
          <title>Filename displayed</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_090.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Let's take a little tour of the network and service objects that come standard with the program. You can use these pre-configured objects to build access Policy, NAT, and Routing rules for your firewall.</para>

      <para>Objects in the tree are organized in libraries. You can switch between libraries using the drop-down menu above the tree. Firewall Builder comes with a collection of address, network, service and time interval objects in the library called "Standard". Lets take a look at them.</para>

      <para><figure id="pict_093">
          <title>Objects tree</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_093.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Folder <guilabel>Objects/Hosts</guilabel> contains a few host objects used in standard firewall templates. Folder <guilabel>Objects/Network</guilabel> contains network objects that represent various standard address ranges and blocks, such as multicast, net 127/8, networks defined in RFC1918 and so on. </para>

      <para><figure id="pict_094">
          <title>Host and Network objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_094.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Firewall Builder also comes with an extensive collection of service objects. This slide shows some TCP objects (all of them do not fit in the screenshot). </para>

      <para><figure id="pict_095">
          <title>TCP objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_095.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>ICMP service objects. </para>

      <para><figure id="pict_096">
          <title>ICMP objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_096.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>UDP service objects. </para>

      <para><figure id="pict_097">
          <title>UDP objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_097.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Let's inspect some of the objects Firewall Builder created for you as part of the new firewall object. To open an object in the editor and inspect or change its properties, double-click on it in the tree.</para> 

      <para><figure id="pict_100">
          <title>Firewall object</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_100.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>You can also right-click on the object in the tree to open a pop-up menu. Choose <guimenuitem>Edit</guimenuitem> to edit the object. </para>

      <para><figure id="pict_101">
          <title>Edit an object</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_101.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Every object in Firewall Builder has basic attributes such as <guilabel>Name</guilabel> and <guilabel>Comment</guilabel>. Other attributes depend on the object type.</para>

      <para>Attributes of the firewall object include <guilabel>Platform</guilabel> (can be iptables, pf, ipfilter, etc.), <guilabel>Version</guilabel> (platform-dependent) and <guilabel>Host OS</guilabel>. Buttons <guibutton>Host OS Settings</guibutton> and <guibutton>Firewall Settings</guibutton> open dialogs with many additional attributes that depend on the firewall platform and host OS. More on these later.</para>

      <para><figure id="pict_102">
          <title>Firewall attributes</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_102.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here are the choices for the firewall platform, version (for iptables) and host OS. </para>

      <para><figure id="pict_103">
          <title>iptables attributes</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_103.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Interfaces of the firewall are represented by objects located below the Firewall object in the tree. We refer to them as "children" of the firewall object. This slide demonstrates properties of interface eth0. To open it in the editor double-click on it in the tree. If editor panel is already open and shows some object, it is sufficient to select the new object in the tree to reveal it in the editor panel (no need to double-click).</para>

      <para>IP and MAC addresses of interfaces are represented by child objects in the tree located below the corresponding interface.</para>

      <para><figure id="pict_104">
          <title>Firewall interface objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_104.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>An interface object has several attributes that define its function, such as "Management interface", "external", and so on.</para>

      <itemizedlist>
	<listitem><para><guilabel>Name</guilabel>: The name of the interface object in Firewall Builder must match exactly the name of the interface of the firewall machine it represents. This will be something like "eth0", "eth1", "en0", "br0", and so on.
	</para></listitem>
	<listitem><para><guilabel>Label</guilabel>: On most OS's this field is not used and serves the purpose of a descriptive label. Firewall Builder GUI uses a label, if it is not blank, to show interfaces in the tree. One of the suggested uses for this field is to mark interfaces to reflect the network topology ('outside', 'inside') or the purpose ('web frontend' or 'backup subnet'). The label is mandatory for Cisco PIX though, where it must reflect the network topology.
	</para></listitem>
	<listitem><para><guilabel>Management interface</guilabel>: Sometimes the host has several network interfaces, in which case one of them can be marked as the 'management interface'. The management interface is used for all communication between Firewall Builder and the host.
	</para></listitem>
	<listitem><para><guilabel>External interface (insecure)</guilabel>: Marks an interface that connects to the Internet.
	</para></listitem>
	<listitem><para><guilabel>Unprotected interface</guilabel>: Marks interface to which Firewall Builder should not assign any access lists (used only with Cisco IOS platform).
	</para></listitem>
	<listitem><para><guilabel>Regular Interface</guilabel>: Use this option if the interface has an IP address assigned to it manually.
	</para></listitem>
	<listitem><para><guilabel>Address is assigned dynamically</guilabel>: Use this option if the interface has a dynamic address (obtained by means of DHCP or PPP or another protocol). In this case an address is unknown at the moment when Firewall Builder generates the Firewall policy.
	</para></listitem>
	<listitem><para><guilabel>Address is assigned dynamically</guilabel>: Use this option if the interface has a dynamic address (obtained by means of DHCP or PPP or another protocol). In this case an address is unknown at the moment when Firewall Builder generates the Firewall policy.
	</para></listitem>
	<listitem><para><guilabel>Unnumbered interface</guilabel>: Use this option if the interface can never have an IP address, such as the Ethernet interface used to run PPPoE communication on some ADSL connections, tunnel endpoint interface, or an interface on a bridging Firewall. See below Section XXXXX for more detailed discussion of these different types of interfaces.
	</para></listitem>
	<listitem><para><guilabel>Bridge port</guilabel>: This option is used for port of bridged firewall.
	</para></listitem>
	<listitem><para><guilabel>Security level</guilabel>: The security level of this interface, used only with Cisco PIX (ASA).
	</para></listitem>
	<listitem><para><guilabel>Network zone</guilabel>: Network zone of this interface, used only with Cisco PIX (ASA). Network zone drop-down list shows all network objects and groups of addresses and networks present in the tree. Choose one of them to tell the compiler which networks and blocks of addresses can be reached through this interface. Compiler uses this information to decide which interface each ACL rule should be associated with based on the addresses used in the destination of the rule.
	</para></listitem> 
      </itemizedlist>

      <para><figure id="pict_105">
          <title>Interface object attributes</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_105.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here is IP address of interface eth0. The address and netmask are attributes of the child object of the type "IPv4 address". Here the address is "192.0.2.1" and netmask "255.255.255.0". (Netmask can also be specified using slash notation, such as 24, without the actual slash.) Button <guibutton>DNS Lookup</guibutton> can be used to determine IP address using DNS. The program runs DNS query for the "A" record for the name of the parent firewall object. (This only works if the firewall object has the same name as the actual firewall machine.)</para>

      <para><figure id="pict_110">
          <title>Interface IP address</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_110.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>This is the IP address of the internal interface of the firewall. The address used in this template is "192.168.1.1" with netmask "255.255.255.0". This is a rather typical address used for small and home networks. Some commercial firewall appliances come pre-configured with this address.</para>

      <para>If your network uses an address different from the "192.168.1.0/24" address used in the template, you should change the address of the interface in the editor panel and click <guibutton>Apply</guibutton>. In addition, you also will need to replace the network object "net-192.168.1.0" used in several Policy and NAT rules of the newly created firewall with a network object that has an address matching your network configuration. XXXXXXX See slideshow How to change IP addresses in the firewall configuration created from template for the demonstration of the procedure.</para>

      <para><figure id="pict_120">
          <title>Firewall internal interface</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_120.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here is the IP address of the DMZ interface of the firewall. The address used in this template is "192.168.2.1", with netmask "255.255.255.0". Change it to match your DMZ network address. </para>

      <para><figure id="pict_130">
          <title>Firewall DMZ interface</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_130.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Let's inspect the properties of the firewall object. Double-click on the firewall "guardian" in the tree to open it in the editor panel, then click the <guibutton>Firewall Settings</guibutton> button in the editor. This opens a new dialog that looks like this. Notice <guibutton>Help</guibutton> button in this dialog. Clicking this button opens help as shown on the next slide.</para>

      <para><figure id="pict_140">
          <title>Firewall Compiler properties</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_140.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>The online help explains all attributes and parameters located in each tab of the <guilabel>advanced settings</guilabel> dialog. Explore it, as many parameters are important and affect the generated firewall script in different ways.</para>

      <para>The next few slides show other tabs of the <guilabel>advanced settings</guilabel> dialog. You can find detailed explanations of all parameters in the online help.</para>

      <para><figure id="pict_145">
          <title>Compiler properties online help</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_145.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>This page defines various parameters for the built-in policy installer. The installer uses an SSH client (pscp.exe and plink.exe on Windows) to transfer the generated script to the firewall machine and activate it there. </para>

      <para><figure id="pict_150">
          <title>Installer properties</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_150.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>You can define shell commands that will be included in the generated script at the beginning and at the end of it. These commands can do anything you want, such as configure some subsystems, set up routing, and so on. </para>

      <para><figure id="pict_160">
          <title>Script Prolog/Epilogue properties</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_160.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Parameters for logging. </para>

      <para><figure id="pict_170">
          <title>Logging properties</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_170.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>This screen shows more options for the script generation. Notice that Firewall Builder can produce the iptables script in two formats: 1) as a shell script that calls the iptables utility to add each rule one by one, or 2) it can use iptables-restore script to activate the whole policy at once. Other parameters are explained in the online help. </para>

      <para><figure id="pict_180">
          <title>Script properties</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_180.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Starting with v3.0, Firewall Builder can generate both IPv4 and IPv6 policies. This tab controls the order in which they are added to the script if you have defined rules for both address families in the Policy objects of the firewall.</para> 

      <para><figure id="pict_190">
          <title>IPv4, IPv6 generation order</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_190.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Lets take a look at the policy of the template firewall. These rules are intended to be an example, a starting point to help you create your own policy. Most likely you will want to modify the rules to suite your requirements. Explanations of the rules given here are brief because the goal of Getting Started is only to demonstrate how to use Firewall Builder.</para>

      <itemizedlist>
	<listitem><para><guilabel>Rule 0</guilabel>: This is an anti-spoofing rule. It blocks incoming packets on the external interface that have source addresses that belong to the firewall or your internal or DMZ networks. The rule is associated with outside interface and has <guilabel>Direction</guilabel> set to "Inbound".
	</para></listitem>
	<listitem><para><guilabel>Rule 1</guilabel>: This rule permits any packets on the loopback interface. This is necessary because many services on the firewall machine communicate back to the same machine via loopback.
	</para></listitem>
	<listitem><para><guilabel>Rule 2</guilabel>: Permit ssh access from internal network to the firewall machine. Notice service object "ssh" in the column <guilabel>Service</guilabel>. (This object can be found in the Standard objects library in the Services/TCP folder.)
	</para></listitem>
      </itemizedlist>

      <para><figure id="pict_200">
          <title>Template rulesets</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_200.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Access policy rules belong to the object "Policy", which is a child object of the firewall and can be found in the tree right below it. As with any other object in Firewall Builder, the Policy object has some attributes that you can edit if you double-click on it in the tree.</para>

      <itemizedlist>
	<listitem><para>Policy can be IPv4, IPv6, or combined IPv4 and IPv6. In the last case you can use a mix of IPv4 and IPv6 address objects in the same policy (in different rules), and Firewall Builder will automatically figure out which one is which and sort them out.
	</para></listitem>
	<listitem><para>Policy can translate into only the mangle table (used for modifying packets) or a combination of the filter table (used for allowing/blocking packets) and the mangle table. In the latter case, the policy compiler decides which table to use based on the rule action and service object. Some actions, such as "Tag" (which translates into iptables target MARK), go into mangle table.
	</para></listitem>
	<listitem><para>The "Top ruleset" is the one the compiler will use to populate iptables built-in chains INPUT/OUTPUT/FORWARD. (If you have only one ruleset, then mark it as the top ruleset.) If a policy is not marked as "top ruleset", generated rules will go into a user-defined chain with the same name as the policy object.
	</para></listitem>
      </itemizedlist>

      <para><figure id="pict_210">
          <title>Policy ruleset</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_210.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here are the pre-configured NAT rules.</para>
      <itemizedlist>
	<listitem><para><guilabel>Rule 0</guilabel>: Tells the firewall that no address translation should be done for packets traveling from network 192.168.2.0 to 192.168.1.0 (because Translated Source, Translated Destination and Translated Service are left empty).
	</para></listitem>
	<listitem><para><guilabel>Rule 1</guilabel>: Packets coming into the firewall from internal and DMZ networks are translated so that their source address will change to that of the outside interface on the firewall.
	</para></listitem>
	<listitem><para><guilabel>Rule 2</guilabel>: Packets coming from the Internet to the interface "outside" will be translated and forwarded to the internal server on DMZ represented by the host object "server on dmz".
	</para></listitem>
      </itemizedlist>

      <para><figure id="pict_220">
          <title>NAT ruleset</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_220.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Now we compile the policy of the firewall "guardian" and generate the iptables script. To do so, right-click on the firewall in the tree, then select <guimenuitem>Compile</guimenuitem> from the pop-up menu. </para>

      <para><figure id="pict_230">
          <title>Compile the firewall rulesets</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_230.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>A new dialog appears that allows you to choose which firewalls you want to compile. Obviously this is only useful if you have several firewalls in the object tree. Since the checkbox next to the "guardian" firewall is already checked, click <guibutton>Next</guibutton> to proceed.</para>

      <para><figure id="pict_240">
          <title>Compile firewall dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_240.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Firewall Builder calls the appropriate policy compiler (which is an external program that can be called from the command line, if desired). The dialog displays compiler progress and results. </para>

      <para><figure id="pict_250">
          <title>Compile status dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_250.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Compiler generates an iptables script in a ".fw" file with the same name the same as the firewall object (guardian.fw). The file is placed in the same directory as the .fwb data file. </para>

      <para><figure id="pict_260">
          <title>Generated file</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_260.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>Here is the how generated script looks (this is just the beginning). Now you can transfer it to the firewall and execute it there to install iptables rules. However, it is much more convenient to use Firewall Builders' built-in policy installer to do this. </para>

      <para><figure id="pict_270">
          <title>Generated script</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_270.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>

      <para>To use the installer, right-click on the firewall object in the tree and select <guimenuitem>Install</guimenuitem>. Firewall Builder will compile the policy (if it is not compiled already) and then open a dialog where you can configure the parameters of the installer. Here you need to enter a password to authenticate to the firewall.</para>

      <para><figure id="pict_280">
          <title>Policy installer</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="pict_280.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
      </figure></para>
 
  </chapter>

    <!-- *************************************************************** -->
  <chapter id="using-gui">
    <title>Firewall Builder GUI</title>
    <sect1>
      <title>The Main Window</title>

      <para>The main windows contains the objects, policies, and rulesets you
      will use to create your firewall.</para>

      <para>You can create more than one main window using the main menu
      <guimenuitem>File</guimenuitem>/<guimenuitem>New
      Window</guimenuitem>. All windows are synchronized and work with the
      same object tree. Changes made to the object in one window are
      immediately reflected in all windows where it is visible, both in the
      tree and in the dialog.</para>

      <para>Drag and drop and Copy/Paste operations work across different
      windows.</para>

      <para>The main window is divided into two parts: the object tree and
      the dialog area.</para>

      <para><figure id="main-win1">
          <title>The main window</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="fwbMainWindow.png" />
            </imageobject>

            <textobject>
              <phrase>Firewall Builder Main Window</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>The Object Tree</para>

      <para>The object tree, on the left, has three views: Standard, User, and Deleted Objects.
      (Deleted Objects must be turned on in <guimenuitem>File>Preferences>Objects>Show deleted objects</guimenuitem>. 
      Standard view contains a host of pre-defined interface, subnet,
      protocol, and other objects for you to use. The user tree contains
      objects that you define to match your particular network.</para>

      <para>The object
      that is currently selected in the tree is highlighted in color and is
      shown in the dialog area on the right.</para>

      <para>The Dialog Area</para>

      <para>The dialog area, on the right, shows details about the object
      selected in the object tree. It is also where you make changes to
      existing objects, including firewall rulesets.</para>
    </sect1>

    <sect1>
    <title>Object Tree</title>

      <figure float="1" id="tree-structure" pgwide="0">
        <title>Standard Tree Structure</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="pict_094.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The object tree stores all objects in a predefined hierarchy.
      Types that correspond to network objects (hosts, address ranges,
      networks and groups of these) are located in the <guilabel>Objects</guilabel> branch, types
      that correspond to all services are in the <guilabel>Services</guilabel> branch, time
      intervals are in the <guilabel>Time</guilabel> branch, and all firewalls are in the
      <guilabel>Firewalls</guilabel> branch. Newly created objects are automatically placed in
      the appropriate position in the tree. Each branch of the tree is
      automatically sorted by the object name.</para>

      <para>The program has three libraries: User, Standard, and Deleted Objects. (Deleted Objects must be turned on in <guimenuitem>File>Preferences>Objects>Show deleted objects</guimenuitem>. User holds
      user-defined objects. Standard holds a collection of standard
      objects that come with the program, and Deleted Objects acts like a trash can or recycle bin for user objects you delete. Standard objects represent over 100 frequently used protocols and services.</para>

      <para>Functionally, there is no difference between having an object in the Standard 
      tree vs. the User tree; it is just a convenient way to sort objects in the tree. You
      can think of each as a kind of the "view". It only affects representation
      of the data in the GUI; objects are all equal in all other senses and
      you can use an object from either part of the tree in your policy. You
      need not (and cannot) insert the firewall into the "Standard"
      tree.</para>

      <figure float="1" id="main-win2">
        <title>Standard Objects</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="pict_095.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect1>

    <sect1 id="creating-objects">
      <title>Creating Objects</title>

      <para>New objects can be created using the
      <guimenu>New Object</guimenu> menu, accessed by clicking this icon above the object tree:
	<inlinemediaobject>
	    <imageobject>
	      <imagedata fileref="new-object-icon.png"/>
	    </imageobject>
	</inlinemediaobject>      
      . Certain objects can also
      be created via a pop-up menu that can be opened by right-clicking on the object in the tree.</para>

      <figure float="1" id="menu-new-object">
        <title>Creating Objects Using The Object Menu</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="menu-new-object.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can create all objects through this menu. You can also create objects
      by right-clicking in a folder of a tree. If you right-click a folder, you can only to create objects appropriate to that folder. For example, the interface object can only be placed under the
      host or the firewall, so the option <guimenuitem>Add Interface</guimenuitem>
      is available only if you right-click on a host or firewall.</para>

      <figure float="1" id="menu-right-click-new-object">
        <title>Creating Objects by Right-Clicking</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="menu-right-click-new-object.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Another way to create objects is to use the <guimenuitem>Duplicate</guimenuitem> option when you right click on an object. This allows you to create a copy of the object. For example, you may want to create a firewall policy for one platform, duplicate it, then just change the target platform on the copy. However, copies are not linked in any way. A change to the original has no affect on the copy.</para>
    </sect1>

    <sect1>
      <title>Navigating The Object Tree and Editing Objects</title>

      <para>The object selected in the tree automatically appears in the
      dialog area where it can be reviewed or modified. Objects are opened by
      a single mouse click in the tree. Clicking the right button when the
      mouse cursor is over the object's label in the tree brings up the pop-up
      menu. This menu is context-sensitive and provides items for the
      following functions:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Edit</para>

            <para>The default action. Produces the same result as clicking on the object.</para>
          </listitem>

          <listitem>
            <para>Duplicate</para>

            <para>Creates a copy of the current object, places
            it in the User tree and opens it in the main window. (If user-created libraries exist, then Firewall Builder will give you the choice where to put the duplicate.) The new object has
            the same name as the original object, unless that object name is already in use in that tree. If so, a "-1" is appended to the object name.</para>
          </listitem>

          <listitem>
            <para>Copy</para>

            <para>Copies an object onto the clipboard.</para>
          </listitem>

          <listitem>
            <para>Cut</para>

            <para>Copies an object onto the clipboard and removes it from
            the tree.</para>
          </listitem>

          <listitem>
            <para>Paste</para>

            <para>Puts a copy of the object on the clipboard into the tree.</para>
          </listitem>

          <listitem>
            <para>Delete</para>

            <para>Deletes an object without making a copy on the
            clipboard. If the Deleted Objects tree has been turned on, the object will show up there.</para>
          </listitem>

          <listitem>
            <para>Find</para>

            <para>Brings up a Find/Find-and-Replace panel. Click <guibutton>Next</guibutton> in the panel to see all instances of the object boxed in red.</para>
	    <para>To do a Search and Replace, drag another object into the <guilabel>Replace object</guilabel> box, specify a scope for the replacement using the pull-down menu, and then use the <guibutton>Replace All</guibutton>, <guibutton>Replace</guibutton>, <guibutton>Replace &amp; Find</guibutton>, and <guibutton>Next</guibutton> buttons.</para>
          </listitem>

          <listitem>
            <para>Where used</para>

            <para>This scans the whole tree, including all groups and policies
            of all firewalls, looking for references to the current object. In
            the end the program shows a pop-up dialog with icons corresponding
            to groups and firewalls that use current object. Double-clicking
            on the icon opens the corresponding object in the main
            window.</para>
          </listitem>

          <listitem>
            <para>Lock and Unlock</para>

            <para>Lock makes an object read-only, which prevents accidentally modification. Unlock puts the object back into read/write mode.</para>
          </listitem>
        </itemizedlist></para>

      <para>The pop-up menu can also have items to add interface and address
      objects, depending on what type of object it is called for.</para>

      <para>In general, GUI has been designed to "look and feel" like a
      typical file browser (for example, Windows Explorer). It shows object groups as
      a collection of icons, where each icon represents an individual object
      (<xref linkend="group-view" />). The user can navigate between objects
      either using the mouse or keyboard arrow keys. The active object is
      highlighted with a different color. Double-clicking on the icon in the
      group view opens the corresponding object. Right-clicking opens a pop-up menu that has <guimenuitem>Open Object</guimenuitem>,
      <guimenuitem>Copy</guimenuitem>, <guimenuitem>Cut</guimenuitem>, and <guimenuitem>Paste</guimenuitem> options.</para>

      <figure float="1" id="group-view">
        <title>Group View</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="group_view1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Dialogs for objects that can be edited have
      <guibutton>Apply</guibutton> and <guibutton>Undo</guibutton> buttons
      at the bottom. Initially these buttons are inactive, but once the
      object's parameters have been modified in the dialog, or group members
      have been added or removed, both buttons get activated so you
      can click <guibutton>Apply</guibutton> to save new data or
      <guibutton>Undo</guibutton> to reload original values into the dialog.
      If you try to switch to another object without either saving or
      reloading data in the current dialog, the program shows a pop-up dialog
      asking you to take one of these actions. There is also an option to
      make the program automatically save modified data when the user switches
      between objects (see <link linkend="automatically-save-data">below</link>).</para>
    </sect1>
 
    <!-- *************************************************************** -->

    <sect1>
      <title>GUI Preferences</title>

      <para>Use the Preferences dialog to set file and GUI preferences. Open
      the dialog by selecting
      "<guimenuitem>Edit</guimenuitem>/<guimenuitem>Preferences...</guimenuitem>".
      The GUI Preferences dialog looks like this:</para>

      <figure>
        <title>The GUI Preferences Dialog</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="fwPrefGeneral.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The dialog is divided into tabs. Each tab controls a different
      aspect of the program.</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para><guimenuitem>General</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Working directory:</para>

                <para>This option tells the program where it should store the
                data file. Policy compilers also store firewall configuration
                files or scripts they produce in the this directory. If this
                parameter is left blank, then the policy compiler will store
                the firewall configuration it generates in the same directory
                as the original data file.</para>
              </listitem>

              <listitem>
                <para>Software Updates</para>

                <para>These controls determine when the program checks for
                updates.</para>

                <para>Check the <guibutton>Check for updates
                automatically</guibutton> check box if you want the program to
                check for updates automatically on program start.</para>

                <para>Click <guibutton>Check Now</guibutton> if you want to
                check manually at a given time.</para>

                <para>In either case, if you are behind a proxy, enter the
                host IP and port of the proxy in the <emphasis>Use http proxy
                while checking for status updates (host:port)</emphasis>
                field. Separate the host IP and port number with a colon
                (:).</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>Objects</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para><anchor id="automatically-save-data"/>Automatically save data in dialogs while switching
                between objects</para>

                <para>The GUI shows a dialog for every opened object in the
                same place (the right half of the main window). Normally if
                the user has made some changes to the object's data and wants
                to switch to another object without clicking on the
                <guibutton>"Apply"</guibutton> or
                <guibutton>"Undo"</guibutton> button, GUI shows a pop-up
                dialog asking whether data should be saved or changes should
                be ignored. If this option is turned on though, the program
                automatically saves data every time the user leaves the dialog
                with unsaved data to open another object.</para>
              </listitem>

              <listitem>
                <para>Enable object tooltips</para>

                <para>Firewall Builder can show a summary of the object's
                properties in a quick pop-up window (this feature is often
                called "tooltip") when the user places the mouse cursor over
                the object icon. If this is not enabled, then you must click
                on an object to get the same information. The
                <emphasis>Tooltip delay</emphasis> control sets the delay in
                seconds.</para>
              </listitem>

              <listitem>
                <para>Show deleted objects</para>

                <para>Selecting this checkbox turns on a third object tree:
                Deleted Objects. Once activated, the Deleted Objects tree acts
                like trash can (or recycle bin) for deleted objects. If you
                delete something by mistake, you can retrieve it. However,
                this function does not work for objects deleted before the
                Deleted Objects tree was activated.</para>
              </listitem>

              <listitem>
                <para>Clip comments in rules</para>

                <para>Comments in a rule can sometimes make the rule line
                taller, reducing the number of rules visible on a screen.
                Select this if you want comments to be truncated if they
                exceed normal line height.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>Data File</guimenuitem></para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Periodically save data to file every ... minute</para>

                <para>If checked, automatically saves your data every
                specified number of minutes.</para>
              </listitem>

              <listitem>
                <para>Do not ask for the log record when checking in the new
                file version</para>

                <para>Only affects RCS. If selected, the program does not
                prompt you for a "comment" when you check your file back into
                RCS.</para>
              </listitem>

              <listitem>
                <para>Enable compression of the data file</para>

                <para>If selected, your data file will be compressed to save
                disk space.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>SSH</guimenuitem></para>

            <para>These fields let the program know where your SSH and SCP
            programs (or their equivalents) live. If they are in your path,
            then you don't have to specify the complete paths to them.</para>
          </listitem>

          <listitem>
            <para><guimenuitem>Labels</guimenuitem></para>

            <anchor id="labels" />

            <para>You can assign colors to particular rows in your policies to
            make them stand out visually. You can change the text label
            associated with each color using this tab. While the color shows
            up in the ruleset, the text label only appears in the label
            list.</para>
          </listitem>

          <listitem>
            <para><guimenuitem>Icons</guimenuitem></para>

            <anchor id="icons" />

            <itemizedlist spacing="compact">
              <listitem>
                <para>Show icons in rules</para>

                <para>By default, objects such as interfaces, hosts, and
                networks show up as both an icon and text. Select this to have
                only the text appear (no icon).</para>
              </listitem>

              <listitem>
                <para>Show text descriptions in columns
                "Direction","Action"</para>

                <para>By default, the Direction and Action columns show only
                icons. Select this to have text appear as well.</para>
              </listitem>

              <listitem>
                <para>Icon size</para>

                <para>By default, icons are 25x25 pixels. Select <guilabel>16x16</guilabel> to make
                them somewhat smaller.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><guimenuitem>Fonts</guimenuitem></para>

            <anchor id="fonts" />

            <para>Use these controls to set the font used for rules and the
            font used in the object tree, respectively.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>
  </chapter>

  <!-- *************************************************************** -->

  <chapter>
    <title>Working With Objects</title>
  
    <sect1>
      <title>Common Properties of Objects</title>

      <para>All objects in Firewall Builder have some characteristics in common.</para>
      <para>
      All objects have a Name field and a Comment field. The Name field can contain white spaces
      and can be arbitrarily long (though shorter names work better in the GUI). The comment field 
      can contain any text of any length.</para>

      <para>IP address fields provide, in all objects that have them, provide validity checking when the object is saved. Invalid IP addresses produce an error.</para>
    </sect1>

    <sect1>
      <title>The Firewall Object</title>
	<para>A firewall object is designed to represent a real firewall device in your network. This firewall object will have interface and IP address objects that mirror the real interfaces and IP addresses of the actual device. In addition, the firewall object is where you create the access policy, NAT rules, and routing rules that you assign to your firewall device.</para>

	<para>To speed up the creation of a firewall object, Firewall Builder has a wizard that walks you through creating the object. The wizard has three options for creating a firewall object: </para>

            <para><itemizedlist spacing="compact">
              <listitem>
                <para>From a template: Firewall Builder comes with several pre-defined templates. You can use these to create a firewall that is close to your configuration, the modify it to fit your needs. This method is shown in the Getting Started chapter XXXXXXXXXXXX create link</para>
		</listitem>
              <listitem>
                <para>Manually: You can provide interface IP address, subnet mask, gateway, and other parameters manually.</para>
	      </listitem>
              <listitem>
                <para>Via SNMP: Firewall builder uses SNMP queries to learn about the network.</para>
	      </listitem>
	    </itemizedlist></para>
      <sect2 id="creating_firewall_manually">
        <title>Creating a Firewall Object Manually</title>

        <para>To start the firewall object creation wizard, right-click <guibutton>Firewalls</guibutton> in the User tree and select <guibutton>New Firewall</guibutton>.</para>

	<para>The first page of this wizard is displayed.</para>
        <figure float="1" id="creating-firewall1-2">
          <title>First Page of the Wizard</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="creating_firewall1.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Give the firewall object a name. Usually, this name will be the same name as the device, but it doesn't have to be if you're assigning interfaces manually. Then specify the firewall software and OS.</para>

	<para>Leave the checkbox unchecked.</para>

	<para>Click <guibutton>Next</guibutton>.</para>

        <figure float="1" id="creating-firewall_manual1">
          <title>Choose Configure Interfaces Manually</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="creating_firewall_manual1.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

	<para>Select <guibutton>Configure interfaces manually</guibutton> and click <guibutton>Next</guibutton>.</para>

        <figure float="1" id="creating-firewall_manual2">
          <title>Adding Interfaces to the new Firewall Object</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="creating_firewall_manual2.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Use this screen to add firewall interfaces. Populate the following fields for each interface, then click <guibutton>Add</guibutton> to add the interface. If you make a mistake, click on the interface, make your changes, then click <guibutton>Update</guibutton>.</para>

            <para><itemizedlist spacing="compact">
              <listitem>
                <para>Interface type: Specify whether the interface has a static IP (Regular interface), a dynamic IP, is an unnumbered interface, or a bridge port.</para>
		</listitem>
              <listitem>
                <para>Name: the name of the interface object in Firewall Builder must match exactly the name of the interface of the firewall machine it represents. This will be something like "eth0", "eth1", "en0", "br0", and so on.</para>
	      </listitem>
              <listitem>
                <para>Label: On most OS's this field is not used and serves the purpose of a descriptive label.  The label is mandatory for Cisco PIX though, where it must reflect the network topology. Firewall Builder GUI uses the label, if it is not blank, to show interfaces in the tree. One of the suggested uses for this field is to mark interfaces to reflect the network topology ('outside', 'inside') or interface purpose ('web frontend' or 'backup subnet').</para>
	      </listitem>
              <listitem>
                <para>Address: If the interface has a static IP address, specify it here.</para>
	      </listitem>
              <listitem>
                <para>Netmask: Use either traditional netmasks (255.255.255.0) or slash notation (24, without the actual slash) to specify the interface netmask, if it is a static interface.</para>
	      </listitem>
              <listitem>
                <para>MAC: If you like, you can also specify the interface MAC address. The MAC address is not necessary, but it can be used to combat spoofing. If the feature is turned on and available, the firewall will only accept packets from the given IP address if the MAC address also matches the one specified.</para>
	      </listitem>
	    </itemizedlist></para>

	<para>Once all the
        interfaces are configured, click <guibutton>Finish</guibutton> to
        create a new firewall object.</para>

        <note>
          <para>You can always add, modify and delete interfaces later using
          controls provided by the main window and the object tree
          view.</para>
        </note>
      </sect2>

      <sect2>
        <title>Editing a Firewall Object</title>

        <para>The Firewall Object represents the firewall machine and is the
        most complex object in Firewall Builder. It has three sets of controls that you can modify. All these controls become available when you double-click the firewall object in the tree.</para>

        <figure float="1" id="edit_firewall_base_controls">
          <title>Base Firewall Controls</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="edit_firewall_base_controls.png" />
            </imageobject>
          </mediaobject>
        </figure>

	<sect3>
	  <title>Base Firewall Controls</title>
	  <para>The base controls let you specify the basic settings of the firewall, such as the name and firewall platform.</para> 
        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Name: Specify/change the name of the firewall object.</para>
            </listitem>
            <listitem>
              <para>Platform: Specify/change the firewall software. XXXXX link to platform-specific information</para>
            </listitem>
            <listitem>
              <para>Version: Specify/change the version number of the firewall software.</para>
            </listitem>
            <listitem>
              <para>Host OS: Specify/change the host operating system of the firewall device.</para>
            </listitem>
            <listitem>
              <para>Inactive firewall: Check this box to make the firewall inactive. The firewall name will change to a regular font (instead of bold) to indicate that it is inactive, and the firewall will not be available for compiling or installation. Essentially, it's a way to "comment out" the firewall without deleting it.</para>
            </listitem>
            <listitem>
              <para>Host OS Settings: Opens the Advanced Settings dialog for the indicated Host OS. See XXXXX</para>
            </listitem>
            <listitem>
              <para>Firewall Settings: Opens the Advanced Settings dialog for the platform/firewall software. See XXXXX</para>
            </listitem>
	    </itemizedlist></para>
	</sect3>

	<sect3>
	  <title>Host OS Settings Dialog</title>

        <para>For explanations of the various controls, click the <guilabel>Help</guilabel> button in the dialog.</para>

        <figure float="1" id="edit_firewall_hostos_options">
          <title>Firewall Host OS Settings dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="edit_firewall_hostos_options.png" />
            </imageobject>
          </mediaobject>
        </figure>

	</sect3>
	<sect3>
	  <title>Firewall Settings dialog</title>

	<para>For explanations of the various controls, click the <guilabel>Help</guilabel> button in the dialog.</para>

        <figure float="1" id="edit_firewall_firewallsettings_compiler">
          <title>Firewall Firewall Settings dialog</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="edit_firewall_firewallsettings_compiler.png" />
            </imageobject>
          </mediaobject>
        </figure>

	</sect3>
      </sect2>
    </sect1>

    <sect1 id="host-interface">
      <title>Interfaces</title>

      <figure float="1" id="host-interface1">
        <title>Interface Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="host-interface1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Interface objects belong to firewall or host objects. Interface objects cannot exist alone.</para>

      <para>The dialog for the interface object that belongs to the firewall or host provides controls for the following
      parameters:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name: The name of the object. Usually it should be the
            real interface's name. For example, on Linux this could be 'eth0'
            or 'eth1', on FreeBSD this could be 'lnc0' or 'fxp0', on Solaris
            this could be 'hme0', on Cisco PIX it could be 'ethernet0' and so
            on.</para>
          </listitem>

          <listitem>
            <para>Label: On most OS this field is not used and serves the purpose of
            a descriptive label. Firewall Builder GUI uses a label, if it is
            not blank, to show interfaces in the tree. One of the suggested
            uses for this field is to mark interfaces to reflect the network
            topology ('outside', 'inside') or the purpose ('web frontend' or
            'backup subnet'). The label is mandatory for Cisco PIX though,
            where it must reflect the network topology.</para>
          </listitem>

          <listitem>
            <para>The "Regular Interface" Option</para>

            <para>Use this option if the interface has an IP address assigned
            to it manually. This is the default.</para>
          </listitem>

          <listitem>
            <para>The "Address is assigned dynamically" Option</para>

            <para>Use this option if the interface has a dynamic address
            (obtained by means of DHCP or PPP or another protocol); in this
            case an address is unknown at the moment when Firewall Builder
            generates the firewall policy.</para>
          </listitem>

          <listitem>
            <para>The "Unnumbered interface" Option</para>

            <para>Use this option if the interface can never have an IP
            address, such as the ethernet interface used to run PPPoE
            communication on some ADSL connections, tunnel endpoint interface,
            or an interface on a bridging firewall. See below <xref
            linkend="types-of-interfaces" /> for more detailed discussion of
            these different types of interfaces.</para>
          </listitem>

          <listitem>
            <para>"This is management interface" Checkbox</para>

            <para>Sometimes the host has several network interfaces in which
            case one of them can be marked as the 'management interface'. The
            management interface is used for all communication between
            Firewall Builder and the host. In the case of a host object this
            communication is currently limited to SNMP query to pull host
            information (standard SNMP MIB variables 'Description',
            'Location', 'Contact'), however in the future we will add
            more.</para>
          </listitem>

          <listitem>
            <para>Physical (MAC) Address</para>

            <para>This field holds the interface's MAC address.</para>
          </listitem>

          <listitem>
            <para>Comment</para>

            <para>This is a free-form text field for a comment.</para>
          </listitem>
        </itemizedlist></para>

    <sect2 id="types-of-interfaces">
      <title>Interface Types</title>

      <para>Firewall Builder recognizes three types of the interface depending
      on its IP address: <emphasis>regular</emphasis>,
      <emphasis>dynamic</emphasis> and <emphasis>unnumbered</emphasis>.
      <emphasis>Regular</emphasis> interface has an IP address assigned
      statically, that is the address does not change and Firewall Builder can
      use it in the firewall policy rules. It may need to use this address if
      the policy rule controls access to or from the firewall itself.</para>

      <para><emphasis>Dynamic</emphasis> interface has its IP address assigned
      to it dynamically by DHCP or PPP protocol. In this case the address is
      not known beforehand and can not be used in the policy rules. Some
      firewalls allow for using the interface name in the policy instead of
      its IP address; the firewall engine then picks its address either when
      the policy is activated or even at run-time. Some other firewalls
      support a special syntax for rules that are supposed to match packets
      headed to or from the firewall machine. Examples of these two cases are
      OpenBSD PF and Netfilter. PF rules can be constructed using interface
      names; PF automatically uses the current interface address when it loads
      rules into the memory. Netfilter supports special "chains" called
      "INPUT" and "OUPUT" that are guaranteed to inspect only packets headed
      for the firewall machine ("INPUT") or originated on it ("OUTPUT"). Both
      methods allow Firewall Builder to build correct firewall policy rules
      that affect the interface with a dynamic IP address, however the
      interface must be marked as such for the policy compiler to use proper
      technique depending on the target firewall platform.</para>

      <para><emphasis>Unnumbered</emphasis> interface can never have an IP
      address. Examples of such interfaces include endpoints of various
      tunnels (GRE, PPPoE, sometimes IPSEC), interfaces of a bridging firewall
      and perhaps some other cases. Firewall Builder ignores interfaces marked
      as <emphasis>Unnumbered</emphasis> and never includes them in the policy
      rules.</para>
    </sect2>
  </sect1>

    <sect1 id="address-object">
      <title>The Address Object</title>

      <figure float="1" id="address1">
        <title>The Address Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="address1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The address object describes the IP address of the interface; its
      dialog provides the following entry fields:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name</para>

            <para>This is the name of the object. It is recommended that you
            use some descriptive name because when the address object is used
            in the firewall policy, it is labeled with this name. It may be
            hard to tell one address from another if their names are
            similar.</para>
          </listitem>

          <listitem>
            <para>Address</para>

            <para>This is an IP address. The GUI widget visually separates
            octets and provides syntax control for the values entered in the
            octet fields.</para>

            <note>
              <para>A typical error is to interpret this object as an address
              of the subnet to which the interface of the host or firewall
              belongs. This object represents an address of the interface, not
              a network address.</para>
            </note>
          </listitem>

          <listitem>
            <para>Netmask</para>

            <para>This is a netmask assigned to the interface.</para>
          </listitem>

          <listitem>
            <para>Comment</para>

            <para>This is free-form text field for a comment.</para>
          </listitem>
        </itemizedlist></para>

    </sect1>

    <sect1>
      <title>The Physical Address Object</title>

      <figure float="1" id="physAddress1">
        <title>The Physical Address Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="physaddress1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>the Physical Address object describes the hardware or media
      address. For example for Ethernet this would be a MAC address of the
      interface.</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name</para>

            <para>This is the name of the object. It is recommended that you
            use some descriptive name because when the address object is used
            in the firewall policy, it is labeled with this name. It may be
            hard to tell one address from another if their names are
            similar.</para>
          </listitem>

          <listitem>
            <para>Address</para>

            <para>This is a string representation of the physical or media
            address. For many types of media, this will be in a binary
            representation. For example, an ethernet address would be
            represented as a string of 6 octets.</para>
          </listitem>

          <listitem>
            <para>Comment</para>

            <para>This is free-form text field for a comment.</para>
          </listitem>
        </itemizedlist></para>

      <sect2 id="using-mac-address">
        <title>Using The Physical Address Object in the Policy</title>

        <para>Only few firewall platforms really support physical address
        filtering. Currently netfilter is the only firewall platform that can
        do it and is supported by Firewall Builder.</para>

        <para>As described in <xref linkend="multiple-addresses" />, if the
        Interface object that has multiple Address and Physical Address child
        objects is used in the policy or the NAT rule element (either
        <emphasis>Source</emphasis> or <emphasis>Destination</emphasis>), then
        the policy compiler tries to generate a rule using all of them. <xref
        linkend="multiple-addresses" /> explains that compiler actually does
        this by generating multiple rules using each address in turn. This
        roughly corresponds to using logical operation "OR" on these
        addresses: if our interface had two addresses
        <emphasis>Address1</emphasis> and <emphasis>Address2</emphasis>, then
        the generated rule would match if address in the packet is either
        <emphasis>Address1</emphasis> OR <emphasis>Address2</emphasis>. The
        case of a Physical Address is different though. If the Interface has a
        physical address, then compiler tries to build a set of rules that
        matches on combination of each IP address and its MAC address. The
        reason for this change is as follows:</para>

        <para>Suppose we have a very important host on the network. We create
        a Host object, then add an interface to it. The interface should have
        both Address and Physical Address objects as shown on <xref
        linkend="host-with-addr-and-physaddr" /></para>

        <figure float="1" id="host-with-addr-and-physaddr">
          <title>The Host object with Address and Physical Address</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="using-physaddress-1.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Because this is a very important host, we would like to be sure
        that packets whose source IP is that of this host are really coming
        from it and are not spoofed. The best way to achieve this goal is to
        use strong authentication, for example with IPSEC protocol. Using
        IPSEC is outside the scope of this document though; our goal right now
        is to show that inspecting MAC address of the packet can improve
        security.</para>

        <para>Both the real packet originated from this host and a spoofed
        packet have a source IP address of the interface of this host, but a
        source MAC address is going to be different if spoofing is going on.
        We can use this to catch and drop spoofed packets. Here are three
        possible ways to build security policy in this situation:</para>

        <para><itemizedlist>
            <listitem>
              <para>Using only Address object in the rule element. This means
              the firewall inspects only IP address and ignores the MAC
              address of the packets.</para>

              <figure float="1" id="only-addr">
                <title>Policy rule using only Address object</title>

                <mediaobject>
                  <imageobject>
                    <imagedata align="left"
                               fileref="using-physaddress-4.jpg" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>

            <listitem>
              <para>Using only Physical Address object. A rule built this way
              permits all kinds of traffic coming from the trusted host even
              if its IP address changes.</para>

              <figure float="1" id="only-phaddr">
                <title>Policy rule using only Physical Address object</title>

                <mediaobject>
                  <imageobject>
                    <imagedata align="left"
                               fileref="using-physaddress-5.jpg" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>

            <listitem>
              <para>Using Host or Interface object. This way we end up with a
              rule that matches on a <emphasis>combination</emphasis> of the
              IP address and MAC address. This may be used as a sophisticated
              anti-spoofing rule.</para>

              <figure float="1" id="using-host">
                <title>Policy rule using Host object</title>

                <mediaobject>
                  <imageobject>
                    <imagedata align="left"
                               fileref="using-physaddress-6.jpg" />
                  </imageobject>
                </mediaobject>
              </figure>

              <figure float="1" id="using-interface">
                <title>Policy rule using Interface object</title>

                <mediaobject>
                  <imageobject>
                    <imagedata align="left"
                               fileref="using-physaddress-3.jpg" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist></para>

        <para>Using Address and Physical Address objects in a rule is not the
        same as using a Host or Interface object to which these Address and
        Physical Address belong. As described in <xref
        linkend="multiple-addresses" />, using an object with multiple
        addresses or multiple objects in the rule element is like bundling
        them together using logical operation <emphasis>OR</emphasis>. If we
        were to put Address and Physical Address in the rule like in <xref
        linkend="addr-and-phaddr" />, we would end up with policy matching
        packets that have the source address 10.1.1.1 or MAC address
        00:08:C7:29:D1:AC, but not necessarily both at the same time. Any host
        that manages to pretend to have the IP address 10.1.1.1 would be able
        to send packets through our firewall even if its MAC address is
        different. To achieve our goal and make sure packets with the source
        IP 10.1.1.1 really belong to our important host, we should be checking
        its IP address and MAC address at the same time and let a packet
        through only if its IP address <emphasis>AND</emphasis> MAC address
        are what we expect them to be. That is why Firewall Builder treats
        physical addresses differently and generates firewall code that
        inspects both IP address and physical address.</para>

        <figure float="1" id="addr-and-phaddr">
          <title>Policy rule using Address and Physical Address
          objects</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="using-physaddress-7.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Firewall Builder generates firewall code to inspect MAC address
        only for Host objects with the option "MAC address filtering" turned
        on. If this option is off, the Physical Address object will be ignored
        even if it is present in the Host object's Interface. This is because
        Host objects created using the Network Discovery Druid ( <xref
        linkend="network-discovery" /> ) are often populated with both IP
        address and MAC address information which is available through SNMP
        query, but inspection of MAC addresses is rarely needed. The
        administrator can use the "MAC address filtering" option in the Host
        object to specify what Hosts he wants MAC addresses to be checked
        for.</para>
      </sect2>
    </sect1>

    <sect1>
      <title>The Host Object</title>

      <para>The host object in Firewall Builder is designed to represent real
      hosts in the network: workstations, servers, and any other network node
      with an address. Just like real hosts, the host objects have interfaces,
      representing different physical connections to the network. Most
      Internet hosts will have just a single (visible) interface with a single
      IP address, in that case the actual interface and its name do not
      matter. For most foreign hosts, fwbuilder will assign an arbitrary name
      <quote>interface1</quote> to the hosts interface. By using a tree-like
      hierarchy of hosts -&gt; interfaces -&gt; addresses it is possible
      however to specify the exact address and/or interface of a host in the
      case when it does matter. Both interfaces and addresses are represented
      by objects, which are organized in a tree. Interface objects sit in the
      tree directly under the host, and the address objects are located under
      their interfaces. The interface object can have either one or multiple
      addresses. Examples of hosts with one interface with multiple addresses
      are shown in <xref linkend="host-in-tree" />. Host <quote>test
      server</quote> is located on the LAN and has three virtual IP addresses
      that all belong to the same interface <quote>eth0</quote>.</para>

      <para>Note that in Firewall Builder, the host object is an abstraction. It does not have to conform to an individual host. This host object may in fact represent a web farm that
      accepts connections on three IP addresses, each on a different computer.
      </para>

      <figure float="1" id="host-in-tree">
        <title>A Host Object With One Interface And Multiple Virtual
        Addresses</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="host_in_tree.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>The host object cannot have any access, NAT or routing policy associated with it; only firewall objects
        can have policies.</para>
      </note>
    </sect1>

    <sect1>
      <title>Creating a Host Object</title>

      <figure float="1" id="creating-host1">
        <title>First Page of the Wizard</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="creating_host1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To speed up the process and make it simpler, creating a new host
      object is aided by the wizard which collects all data needed for both the
      host and its interfaces and then creates the object. The screenshot
      (<xref linkend="creating-host1" />) represents the first page of the
      wizard.</para>

      <para>Enter the host name. Generally, this name
      does not have to be the same as the real host's name. However, if you are going to use SNMP to populate the host's interfaces (link XXXXXXXXX), or if you are going to use DNS to look up interface IP addresses (link XXXXX), the name does have to match.</para>

      <para>If the new host
      object has a single interface (this, perhaps, is the most common case)
      then you just need to fill the entry field for its address and maybe MAC
      address and click <guibutton>"Next"</guibutton>. If the object's name is
      the same as the real host name, then you can use the <guibutton>"DNS
      Lookup"</guibutton> button to get the address from DNS.</para>

      <para>In case the new host object should have multiple interfaces, you
      need to check the option at the bottom of the dialog and then switch to
      the next page of the wizard using the <guibutton>"Next"</guibutton>
      button. The next page is represented in the screenshot (<xref
      linkend="creating-host2" />.)</para>

      <figure float="1" id="creating-host2">
        <title>Adding Interfaces to the New Host Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="creating_host2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Here you can add interfaces to the new host object. Enter the
      interface name, address, and netmask in the appropriate fields, then
      click <guibutton>"Add"</guibutton> to add it to the list. The
      <guibutton>"Update"</guibutton> button updates information for the
      interface that is selected in the list, and the
      <guibutton>"Delete"</guibutton> button deletes the currently selected
      interface.</para>

      <note>
        <para>You can always add, modify and remove interfaces of the new host
        object later using controls provided by the main window and the object
        tree view.</para>
      </note>
    </sect1>

    <sect1>
      <title>Editing a Host Object</title>

      <para>The Host object dialog is split into two tabs: "General" (<xref
      linkend="host-dialog1" />) and "Sysinfo" (<xref
      linkend="host-dialog2" />).</para>

      <figure float="1" id="host-dialog1">
        <title>Editing The Host Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="host_dialog1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The "General" tab provides GUI controls for the following
      parameters:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>The Host object name.</para>
          </listitem>

          <listitem>
            <para>MAC address filtering:</para>

            <para>If this option is activated, the policy compiler uses the
            MAC addresses of all interfaces of this host in the firewall
            rules. Not all firewall platforms support MAC address filtering,
            so this option may have no effect on the generated firewall
            script. This is treated as a non-critical situation, and the
            policy compiler will only generate a warning while processing a
            firewall policy where such a host is used. See below <xref
            linkend="using-mac-address" />.</para>
          </listitem>

          <listitem>
            <para>SNMP communities:</para>

            <para>The SNMP 'read' community is used if the host runs SNMP
            agent and you pull the host's "sysinfo" variables via SNMP query.
            The SNMP 'write' community is currently not used but we may add
            features using it in the future. SNMP communities usually can not
            contain spaces. If your host does not run SNMP agent, or if you do
            not need to pull the host info using SNMP, then SNMP community
            strings may be left blank.</para>
          </listitem>

          <listitem>
            <para>Comment:</para>

            <para>This is a free-form text field which can be used to add
            comments.</para>
          </listitem>
        </itemizedlist></para>

      <figure float="1" id="host-dialog2">
        <title>Host Object System Information</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="host_dialog2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The "Sysinfo" tab holds data retrieved from the host via SNMP
      query. There, you can see the strings that the host returned for
      standard SNMP MIB "Description", "Location" and "Contact" variables.
      These fields are read-only in the GUI.</para>
    </sect1>

    <sect1>
      <title>The Network Object</title>

      <figure float="1" id="network-dialog1">
        <title>The Network Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="network_dialog1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The network object describes the IP network or a subnet; its
      dialog provides the following entry fields:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>Network object name</para>
          </listitem>

          <listitem>
            <para>'DNS Lookup' button:</para>

            <para>Clicking on this button runs a DNS query for an "A" RR using
            the name entered in the "Name" field</para>
          </listitem>

          <listitem>
            <para>Address:</para>

            <para>This is an address of the network</para>
          </listitem>

          <listitem>
            <para>Netmask:</para>

            <para>The netmask, in combination with an Address, defines the
            subnet.</para>
          </listitem>

          <listitem>
            <para>Comment:</para>

            <para>This is a free-form text field used for comments</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>The Address Range Object</title>

      <figure float="1" id="address-range-dialog1">
        <title>The Address Range Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="address_range_dialog1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Address Range object describes a continuous range of IP
      addresses; its dialog provides the following entry fields:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>The name of the Address Range object</para>
          </listitem>

          <listitem>
            <para>Range start:</para>

            <para>The address of the start of the range</para>
          </listitem>

          <listitem>
            <para>Range end:</para>

            <para>The address of the end of the range</para>
          </listitem>

          <listitem>
            <para>Comment:</para>

            <para>A free-form text field used for comments</para>
          </listitem>
        </itemizedlist></para>

      <para>The Address range is inclusive, that is, both the start and the
      end addresses are included in the range.</para>
    </sect1>

    <sect1>
      <title>A Group of Objects</title>

      <figure float="1" id="group-dialog1">
        <title>Group of Objects</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="group_dialog1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The group of objects holds references to Hosts, Networks, Address
      Ranges, Firewalls and other groups of objects (<xref
      linkend="group-dialog1" />). Objects can be added to the group using the
      following methods:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Using drag and drop:</para>

            <para>Objects can be dragged from the tree into the group dialog.
            The tree switches to the object in a single click, however
            pointing a mouse cursor at the object and then pressing the button
            does not switch, but rather allows to start a drag and drop
            operation.</para>
          </listitem>

          <listitem>
            <para>Using the popup menu:</para>

            <para>You can use the "Copy"/"Paste" operations between the tree
            and group dialog. Right mouse clicking on the object in the tree
            brings a pop-up menu. Choose the "Copy" or "Cut" item in this
            menu, then switch to the group dialog and right mouse click in the
            icon field. This also brings up a pop-up menu, where you choose
            the "Paste" item. This inserts a reference to the object in the
            group.</para>
          </listitem>

          <listitem>
            <para>Using the "Edit" main menu:</para>

            <para>Just like in the case of a pop-up menu, select the object in
            the tree, use the
            <guimenuitem>"Edit"</guimenuitem>/<guimenuitem>"Copy
            Object"</guimenuitem> main menu, then switch to the group dialog
            and use the <guimenuitem>"Edit"</guimenuitem>/<guimenuitem>"Paste
            Object"</guimenuitem> main menu</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="firewall-interface">
      <title>The Firewall's Interface</title>

      <figure float="1" id="firewall-interface1">
        <title>The Interface Object belonging to a firewall</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="firewall_interface1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The dialogue for the interface object that belongs to a firewall
      is similar to that for the Host's interface (<xref
      linkend="host-interface" />) but has a few extra controls.</para>

      <para>The interface of the Firewall and Host objects has the same types
      described in <xref linkend="types-of-interfaces" /></para>

      <para>Unlike interface of the Host object, interface of the Firewall has
      a parameter <emphasis>"Security Level"</emphasis>. Depending on the
      firewall platform, the security level may either have two values
      <emphasis>"External"/"Internal"</emphasis> or a numeric value between 0
      and 100, with 0 being least secure and 100 being most secure levels. The
      GUI dialogue adjusts automatically and shows appropriate controls
      depending on the choice of the firewall platform in the interface's
      parent firewall object.</para>

      <para><xref linkend="firewall-interface1" /> shows a screenshot of the
      dialogue for the interface object that belongs to an iptables firewall
      object named "firewall-iptables". <xref linkend="firewall-interface2" />
      shows a screenshot of the dialogue for the interface object that belongs
      to a Cisco PIX firewall object named "firewall-pix".</para>

      <figure float="1" id="firewall-interface2">
        <title>An Interface with a numeric Security Level</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="firewall_interface2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <sect2 id="network-zone">
        <title>The Network Zone</title>

        <para>One of the platform-specific parameters of the interface is a
        reference to the Network Zone. Currently only a Cisco PIX firewall
        requires the Network Zone. The interface dialogue shows controls for
        the Network Zone in a separate tab (<xref
        linkend="firewall-interface3" />), which appears only if the parent
        firewall object specifies the firewall platform which requires it. The
        GUI dynamically generates a pull-down menu with all available network
        and group objects and puts it in the Network Zone dialog. You need to
        choose one object in the menu. Usually the external interface (the one
        which connects your firewall to the Internet) has the Network Zone set
        to <emphasis>"Any"</emphasis>. It is also recommended to create a
        group of objects to represent Network Zones of all other interfaces of
        the firewall.</para>

        <figure float="1" id="firewall-interface3">
          <title>The Network Zone dialogue</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="firewall_interface3.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Consider the network layout as in <xref
        linkend="network-zones" />. Here the firewall has three interfaces:
        'outside', 'dmz', and 'inside'. Behind the firewall there is a router
        which in turn is connected to three subnets 'subnet A', 'subnet B',
        and 'subnet C'. Subnet A is shared between the router and the firewall
        (each device has an interface on this subnet). Let's also suppose that
        we have created Network Objects for each subnet and called them
        'subnet DMZ', 'subnet A', 'subnet B' and 'subnet C' (remember, spaces
        are allowed in object names). For this setup, network zones should be
        configured as follows:</para>

        <para><informaltable frame="none">
            <tgroup cols="2">
              <colspec align="center" colwidth="64pt" />

              <colspec align="center" colwidth="150pt" />

              <thead>
                <row>
                  <entry>Interface</entry>

                  <entry>Network Zone</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry><filename>outside</filename></entry>

                  <entry><emphasis>ANY</emphasis></entry>
                </row>

                <row>
                  <entry><filename>dmz</filename></entry>

                  <entry><emphasis>subnet DMZ</emphasis></entry>
                </row>

                <row>
                  <entry><filename>inside</filename></entry>

                  <entry><emphasis>subnet A,</emphasis> <emphasis>subnet
                  B,</emphasis> <emphasis>subnet C</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para>Since the network zone for the <emphasis>'inside'</emphasis>
        interface consists of multiple objects, a group must be created so
        that you could use this group as a Network Zone object.</para>

        <figure float="1" id="network-zones">
          <title>Choosing Network Zones</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="fwbuilder-using-netzone1.jpg" />
            </imageobject>
          </mediaobject>
        </figure>

        <para><xref linkend="platform-specific-interface-parameters" />
        explains the differences in the way firewall platforms interpret
        values in the Security Level and Network Zone parameters of the
        firewall interfaces.</para>

        <table id="platform-specific-interface-parameters" pgwide="0">
          <title></title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry><para>Firewall Platform</para></entry>

                <entry><para>Security Level Values</para></entry>

                <entry><para>Network Zone</para></entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><para>iptables</para></entry>

                <entry><para>two values: 'External' or
                'Internal'</para></entry>

                <entry><para>N/A</para></entry>
              </row>

              <row>
                <entry><para>ipfilter</para></entry>

                <entry><para>two values: 'External' or
                'Internal'</para></entry>

                <entry><para>N/A</para></entry>
              </row>

              <row>
                <entry><para>pf</para></entry>

                <entry><para>two values: 'External' or
                'Internal'</para></entry>

                <entry><para>N/A</para></entry>
              </row>

              <row>
                <entry><para>Cisco PIX</para></entry>

                <entry><para>numeric, 0 - 100</para></entry>

                <entry><para>a reference to a group or network
                object</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>
  </chapter>

  <!-- ***************************************************************
  -->

  <chapter id="network-discovery">
    <title>Network Discovery: A Quick Way to Create Objects</title>

    <figure float="1" id="discovery-menu">
      <title>Calling the Object Discovery Druid</title>

      <mediaobject>
        <imageobject>
          <imagedata align="left" fileref="discovery_menu.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>One of the distinguishing features that Firewall Builder provides is
    support for automated object creation. This helps populate the objects
    tree for large networks with lots of hosts and subnets. It would have
    taken hours if the user always had to do it manually, while the Objects
    Discovery Druid helps complete this task in minutes. You can bring this
    Druid up using the
    <guimenuitem>"Tools"</guimenuitem>/<guimenuitem>"Discover
    Objects"</guimenuitem> main menu</para>

    <para>The Druid supports three main methods for automated object
    creation:</para>

    <para><itemizedlist spacing="compact">
        <listitem>
          <para>Reading file /etc/hosts</para>
        </listitem>

        <listitem>
          <para>Import of DNS zone</para>
        </listitem>

        <listitem>
          <para>Network discovery using SNMP queries</para>
        </listitem>
      </itemizedlist></para>

    <para>You choose the method on the first page of the Druid ( <xref
    linkend="discovery-page1" />. )</para>

    <figure float="1" id="discovery-page1">
      <title>Calling The Object Discovery Druid</title>

      <mediaobject>
        <imageobject>
          <imagedata align="left" fileref="discovery_page1.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Just check the radio-button next to the method you want to use and
    click the <guibutton>'Next'</guibutton> button.</para>

    <sect1>
      <title>Reading the /etc/hosts file</title>

      <para>This method imports the host records present in the standard
      <emphasis>/etc/hosts</emphasis> file or any other file that contain
      records in the following format (this format is actually described in
      the manual page hosts(5)).</para>

      <para>IP_Address host_name</para>

      <para>The IP address must be separated from the host name with any
      number of spaces or tab symbols. Lines starting with '#' are considered
      comments and are ignored.</para>

      <para>When you choose the import from /etc/hosts on the first page, the
      Druid asks you for the file path and name on the next page. Once that
      information is entered, it reads the contents of that file and presents
      a table of new objects (<xref linkend="discovery-hosts-2" />):</para>

      <figure float="1" id="discovery-hosts-2">
        <title>Creating objects using gathered information</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_hosts_2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>This page of the druid is the same for all discovery methods, so
      let's discuss it in detail.</para>

      <para>Discovered objects are shown in the table. Since the source of
      information used for discovery could have had different host names for
      the same IP address, object names are shown in a pull-down menu. If
      there was only one name for the address, then the pull-down menu would
      have only one entry, otherwise it has several entries. The rightmost
      column in the table shows choices for the object type to be created: it
      can become either Host, Network, or Firewall. Sometimes, the Druid can
      guess the type of the object or use the proper type depending on the
      discovery method used.</para>

      <para>The Druid creates objects only for selected records in the table.
      Use the checkbox in the very first column of the table to select
      objects. The comment to the right shows the total number of selected
      objects at any given moment (text "Selected: N objects"). 6 objects are
      selected in the screenshot (<xref linkend="discovery-hosts-2" />)</para>

      <para>This page of the Druid also has the following buttons:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para><guibutton>"Select All"</guibutton></para>

            <para>Selects all records in the table</para>
          </listitem>

          <listitem>
            <para><guibutton>"Unselect All"</guibutton></para>

            <para>Deselects all records in the table</para>
          </listitem>

          <listitem>
            <para><guibutton>"Filter"</guibutton></para>

            <para>Brings up a filter dialog. Filtering helps manage long lists
            of objects.</para>
          </listitem>

          <listitem>
            <para><guibutton>"Remove Filter"</guibutton></para>

            <para>Removes the currently applied filter and shows all records
            in the table</para>
          </listitem>
        </itemizedlist></para>

      <figure float="1" id="discovery-hosts-filter">
        <title>Filter Dialog</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_hosts_filter.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Druid can filter records in the table either by their address,
      by their name, or by both. To filter by address enter part of it in the
      "Address" field. The program compares the text entered in the filter
      dialog with an address in the table and shows only those records whose
      address starts with the text of the filter. For example, to only filter
      out hosts with addresses on the net 10.3.14.0 we could use the filter
      "10.3.14". Likewise, to remove hosts "bear" and "beaver" (addresses
      10.3.14.50 and 10.3.14.74) we could use the filter "10.3.14.6". Note
      that the filter string does not contain any wildcard symbols like "*".
      The filter shows only records that have addresses which literally match
      the filter string.</para>

      <para>Filtering by the object name uses the POSIX regular expressions
      syntax described in the manual page regex(7). For example, to find all
      records whose names start with 'f' we could use the regular expression
      '^f'. The '^' symbol matches the beginning of the string, so this
      regular expression matches any name that starts with 'f'. To find all
      names that end with 'somedomain.com', we could use the regular
      expression '.*somedomain.com$'</para>
    </sect1>

    <sect1>
      <title>Network Discovery</title>

      <figure float="1" id="discovery-snmp-seed">
        <title>Initial Parameters for the Network Discovery program</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_snmp_seed.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Network discovery program (sometimes referred to as the
      "Network Crawler") needs a host to start from. This host is called the
      "seed host"; you enter it in the first page of the Druid (<xref
      linkend="discovery-snmp-seed" />). The crawler implements the following
      algorithm (this is a somewhat simplified explanation):</para>

      <para>First, it runs several SNMP queries against the seed host trying
      to collect the following data: the list of its interfaces and its ARP
      and routing tables. This host is then added to the table of discovered
      network objects, together with its interfaces, their addresses and
      netmasks and the host's "sysinfo" parameters. Then the crawler analyses
      the routing table of that host; this allows it to discover the networks
      and subnets which in turn are also added to the list of discovered
      objects. Then it analyses the ARP table, which holds MAC and IP
      addresses of neighboring hosts. It takes one host found in this table at
      a time and repeats the same algorithm using it as a seed host. When it
      pulls an ARP table from the next host, it discards entries that describe
      objects it already knows about. However if it finds new entries, it
      tries them as well and thus travels further down the network. Eventually
      it will visit every host on all subnets on the network.</para>

      <para>This algorithm relies on hosts answering to the SNMP queries. If
      the very first host (the "seed" host) does not run SNMP agent, the
      crawler will stop on the first run of its algorithm and won't find
      anything. Therefore it is important to use a host which does run SNMP
      agent as a "seed" host. Even if most of the hosts on the network do not
      run SNMP agents, but a few do, the crawler will most likely find all of
      them. This happens because it discovers objects when it reads the ARP
      tables from the host which answers; so even if discovered hosts do not
      answer to SNMP queries, the crawler already found them anyway.</para>

      <para>One of the ways to limit the scope of the network that the crawler
      will visit is to use the "Confine scan to the network" parameter. You
      need to enter both a network address and a netmask; the crawler will
      then check if the hosts it discovers belong to this network and if they
      do not, discard them.</para>

      <figure float="1" id="discovery-snmp-options">
        <title>Parameters for Network Discovery: Page 1</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_snmp_options.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure float="1" id="discovery-snmp-options2">
        <title>Parameters for Network Discovery: Page 2</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_snmp_options2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>There are a few settings that affect the crawler's algorithm (see
      <xref linkend="discovery-snmp-options" /> and <xref
      linkend="discovery-snmp-options2" />). Here is the list:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Run network scan recursively</para>

            <para>As was described above, the crawler starts with the "seed"
            host and then repeats its algorithm using every discovered host as
            a new "seed". If this option is turned OFF, then the crawler runs
            its algorithm only once and stops.</para>
          </listitem>

          <listitem>
            <para>Follow point-to-point links</para>

            <para>If a firewall or a router has a point-to-point interface
            (for example, PPP interface), then the crawler can automatically
            calculate the IP address of the other side of this interface. It
            then continues the discovery process by querying a router on the
            other side. Very often, the point-to-point link connects the
            organization's network to an ISP and you are not really interested
            in collecting data about your ISP network. By default crawler
            won't cross point-to-point links, but this option, if activated,
            permits it.</para>
          </listitem>

          <listitem>
            <para>Include virtual addresses</para>

            <para>Sometimes servers or routers have more than one IP address
            assigned to the same interface. If this option is turned on, the
            crawler "discovers" these virtual addresses and tries to create
            objects for them.</para>
          </listitem>

          <listitem>
            <para>Run reverse name lookup queries to determine host
            names</para>

            <para>If the host discovered by the crawler answers to SNMP
            queries, it will report its name, which the crawler will use to
            create an object in Firewall Builder. However, if the host does
            not answer the query, the crawler can not determine its name and
            only knows its IP address. The crawler can use DNS to back-resolve
            such addresses and determine host names if this option is turned
            ON.</para>
          </listitem>

          <listitem>
            <para>SNMP query parameters</para>

            <para>You must specify the SNMP "read" community string which will
            be used for SNMP queries. You can also specify the number of
            retries and a timeout for the query.</para>
          </listitem>

          <listitem>
            <para>DNS parameters:</para>

            <para>You can specify the number of retries and a timeout for the
            DNS lookup query, as well as the number of threads. Firewall
            Builder uses a multi-threaded resolver in order to speed up the
            process. In other words, it can run several DNS lookups
            simultaneously. The "Number of threads" parameter defines how many
            lookups it can run in parallel.</para>
          </listitem>
        </itemizedlist></para>

      <para>Once all parameters are entered, the crawler actually gets to
      work, which may take a while. Depending on the size of the network and
      such parameters as the SNMP timeout value, scanning may take minutes or
      even hours. The progress of the scanner can be monitored on the page in
      the Druid (<xref linkend="discovery-snmp-crawler" />). You can always
      stop the crawler using the <guibutton>"Stop network scan"</guibutton>
      button. Data does not get lost if you do this as the Druid will use
      whatever objects the crawler discovered before you stopped it.</para>

      <figure float="1" id="discovery-snmp-crawler">
        <title>Parameters for Network Discovery: Page 2</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="discovery_snmp_crawler.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The <guibutton>"Save scan log to file"</guibutton> button saves
      the content of the progress window to a text file and is mostly used for
      troubleshooting and bug reports related to the crawler.</para>

      <para>If the crawler succeeded and was able to collect information it
      needed to create objects, you can switch to the next page where you
      choose and create objects. That page is the same as the one shown in
      <xref linkend="discovery-hosts-2" />.</para>
    </sect1>
  </chapter>

  <!-- *************************************************************** -->

  <chapter>
    <title>Working With Services</title>

      <para>In Firewall Builder, service objects represent IP, ICMP, TCP, and UDP services such as "host unreachable" in ICMP, HTTP in TCP, GRE in IP, and DNS in UDP. Firewall Builder provides service objects for hundred of well-known and frequently used services in ICMP (IP protocol number 1), TCP (IP protocol number 6), and UDP (IP
      protocol number 17). </para> 

    <sect1>
      <title>IP Service</title>

      <para>The IP service object describes 
      protocols that are not ICMP, TCP, or UDP. (ICMP, TCP, and UDP have their own service objects.) An IP protocol is
      defined by the 8-bit field in the IP packet header. The screenshot
      (<xref linkend="ip-service-dialog2" />) represents the
      <emphasis>ESP</emphasis> object (Encapsulating Security Payload, part
      of the IPSEC protocol family) which uses the IP protocol number 50.</para>
      
      <note>
	<para>Protocol numbers are assigned by IANA; one can look up the number for a
      particular protocol at the following URL:
      http://www.iana.org/assignments/protocol-numbers/</para>
      </note>

      <para>Besides the protocol number, the header of the IP packet also has
      a field called "options" which is a variable-length list of optional
      information for the packet. Not all firewalls can examine options, and
      those that can usually have certain limitations as to what options they
      can match against. Firewall Builder tries to provide controls for many
      popular options supported by the most sophisticated firewalls. Not all
      options supported by Firewall Builder are supported by all target
      firewall platforms (<xref linkend="support-for-ip-options" />).</para>

      <para>Firewall Builder supports the following options:</para>

      <informaltable frame="none">
        <tgroup cols="2">
          <colspec align="left" colwidth="150pt" />

          <tbody>
            <row>
              <entry><filename>Source route options: LSRR,
              SSRR</filename></entry>

              <entry>Normally IP routing is dynamic with each router making
              decisions about which next hop router to send the packet to.
              However, another option exists where the sender can choose the
              route. In the case of the Loose Source Route, the sender (host)
              can specify a list of routers the packet must traverse, but it
              may also pass through other routers between any two addresses in
              the list. The Strict Source Route works very much the same way,
              except the packet must traverse only through the specified
              addresses. Source routing can potentially be used to reach hosts
              behind the firewall even if these hosts use private IP addresses
              which normally are not reachable over the Internet.</entry>
            </row>

            <row>
              <entry><filename>Record route option: RR</filename></entry>

              <entry>This option causes every router that handles the packet
              on the way to add its IP address to a list in the options field.
              This option is used by the ping utility when it is called with
              the "-R" command line switch; it can potentially be exploited to
              discover the internal network addressing and layout behind the
              firewall. Although the risk is low, some firewall administrators
              prefer to block packets with this option set.</entry>
            </row>

            <row>
              <entry><filename>Timestamp option:</filename></entry>

              <entry>This option tells routers that handle the packet to
              record their timestamps and sometimes addresses (like in the
              case of the record route option). This option is seldom used,
              but can potentially be exploited to gather information about the
              protected network, so some firewall administrators prefer to
              block packets with this option set.</entry>
            </row>

            <row>
              <entry><filename>Fragment options:</filename></entry>

              <entry>IP packets may sometimes become fragmented. This happens if the
      original datagram is larger than what a physical network layer can
      transmit. The IP packet header has special fields (called "Flags" and
      "Fragmentation Offset") that detect fragmented packets and help
      reassemble them. Many firewalls can check these bits as well. Certain
      combinations of flags and fragmentation offsets can never happen during
      a normal operation but were seen to be used by attackers. Firewall
      Builder provides two options for most commonly used cases related to
      packet fragmentation: the 'all fragments' option matches the second and
      further fragments, while the 'short' option is used to match packets
      that are too short to contain even a complete IP header.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Standard IP Service objects that come with Firewall Builder appear
      in the <guilabel>Standard</guilabel> tree, in the <guimenuitem>Services/IP</guimenuitem>
      branch.</para>

      <para>You can create your own IP Service objects in the <guilabel>User</guilabel> library.</para>

      <table id="support-for-ip-options">
        <title>Support for IP options and fragmentation on various firewall
        platforms</title>

        <tgroup cols="7">
          <colspec align="center" />

          <colspec align="center" colwidth="64pt" />

          <colspec align="center" colwidth="64pt" />

          <colspec align="center" colwidth="64pt" />

          <colspec align="center" />

          <colspec align="center" />

          <colspec align="center" />

          <thead>
            <row>
              <entry>Firewall</entry>

              <entry>lsrr</entry>

              <entry>ssrr</entry>

              <entry>rr</entry>

              <entry>timestamp</entry>

              <entry>all fragments</entry>

              <entry>'short' packets</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>iptables</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>-</entry>
            </row>

            <row>
              <entry>ipfilter</entry>

              <entry>-</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>

              <entry>+</entry>
            </row>

            <row>
              <entry>pf</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>+</entry>

              <entry>-</entry>
            </row>

            <row>
              <entry>Cisco PIX</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>

              <entry>-</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <figure float="1" id="ip-service-dialog2">
        <title>Creating/Editing an IP Service Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="ip_service_dialog2.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Service objects in the <guilabel>Standard</guilabel> are not editable. However, you can copy-and-paste a copy of a service object into the <guilabel>User</guilabel> tree and edit it there, or you can right-click the <guilabel>IP</guilabel> folder in the <guilabel>User</guilabel> tree and select <guimenuitem>New IP Service</guimenuitem> to create a service object from scratch.</para>

      <para>In either case, the controls are the same.</para>

      <para>The IP Service dialog provides the following controls:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>This is the name of the object</para>
          </listitem>

          <listitem>
            <para>Protocol:</para>

            <para>This is the protocol number.</para>
          </listitem>

          <listitem>
            <para>DiffServ</para>

            <para>You can specify DSCP or TOS using the radio buttons. In either case, specify a code (or class) in the field. If you do not specify a code or class, Firewall Builder ignores the DiffServ type (DSCP or TOS).</para>
          </listitem>

          <listitem>
            <para>Options:</para>

            <para>These flags represent 'Options' flags in the IP
            header:</para>

            <para><simplelist>
                <member>lsrr (loose source route)</member>

                <member>ssrr (strict source route)</member>

                <member>rr (record route)</member>

                <member>timestamp</member>

                <member>all fragments</member>

                <member>short fragments</member>
              </simplelist></para>
          </listitem>

          <listitem>
            <para>Comments:</para>

            <para>This is a free-style text field used for comments.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>ICMP Service</title>

      <para>The ICMP Service object is a generalized representation of the ICMP
      protocol. ICMP packets are often used to communicate error messages
      that are acted upon by either the IP layer or higher layer protocols
      (TCP or UDP). ICMP can also be used as a simple query protocol.</para>

      <para>Firewall Builder has service objects for both IPv4 and IPv6.</para>

      <para>As a firewall administrator, you need to understand the nature and purpose of
      ICMP in order to properly configure the firewall to block unwanted ICMP messages while 
      permitting useful ones.</para>

      <para>ICMP packets have two header fields that
      distinguish particular ICMP messages: the <emphasis>type</emphasis>
      and <emphasis>code</emphasis> fields. There are many different types and classes of ICMP messages. See 
      <ulink url="http://www.iana.org/assignments/icmp-parameters"><citetitle>http://www.iana.org/assignments/icmp-parameters</citetitle></ulink> for IPv4 types and classes and <ulink url="http://www.iana.org/assignments/icmpv6-parameters"><citetitle>http://www.iana.org/assignments/icmpv6-parameters
</citetitle></ulink> for IPv6 types and classes. The standard ICMP Service
      objects that come with Firewall Builder appear in the <guilabel>Standard</guilabel> tree,
      in the <guimenuitem>Services/ICMP</guimenuitem> branch.</para>

      <figure float="1" id="icmp-service-dialog1">
        <title>Creating/Editing the ICMP Service Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="icmp_service_dialog1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure float="1" id="icmp6-service-dialog1">
        <title>Creating/Editing the ICMP Service Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="icmp6_service_dialog1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Service objects in the <guilabel>Standard</guilabel> are not editable. However, you can copy-and-paste a copy of a service object into the <guilabel>User</guilabel> tree and edit it there, or you can right-click the <guilabel>ICMP</guilabel> folder in the <guilabel>User</guilabel> tree and select <guimenuitem>New ICMP Service</guimenuitem> to create a service object from scratch.</para>

      <para>Both IPv4 and IPv6 ICMP Service dialogs provide the following controls:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>This is the name of the object.</para>
          </listitem>

          <listitem>
            <para>ICMP Type and Code:</para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>Type:</para>

                <para>The ICMP message type. This control consists of a numeric selector that lets you specify the message type. To specify "any" type, set the control to <guilabel>any</guilabel>.</para>
              </listitem>

              <listitem>
                <para>Code:</para>

                <para>The ICMP message code. This control consists of a numeric selector that lets you specify the message code. To specify "any" code, set the control to <guilabel>any</guilabel>.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Comment:</para>

            <para>This is a free-style text field used for comments.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1 id="tcp-service">
      <title>TCP Service</title>

      <para>The TCP Service object is a generalization of the TCP protocol, which
      provides a connection-oriented reliable byte stream service. Many
      well-known, frequently used application protocols use TCP
      protocol: FTP (File Transfer Protocol), SMTP (Simple Mail Transfer
      Protocol), HTTP (Hyper Text Transfer Protocol), and so on. The TCP
      header contains special fields indicating source and destination port
      numbers that are used to identify the sending and receiving application. 
      These two values, along with the source and
      destination IP addresses in the IP header, uniquely identify each
      connection.</para>

      <para>Since port numbers are used to distinguish applications using the
      data stream provided by the TCP protocol, each application should use a
      unique port number. To ensure interoperability, these numbers must be
      assigned by a central authority in a coordinated manner. Internet
      Assigned Numbers Authority (IANA) does just that. Assigned TCP and UDP
      port numbers can be looked up at <ulink url="http://www.iana.org/assignments/port-numbers"><citetitle>http://www.iana.org/assignments/port-numbers</citetitle></ulink>. Most Unix systems also
      come with a /etc/services file that contains a list of assigned port
      numbers.</para>

      <para>Firewall Builder comes with a collection of predefined TCP Service
      objects with port numbers already configured. You can simply use these
      objects in your policy rules, so you do not have to look up port numbers
      every time you need them.</para>

      <para>The typical TCP Service object is represented in a screenshot
      (<xref linkend="tcp-service-dialog1" />.)</para>

      <figure float="1" id="tcp-service-dialog1">
        <title>Editing The TCP Service Object</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="tcp_service_dialog1.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In Firewall Builder, the TCP Service object is a generalization of
      TCP protocol. The TCP header of a packet carries only one fixed value
      for the source port and one fixed value for the destination port. The
      TCP Service object allows a range of values to be used for the source
      and destination ports. This allows a single TCP Service object to
      describe either a family of protocols using consecutive port numbers, or
      a protocol that may use variable port numbers or simply many protocols
      that use port numbers from a certain range. For example, on Unix
      systems, TCP sessions opened by a privileged process always have their
      source port number assigned from a range below 1024, while unprivileged
      processes use source port numbers from a range starting from 1024 and
      above. The TCP Service object with a source port range defined as shown
      in the screenshot (<xref linkend="tcp-service-dialog2" />) describes all
      privileged TCP sessions.</para>

      <figure float="1" id="tcp-service-dialog2">
        <title>The TCP Service Object: privileged source ports</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="tcp_service_dialog2.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Using '0' as both start and end values for a range means 'any
      value' for that range. The source port range of the 'privileged TCP'
      object starts from 0 and ends at 1023 (port ranges are inclusive in
      Firewall Builder), while its destination port range's start and end are
      both set to zero, which means 'any destination port'. This object
      describes any TCP protocol with a source port in range 0-1023 and any
      destination port.</para>

      <para>If all you need is to create an object to describe the TCP
      protocol with a particular destination port, just use the same port
      number for both the start and end of a destination port range (which
      effectively creates a range that consists of a single value). The
      example in <xref linkend="tcp-service-dialog1" /> shows such a
      service.</para>

      <para>The TCP header also contains a collection of one-bit fields, or
      flags, that carry a variety of control information. For example, the SYN
      and ACK flags are used for connection establishment and the FIN flag is
      used for connection termination. Certain combinations of flags are not
      allowed during the normal protocol operation and may cause unpredicted
      reactions in some systems; because of this, the firewall administrator
      may want to block TCP packets with unwanted combination of flags.</para>

      <para>There are six flags in the TCP header. We just briefly mention
      them here; more information can be found in <citetitle
      pubwork="book">TCP/IP Illustrated, vol 1</citetitle> by W. Richard
      Stevens, chapter 17.</para>

      <informaltable frame="none">
        <tgroup cols="2">
          <colspec align="center" colwidth="64pt" />

          <colspec align="left" />

          <tbody>
            <row>
              <entry><filename>U (URG)</filename></entry>

              <entry>The "urgent" pointer is valid</entry>
            </row>

            <row>
              <entry><filename>A (ACK)</filename></entry>

              <entry>The acknowledgment number is valid</entry>
            </row>

            <row>
              <entry><filename>P (PSH)</filename></entry>

              <entry>The receiver should pass this data to the application as
              soon as possible</entry>
            </row>

            <row>
              <entry><filename>R (RST)</filename></entry>

              <entry>Reset the connection</entry>
            </row>

            <row>
              <entry><filename>S (SYN)</filename></entry>

              <entry>Synchronize sequence numbers to initiate a
              connection.</entry>
            </row>

            <row>
              <entry><filename>F (FIN)</filename></entry>

              <entry>The sender is finished sending data.</entry>
            </row>

            <row>
              <entry><filename>Established</filename></entry>

              <entry><guilabel>Established</guilabel> is not a TCP flag. Instead, checking this box causes the firewall to match any packet in an established session. Checking this checkbox disables the other TCP flag controls.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Firewall Builder supports all six flags, although not all target
      firewall platforms can match all combinations of TCP flags or any flags
      at all (See <xref linkend="support-for-tcp-flags" />).</para>

      <table id="support-for-tcp-flags" pgwide="0">
        <title>Support for Matching against TCP flags</title>

        <tgroup cols="2">
          <colspec align="center" colwidth="64pt" />

          <colspec align="center" colwidth="200pt" />

          <thead>
            <row>
              <entry>Firewall</entry>

              <entry>Can inspect TCP header flags in the packet</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>iptables</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>ipfilter</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>pf</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>Cisco PIX</entry>

              <entry>No</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Usually the firewall can not only match a combination of flags,
      but can also examine only a given subset of TCP flags. Firewall
      Builder provides two sets of checkboxes for TCP flags and flag masks
      (see <xref linkend="tcp-service-dialog3" />). Checkboxes in the first
      row control TCP flags that we want the firewall to examine and
      checkboxes in the second row tell it whether they should be set or
      cleared. Only flags whose checkboxes in the first row are set will be
      looked at by the firewall. To reinforce this, Firewall Builder
      deactivates checkboxes in the second row for the flags that are to be
      ignored. XXXXXXXDouble-check thisXXXXXX The object in <xref linkend="tcp-service-dialog3" /> matches a
      TCP packet with any combination of port numbers, the TCP flag SYN set,
      and all other flags cleared. The firewall will examine all TCP
      flags.</para>

      <para><figure float="1" id="tcp-service-dialog3">
          <title>TCP Service Object: any TCP packet with SYN flag set and all
          other flags cleared.</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="tcp_service_dialog3.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>A Combination of flags and a mask can be used in a rule that looks
      for some flags to be set or unset and ignores other ones regardless of
      their state. For example, we can create a rule that detects a so called
      "null scan" which is done using TCP packets with all flags cleared. For
      this rule we create a TCP Service object "tcp null scan" where all flag
      masks are set but all TCP flags are cleared. This means we examine all
      flags but only match them if they are all cleared. This object is represented
      in <xref linkend="tcp-service-dialog4" />.</para>

      <para><figure float="1" id="tcp-service-dialog4">
          <title>The "null scan" TCP Service Object: the firewall examines all
          TCP flags and matches the packet if all are cleared.</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="tcp_service_dialog4.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>TCP Service dialog provides the following controls:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>This is the name of the object</para>
          </listitem>

          <listitem>
            <para>Source port range:</para>

            <para>These two controls define the start and end of the source
            port range. They accept values 0 through 65535.</para>
          </listitem>

          <listitem>
            <para>Destination port range:</para>

            <para>These two controls define the start and end of the
            destination port range. They accept values 0 through
            65535.</para>
          </listitem>

          <listitem>
            <para>TCP Flags:</para>

            <para>TCP flags and masks, see above. The <guilabel>Established</guilabel> checkbox causes the firewall to match packets in established sessions. Selecting this checkbox disables the other TCP flag controls.</para>
          </listitem>

          <listitem>
            <para>Comments:</para>

            <para>This is a free-style text field used for comments.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>UDP Service</title>

      <para>The UDP Service object is a generalization of the UDP protocol, which
      is a connectionless transport layer protocol. Many well-known
      applications use UDP as their transport, such as DNS (Domain Name
      System), DHCP (Dynamic Host Configuration Protocol), NTP (Network Time
      Protocol), and SNMP (Simple Network Management Protocol)..</para>

      <para>As in TCP, UDP uses port numbers to distinguish
      applications from one another. The UDP
      packet header carries two port numbers: the source port and the
      destination port. The UDP Service object in Firewall Builder allows for
      a definition of ranges for both the source and the destination ports.
      The meaning of values assigned to the start and end of the range is the
      same as in the TCP Service object: ranges are inclusive, that is, both
      start and end ports of the range are included. Using '0' for both the
      start and end of the range means 'any port'. These rules work for both
      the source and destination ranges. The screenshot (<xref
      linkend="udp-service-dialog1" />) shows the 'dns' UDP Service object
      that represents the Domain Name System protocol which uses destination
      port 53.</para>

      <para><figure float="1" id="udp-service-dialog1">
          <title>Editing the UDP Service Object</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="udp_service_dialog1.png" />
            </imageobject>
          </mediaobject>
        </figure></para>


      <para>Service objects in the <guilabel>Standard</guilabel> are not editable. However, you can copy-and-paste a copy of a service object into the <guilabel>User</guilabel> tree and edit it there, or you can right-click the <guilabel>ICMP</guilabel> folder in the <guilabel>User</guilabel> tree and select <guimenuitem>New ICMP Service</guimenuitem> to create a service object from scratch.</para>

      <para>The UDP Service dialog provides the following controls:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>This is the name of the object</para>
          </listitem>

          <listitem>
            <para>The Source port range:</para>

            <para>These two controls define the start and the end of the
            source port range. They accept values 0 through 65535.</para>
          </listitem>

          <listitem>
            <para>The Destination port range:</para>

            <para>These two controls define the start and the end of the
            destination port range. They accept values 0 through
            65535.</para>
          </listitem>

          <listitem>
            <para>Comments:</para>

            <para>This is a free-style text field used for comments.</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>Custom Service</title>

      <para>The Custom Service object can be used to inject arbitrary code
      into the generated firewall script. Any combination of options allowed
      in the target firewall command line language that does not fit into a
      strict model of standard service object types can be expressed using the
      Custom Service object. For example, iptables comes with a collection of
      patches called "Patch-o-matic" that adds an ability to match complex
      combinations of packet parameters or header fields that are not
      supported by a standard code. One of the patches adds the ability to
      detect a port scan condition, where an offending host tries to connect
      to a set of UDP or TCP ports on the firewall or hosts behind it, 
      trying to detect which ports are active and which are
      not. Normally, the firewall would inspect each attempt to connect to a
      port separately from others and would generate many log records, one
      per connection attempt. While this behavior is normal, the firewall
      fails to recognize a pattern in the actions of the offending host, which
      may be important in an investigation of malicious activity since port
      scanning is often a step in a preparation for a more focused
      attack.</para>

      <para>The screenshot (<xref linkend="custom-service-dialog1" />)
      represents a Custom Service object that uses the capabilities of the 'PSD'
      module from patch-o-matic. This module can match port scan attempts that
      are spread in time, and it has a few parameters you can use to fine-tune the detection
      mechanism. The 'psd' Custom Object defines the command line options
      specific for 'psd' module in the <guilabel>Code String</guilabel> field.</para>

      <note>
        <para>The code specified in the Custom Service is used literally; no
        validation is done either by Firewall Builder or the policy
        compilers.</para>
      </note>

      <para><figure float="1" id="custom-service-dialog1">
          <title>Editing the Custom Service Object</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="custom_service_dialog1.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The Custom Service dialog provides the following controls:</para>

      <para><itemizedlist spacing="compact">
          <listitem>
            <para>Name:</para>

            <para>This is the name of the object.</para>
          </listitem>

          <listitem>
            <para>Platform:</para>

            <para>This is a pull-down menu that shows a list of all firewall
            platform targets available in Firewall Builder.</para>
          </listitem>

          <listitem>
            <para>Code String:</para>

            <para>This is a line of code in the target firewall language. (This is the heart of the Custom Service object.)</para>
          </listitem>

          <listitem>
            <para>Protocol Name:</para>

            <para>Use this if you want to restrict the Custom Service Object to a particular protocol: TCP, UDP, or ICMP. Default is "any".</para>
          </listitem>

          <listitem>
            <para>Address Family:</para>

            <para>Specify IPv4 or IPv6.</para>
          </listitem>

          <listitem>
            <para>Comments:</para>

            <para>This is a free-style text field used for comments.</para>
          </listitem>
        </itemizedlist></para>

      <para>The Custom Service Object created as shown in <xref
      linkend="custom-service-dialog1" /> can be used in the rule just like
      any other service object. For example, the policy rule shown in <xref
      linkend="rule-with-custom-service" /> blocks port scanning attempts
      launched against host <emphasis>server</emphasis>. The policy compiler
      translates this rule into an iptables command shown in <xref
      linkend="code-for-custom-service" />:</para>

      <para><figure float="1" id="rule-with-custom-service">
          <title>Using The Custom Service Object in The Policy Rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="rule-with-custom-service.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <example id="code-for-custom-service">
        <title>Iptables commands generated for the policy rule <xref
        linkend="rule-with-custom-service" /></title>

        <programlisting>$IPTABLES -A OUTPUT -d 10.3.14.100 -m psd
        --psd-weight-threshold 5 --psd-delay-threshold 10000 -j DROP $IPTABLES
        -A FORWARD -d 10.3.14.100 -m psd --psd-weight-threshold 5
        --psd-delay-threshold 10000 -j DROP</programlisting>
      </example>

      <para>In general, Custom Service objects can store an arbitrary piece of code
      for each supported firewall platform. When this object is used in the
      firewall policy, the policy compiler picks the appropriate line of code
      for the target firewall platform.</para>
    </sect1>
  </chapter>

  <chapter>
    <title>Firewall Policies</title>

    <sect1 id="policies-and-rules">
      <title>Policies and Rules</title>

      <para>Each firewall object has several sets of rules associated with it:
      Access Policy (just "Policy" in the GUI), Network Address Translation (NAT), and Routing 
      rules. Rules in the access policy control
      access to and from the firewall machine and machines behind it, 
      NAT rules describe address and port transformations that the firewall
      should make to the packets flowing through it, and routing rules control how packets get routed through the firewall.</para>

      <para>Firewall software varies widely in the way it can process packets.
      For example, some firewalls
      perform address and port transformations first and then apply policy
      rules, while some others do it the other way around. There are many
      other variations and features specific to particular implementations. In
      Firewall Builder though, the user works with an abstract firewall that
      looks uniform regardless of the target firewall platform it is used to
      generate code for. For example, Cisco PIX applies its Access List rules
      to the packet before it performs address and port transformations
      according to the NAT rules. This makes this firewall platform in a 
      substantially different manner and is inconvenient because a policy rule that
      controls access to the server behind the firewall doing NAT should be
      written using the firewall's object instead of the server's object. The
      meaning of such a rule is not obvious at a glance since one has to keep
      in mind all the NAT rules as well as understand that this policy rule
      controls access not to the firewall machine, but rather to the server
      behind it. Firewall Builder compensates for variations like this by using
      smart algorithms to transform rules defined in the GUI into 
      rules that achieve the desired effect in the target firewall platform.</para>

      <para><xref linkend="policies-seq" /> represents the logical sequence in
      which rules defined in Firewall Builder affect the network packet. This
      diagram describes an abstract firewall that Firewall Builder represents
      for the user. In some cases the target firewall may work the same way,
      in some other cases it won't. Either way, the goal is for the
      administrator to build the rules assuming his firewall works like shown
      in <xref linkend="policies-seq" />.</para>

      <figure float="1" id="policies-seq">
        <title>The sequence in which NAT and Policy rules apply to the packet
        in Firewall Builder</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="policies-seq.png" />
          </imageobject>
        </mediaobject>
      </figure>

    </sect1>

    <sect1 id="global-policy">
      <title>Firewall Access Policy</title>

      <figure float="1" id="global-policy1">
        <title>Access Policy</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="global_policy.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The Firewall access policy consists of a set of rules. Packets are
      analysed by comparing their parameters with rules in the policy,
      inspecting rules in an orderly manner from top to bottom. The first rule
      that matches the packet is used. Each rule includes a standard set of
      parameters, or <emphasis>Rule Elements</emphasis>, which are used to
      compare the data packet with, such as "Source", "Destination",
      "Service", "Interface", "Direction". For example, if a packet entering the firewall
      has a source address which matches the object in the "Source" field of
      the rule, its destination address matches the object in "Destination",
      its protocol and port numbers match the object in the field "Service", the interface it passes through matches the "Interface" field, 
      and its direction matches that specified in the field "Direction", then
      the firewall will take action, specified in the "Action" field of the
      matching rule.</para>

      <para>For example on <xref linkend="global-policy1" />, the rule #0 says
      that all fragmented packets should be dropped (the rule uses service
      object <emphasis>ip_fragments</emphasis> and the
      <emphasis>Deny</emphasis> action). Rule #1 says that connections from
      the internal network (object <emphasis>internal-net</emphasis>) to the
      firewall itself (object <emphasis>firewall-pix</emphasis>) using
      protocols <emphasis>telnet</emphasis> and <emphasis>snmp</emphasis> are
      allowed (action <emphasis>Accept</emphasis>). The "Catch all" rule #8
      denies all packets that have not been matched by any other rule above
      it. The global policy on <xref linkend="global-policy1" /> is built to
      allow only specific services and deny everything else, which is a good
      practice.</para>

      <para>Access Policy rules represent access control because they define
      which packets will be permitted and which will be denied. Access Policy
      rules operate on the packet's source and destination addresses and
      protocol parameters. These rules work regardless of the
      interface, unless a particular interface, or set of interfaces, is assigned to the rule.</para>

      <sect2>
	<title>Source and Destination</title>

	<para>The <guilabel>Source</guilabel> and <guilabel>Destination</guilabel> fields allow you to match a packet to a rule based on source and destination IP address.</para>

	<para>Either field may be set to "any," which means that the packet will match on that field regardless. Or, you can set a field to a particular IP address (Address object), the IP addresses associated with a host (Host object), a range of IP addresses (Address Range object), all the addresses in a particular subnet (Network object), or several other options. You can place more than one object in either field.</para>

	<para>In addition, you can "negate" an object by dragging it to a field, then selecting <guimenuitem>Negate</guimenuitem> from the right-click menu. In this image, the RFC 1918 address range object has been negated, so the rule matches any destination address that is <emphasis>not</emphasis> part of private address space.</para>

      <figure float="1" id="policies-rule-negate-rfc1918">
        <title>Destination matches any IP that is <emphasis>not</emphasis> an RFC 1918 address</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="policy_rule_negate_rfc1918" />
          </imageobject>
        </mediaobject>
      </figure>
      </sect2>

      <sect2>
	<title>Service</title>

	<para>The <guilabel>Service</guilabel> field is also used to match packets to rules. Use Service Objects to specify what services should be matched.</para>

        <para>As in the Source and Destination fields, you can "negate" an object by dragging it to a field, then selecting <guimenuitem>Negate</guimenuitem> from the right-click menu.</para>

      </sect2>

      <sect2>
	<title>Interface</title>

	<para>By default, all rules created in Firewall Builder affect all firewall interfaces, regardless of the target platform. However, sometimes you want to assign a rule to a particular interface, or set of interfaces, only. To populate this field, drag an interface from the firewall object.</para>

	<para>If you also want to assign a "direction" to the rule, use the next field.</para>

	<para>This field applies to <emphasis>firewall</emphasis> interfaces only, not host interfaces.</para>

      </sect2>

      <sect2 id="direction">
        <title>Direction</title>

        <para>The "direction" for a rule is defined with respect to the firewall
        machine, not to the network behind it. For example, packets that leave
        the internal network through the firewall are considered "inbound" on
        firewall's internal interface and "outbound" on its external
        interface. Likewise, packets that come from the Internet are "inbound"
        on the firewall's external interface and "outbound" on its internal
        interface. <xref linkend="f-directions" /> illustrates directions for packets entering or exiting the firewall
        interface.</para>

        <figure float="1" id="f-directions">
          <title>Directions</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="directions.png" />
            </imageobject>
          </mediaobject>
        </figure>
      </sect2>

      <sect2>
        <title>Action</title>

	<para>The Action is the action taken on a rule that matches on the Source, Destination, Service, Interface, Direction, and Time fields.</para>

        <para>The policy rule action can be one of the following options. Not all firewalls support all options, but the GUI will only allow options that are valid for the indicated firewall target. In addition, the same action may have a different name on different firewalls.</para>

 <para><itemizedlist spacing="compact">
          <listitem>
            <para>Accept:</para>

            <para>Allows the packet through the firewall. No subsequent rules are applied.</para>
          </listitem>

          <listitem>
            <para>Deny:</para>

            <para>Silently drops the packet. No subsequent rules are applied.</para>
          </listitem>

          <listitem>
            <para>Reject:</para>

            <para>Packet is dropped and appropriate ICMP message is sent back to sender. No subsequent rules are applied.</para>
          </listitem>

          <listitem>
            <para>Accounting/Count:</para>

            <para>Counts packets that match the rule, but makes no decision on the packet. Even if the packet matches,
	    the inspection process continues with other rules below it.</para>
          </listitem>

          <listitem>
            <para>Queue/Pipe:</para>

            <para>Passes the packet to user space process for inspection, it is translated into QUEUE for iptables and divert for ipfw. This action is only supported by compilers for iptables and ipfw.</para>
          </listitem>

          <listitem>
            <para>Tag/Mark:</para>

            <para>Associates an internal tag with the packet. The tag can later be inspected using service object TagService. This action is translated into MARK target with corresponding --set-mark parameter and optionally additional rule with CONNMARK --save-mark target for iptables. If option that activates CONNMARK target is used, compiler also adds a rule at the very top of the policy to restore the mark. Rules are placed in INPUT,OUTPUT and FORWARD chain of the "mangle" table, this ensures that DNAT happens before rules placed in the mangle table see the packet. PREROUTING chain in mangle table is executed before PREROUTING chain in the NAT table, so placing tagging rules in the PREROUTING chain would make them fire before DNAT. POSTROUTING chain of the mangle table, as well as its FORWARD and OUTPUT  chains, work before corresponding chains of the NAT table. In all cases the goal is to make sure DNAT  rules process the packet before, and SNAT rules process it after filtering and tagging rules.</para>

	    <para>For PF this action is translated into tag. Supported only by compilers for iptables and PF. </para>
          </listitem>

          <listitem>
            <para>Classify:</para>

            <para>Allows the firewall to define a QoS class for the packet that matches the rule. It is translated into CLASSIFY for iptables, with parameter --set-class. For PF it is translated into queue. Compiler for ipfw can use pipe, queue or divert depending on how the action is configured by the administrator in the GUI. This action is only supported by compilers for iptables, PF and ipfw. </para>
          </listitem>

          <listitem>
            <para>Custom:</para>

            <para>Allows administrator to define arbitrary piece of code to be used in place of an action. Supported by compilers for iptables, ipf and ipfw.</para>
          </listitem>

          <listitem>
            <para>Branch/Chain/Anchor:</para>

            <para>Used to create a branch in the rule set. It works on target platforms that provide suitable syntax and allow control to return to the higher level rule set if the branch can not make final decision about the packet. For iptables this action is translated into user-defined chain. The name of the chain is the name of the branch chosen by administrator. For PF this action is translated into an anchor with the name the same as the name of the branch defined by the administrator. This action is only supported by compilers for iptables and PF. </para>
          </listitem>

          <listitem>
            <para>Routing:</para>

            <para>Makes the firewall to route the packet that matches the rule through an interface or a gateway specified in the parameters of the action. This action is translated into ROUTE target for iptables and route option for PF and ipfilter. Compilers for PF and ipfilter support fastroute, route-to, reply-to and dup-to options.</para>
          </listitem>

          <listitem>
            <para>Continue:</para>

            <para>Essentially an empty action. Can be used when you want to assign an option, such as logging, to a match but take no other action in that rule.</para>
          </listitem>
        </itemizedlist></para>

	<para>
        <emphasis>Accept</emphasis>, <emphasis>Deny</emphasis> or
        <emphasis>Reject</emphasis> are the primary firewall actions. If a rule's action is Accept, then a
        packet with the source and destination addresses and service matching
        the rule is permitted through. If a rule's action is Deny, such packet
        is silently dropped. If a rule's action is Reject, then the packet is
        dropped and an appropriate ICMP message is sent back to the sender.
        For target platforms that support it, there might be an option to send
        a TCP RST packet back in response for TCP services. <xref
        linkend="actions" /> illustrates rule actions.</para>

        <figure float="1" id="actions">
          <title>Base Actions</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="actions.png" />
            </imageobject>
          </mediaobject>
        </figure>
<!--
        <para>Some firewall platforms also support the
        <emphasis>Accounting</emphasis> action. A rule with this action is
        supposed to only count packets that match it, but it does not make any
        decision as to whether the packet should be permitted or denied. Rules
        with this action are an exception because even if the packet matches
        such a rule, the inspection process continues with other rules below
        it. The <xref linkend="accounting-action" />, rule #0 counts packets
        that are part of <emphasis>HTTP</emphasis> sessions opened through the
        firewall. Rule #1 permits <emphasis>HTTP</emphasis> access to the
        server <emphasis>server</emphasis> from any source and rule #2 permits
        the internal network to connect to any destination. Since accounting
        rule #0 has <emphasis>any</emphasis> in its source and destination
        fields, it will count both accesses to the web server
        <emphasis>server</emphasis> and traffic created when users on the
        internal net connect to the web sites out on the Internet.</para>

        <figure float="1" id="accounting-action">
          <title>Example of an Accounting Action</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="accounting-action.png" />
            </imageobject>
          </mediaobject>
        </figure>
-->
      </sect2>

      <sect2>
	<title>Time</title>

	<para>The <guilabel>Time</guilabel> field allows you to restrict a match to a particular time interval. Drag a <guilabel>Time</guilabel> object to the field to activate it.</para>

      </sect2>

      <sect2>
	<title>Options</title>

	<para>The <guilabel>Options</guilabel> field allows you to specify certain options with regard to packets that match the rule. Almost all platforms have options related to logging, and some platforms have more extensive options.   XXXXXXXXX need to talk about other options XXXXXXXX</para>

      </sect2>

    </sect1>

    <sect1 id="nat">
      <title>Network Address Translation Rules</title>

      <sect2>
        <title>Basic NAT Rules</title>

        <figure float="1" id="nat-policy">
          <title>Network Address Translation Rules</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat_policy.png" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>Just like the firewall policy, the Network Address Translation
        (NAT) rules are inspected by the firewall in the order they appear in
        the NAT policy. Each NAT rule consists of the following rule
        elements:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Original Src</para>

              <para>An address object to compare to the the source address of the incoming packet.</para>
            </listitem>

            <listitem>
              <para>Original Dst</para>

              <para>An address object to compare to the the source address of the incoming packet.</para>
            </listitem>

            <listitem>
              <para>Original Srv</para>

              <para>The service that the original packet should match
              to be translated by this rule.</para>
            </listitem>

            <listitem>
              <para>Translated Src</para>

              <para>If the original source, destination, and service all matched, this object is the new source address of the packet.</para>
            </listitem>

            <listitem>
              <para>Translated Dst</para>

              <para>If the original source, destination, and service all matched, this object is the new destination address of the packet.</para>
            </listitem>

            <listitem>
              <para>Translated Srv</para>

              <para>If the original source, destination, and service all matched, this object is the new service (port number) of the packet.</para>
            </listitem>

            <listitem>
              <para>Options</para>

              <para>This field lets you specify platform-specific options for the packet.</para>
            </listitem>

            <listitem>
              <para>Comment</para>
            </listitem>
          </itemizedlist></para>

        <para>Here is how it works:</para>

        <para>The original packet is compared with NAT rules, one at a time,
        starting with the topmost rule. Once a rule that matches a packet's
        source address, destination address and service is found, the
        firewall takes parameters from the second half of that rule and makes
        the indicated substitutions. Some rule elements in the first half of the rule may be set to match <emphasis>any</emphasis> address or port. Some rule elements in the
        second half of the rule may be set to <emphasis>original</emphasis>, which means that parameter is not changed even if the rule matches. (No substitution happens for that element.)</para>

        <para>In addition to making the substitution, the firewall also makes a record in its internal table of the original and modified values. The firewall uses this information to perform a reverse translation when the reply packet comes back.</para>

        <para>The NAT rules in the screenshot (<xref linkend="nat-policy" />)
        tell the firewall to do the following:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Rule #0:</para>

	      <para>If the original packet originated on the internal subnet 192.168.2.0/24 and is destined for the internal subnet 192.168.1.0/24, then there is no need to translate the packet.</para>
            </listitem>

            <listitem>
              <para>Rule #1:</para>

              <para>If a packet is headed to the Internet from either the 192.168.2.0/24 or 192.168.1.0/24 subnet, then the source IP address should be set to the IP address of the firewall's "outside" interface.</para>
            </listitem>

            <listitem>
              <para>Rule #2:</para>

              <para>If any packet was originally destined for the "outside" interface on the firewall, the destination IP address should be re-written to be the IP address of the "server on dmz" host IP (in this case, 192.168.2.10).</para>
            </listitem>
          </itemizedlist></para>

        <para>Some firewall platforms support negation in NAT rules. If it is
        supported, this feature can be activated by right-clicking on the rule element in the NAT rule. <xref
        linkend="rule-elements" /> shows what firewall platforms support
        negation in NAT.</para>

        <para>You can create NAT rules and edit them using the same methods as
        described in <xref linkend="editing-policy-and-nat" /></para>
      </sect2>

      <sect2>
        <title>Source Address Translation</title>

        <para>Suppose your internal network is configured using so-called
        private IP addresses as defined in RFC 1918. These addresses
        are:</para>

        <para><itemizedlist>
            <listitem>
              <para>10.0.0.0 / 255.0.0.0</para>
            </listitem>

            <listitem>
              <para>172.16.0.0 / 255.240.0.0</para>
            </listitem>

            <listitem>
              <para>192.168.0.0 / 255.255.0.0</para>
            </listitem>
          </itemizedlist></para>

        <para>If your network uses addresses from one of these blocks, and you
        want to provide Internet access for machines on this net, then you may
        need Network Address Translation (NAT) configured on the firewall.
        This particular type of NAT configuration is often called
        Masquerading. When configured this way, the firewall rewrites the source
        IP address of each packet sent by internal machines to the Internet,
        replacing the private IP address with the address of its external
        interface.</para>

        <para>In Firewall Builder this type of the NAT rule is composed as
        shown in Rule 1 above.</para>

        <para>In this rule objects representing internal networks are placed in
        "Original Src" and the firewall's outside interface object is placed in "Translated
        Src", indicating that we want the source address of the packets to be
        translated. As before, we do not need to worry about reply packets
        because the underlying firewall software keeps track of translations done
        for all the connections opened through the firewall and rewrites
        addresses in all reply packets automatically.</para>

        <para><xref linkend="nat-policy" />, Rule 1 uses the firewall interface object in
        the Translated Src, which means the source address of the packet will be
        substituted with the address of firewall outside interface. If there is more than one external interface, the decision of which interface to use is made by the firewall's routing table.</para>

        <para>One of the consequences of this design is that rule #1 on <xref
        linkend="nat-policy" /> provides translation for packets coming from
        internal subnets going out to the Internet.</para>

        <note>
          <para>Interface object can be used in the NAT rules even if the
          address of this interface is obtained dynamically and is not known
          beforehand.</para>
        </note>

        <para><figure id="src-nat">
            <title>Translations done to packets going in different directions:
            (A) when firewall object is used in TSrc in the NAT rule; (B) when
            interface eth1 is used in TSrc in the NAT rule; (C) when host
            object with address 192.0.2.50 is used in TSrc in the NAT
            rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="src-translations.png" />
              </imageobject>

              <textobject>
                <phrase></phrase>
              </textobject>
            </mediaobject>
          </figure></para>
      </sect2>

      <sect2>
        <title>Destination Address Translation</title>

        <para>Suppose we have a network using private IP addresses behind the
        firewall, and a server on it. We need to provide access to this server
        from the Internet in a such way that connections will be established
        to the address of the firewall. In this case we need destination
        address of packets to be rewritten so packets would reach the server
        on internal network. The simplest rule that translates destination
        address of incoming packets looks like the one on <xref linkend="nat-policy" />, Rule 2.</para>

        <para>Basically this rule says "if destination address of the packet
        matches the external address of the firewall, replace it with the
        address defined by the object "server on dmz". If we had used the "firewall" object as the original destination, instead of the interface, then all external interfaces would be mapped to the DMZ server. <xref
        linkend="dst-nat" /> (A) illustrates this. The red, green and blue
        packets come to the firewall from different subnets and all have
        destination addresses that match address of the corresponding
        interface. If it were not for our NAT rule, packets like that would
        have been accepted by the firewall and sent to a process expecting
        them. However NAT rule comes to play and changes destination address
        of all three packets to 10.3.14.100 (the address of server). Packets
        with this address do not match any address belonging to the firewall
        and therefore get sent out of the firewall according to the rules of
        routing.</para>

        <para>A rule that does not specify
        any service for the translation translates addresses in
        packets of all protocols. This approach can make some rules impractical
        impractical because they will translate and bounce any packets that are
        headed for the firewall, making it impossible to connect to the
        firewall itself using telnet or any other protocol. This is especially
        inconvenient since as we saw earlier translation happens for packets
        coming from all directions; this means that you won't be able to
        connect to the firewall even from inside of your network. To alleviate
        this problem we just add an appropriate service object to the rule as
        shown in <xref linkend="basic-nat-10" />:</para>

        <para><figure id="basic-nat-10">
            <title>Translation limited to packets of HTTP protocol</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="basic-nat-10.png" />
              </imageobject>

              <textobject>
                <phrase></phrase>
              </textobject>
            </mediaobject>
          </figure></para>

        <para>Rule #0 in <xref linkend="basic-nat-10" /> has limited scope
        because of the service object "http" in Original Service; it matches
        and performs address translation only for packets of HTTP protocol,
        while other packets are processed by TCP/IP stack on the firewall as
        usual. Very often we only want to translate address for packets coming
        from particular side of the firewall, typically from the Internet, and
        do not change other packets. Rule #0 on <xref
        linkend="basic-nat-11" /> achieves this goal by using firewall's
        interface object in Original Destination. Only packets with
        destination address the same as that of interface eth1 of the firewall
        match this rule and get their address translated. Packets coming from
        other directions will have different destination address and won't
        match the rule (see <xref linkend="dst-nat" /> (B) ).</para>

        <para><figure id="basic-nat-11">
            <title>Destination Address Translation Rule Using Interface of the
            Firewall</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="basic-nat-11.png" />
              </imageobject>

              <textobject>
                <phrase></phrase>
              </textobject>
            </mediaobject>
          </figure></para>

        <para><figure id="dst-nat">
            <title>Translations done to packets going in different directions:
            (A) when firewall object is used in ODst in the NAT rule and (B)
            when interface eth1 is used in ODst in the NAT rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="dst-translations.png" />
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect2>

      <sect2 id="editing-policy-and-nat">
        <title>Editing firewall Policy and NAT Rules</title>

        <sect3>
          <title>Adding and removing rules</title>

          <figure float="1" id="editing-policy1">
            <title>Modifying Policy rules</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="editing_policy1.jpg" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>Rules can be added, removed or moved around in the policy
          using commands in a popup menu which appears if you click the right
          mouse button on the rule element "Num" (the very first rule element,
          counting from the left). Screenshot <xref
          linkend="editing-policy1" /> illustrates this menu.</para>

          <para>This menu allows for adding new rules above or below of the
          currently selected rule in the policy, removing rules, moving the
          current rule up and down, plus the usual
          <guimenuitem>"Copy"</guimenuitem>/<guimenuitem>"Paste"</guimenuitem>
          operations done on policy rules.</para>

          <para>Functions of this pop-up menu are also duplicated in the main
          menu <guimenuitem>"Rules"</guimenuitem></para>

          <para>You can also use the drag and drop operation to move rules up
          and down in the policy. Just drag the rule with the mouse by its
          "number" rule element.</para>
        </sect3>

        <sect3>
          <title>Adding, removing and modifying objects in the policy and NAT
          rules</title>

          <para>To add objects to the policy or NAT rule you can either drag
          them from the tree and drop them into the corresponding rule
          element, or use the
          <guimenuitem>"Copy"</guimenuitem>/<guimenuitem>"Paste"</guimenuitem>
          operation. Objects can be copied into clipboard both from the tree
          and from another policy rule; in both cases use the pop-up menu or
          main menu <guimenuitem>"Edit"</guimenuitem>.</para>

          <para>Clicking the right mouse button when the cursor is over rule
          elements "Source","Destination" or "Service" brings a
          context-sensitive pop-up menu ( <xref linkend="editing-policy2" />
          ). The same pop-up menu appears when you do that over the "Original
          Source", "Original Destination", "Original Service", "Translated
          Source", "Translated Destination" and "Translated Service" rule
          elements in the NAT rule.</para>

          <figure float="1" id="editing-policy2">
            <title>Modifying Object in the Policy Rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="editing_policy2.jpg" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <para><itemizedlist spacing="compact">
              <listitem>
                <para>Edit:</para>

                <para>This menu item opens the currently selected object in
                the dialog</para>
              </listitem>

              <listitem>
                <para>Edit in a new window:</para>

                <para>This menu item creates a new main window and opens the
                currently selected object in it. If more than one main window
                currently exists, the object will be opened in one of the
                existing windows.</para>
              </listitem>

              <listitem>
                <para>Copy:</para>

                <para>The object is copied into clipboard.</para>
              </listitem>

              <listitem>
                <para>Cut:</para>

                <para>The object is copied into clipboard and removed from the
                rule.</para>
              </listitem>

              <listitem>
                <para>Paste:</para>

                <para>The object is copied from the clipboard to the
                rule.</para>
              </listitem>

              <listitem>
                <para>Negate:</para>

                <para>All objects in the selected rule element are negated.
                The rule element "Source" is negated in rule #1 in screenshot
                <xref linkend="editing-policy2" /></para>
              </listitem>
            </itemizedlist></para>
        </sect3>

        <sect3>
          <title>Changing rule action</title>

          <para>Clicking the right mouse button when the cursor is over the
          rule element "Action" brings a context-sensitive pop-up menu ( <xref
          linkend="editing-policy3" /> ).</para>

          <figure float="1" id="editing-policy3">
            <title>Modifying the Action of the Policy Rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="editing_policy3.jpg" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Accept:</para>

              <para>The rule will accept the packet matching it</para>
            </listitem>

            <listitem>
              <para>Deny:</para>

              <para>The rule will drop the packet matching it</para>
            </listitem>

            <listitem>
              <para>Reject:</para>

              <para>The rule will drop the packet matching it, and will also
              send appropriate ICMP response message back to source.</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>Changing rule direction</title>

          <para>Clicking the right mouse button when the cursor is over the
          rule element "Direction" brings a context-sensitive pop-up menu (
          <xref linkend="editing-policy4" /> ).</para>

          <figure float="1" id="editing-policy4">
            <title>Modifying the Direction of the Policy Rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="editing_policy4.jpg" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Inbound:</para>

              <para>The rule matches packets entering the firewall</para>
            </listitem>

            <listitem>
              <para>Outbound:</para>

              <para>The rule matches packets exiting the firewall</para>
            </listitem>

            <listitem>
              <para>Both:</para>

              <para>The rule matches both entering and exiting packets</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>Changing rule options and logging</title>

          <para>clicking the right mouse button when the cursor is over the
          rule element "Options" brings up a context-sensitive pop-up menu (
          <xref linkend="editing-policy5" />. )</para>

          <figure float="1" id="editing-policy5">
            <title>Modifying Options of the Policy Rule</title>

            <mediaobject>
              <imageobject>
                <imagedata align="left" fileref="editing_policy5.jpg" />
              </imageobject>
            </mediaobject>
          </figure>

          <para>This menu provides items for the following functions:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Modify Options:</para>

              <para>This menu item brings up a dialogue which allows you to
              modify certain options specific to the target firewall platform
              and associated only with the current rule.</para>
            </listitem>

            <listitem>
              <para>Turn logging ON:</para>

              <para>Turns logging on for all packets matching this rule. If
              the target firewall platform does not support selective logging
              of packets, this menu item is disabled.</para>
            </listitem>

            <listitem>
              <para>Turn logging OFF:</para>

              <para>Turn logging off for packets matching this rule. If the
              target firewall platform does not support selective logging of
              packets, this menu item is disabled.</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="rule-elements">
      <title>Support for Rule Elements and Features on Various
      Firewalls</title>

      <para>Certain fields in the rules are only available if the target
      firewall platform supports them. For example, the iptables firewall
      provides controls for logging of matched packets, while Cisco PIX does
      not; PIX always logs every packet it drops. Where possible, the policy
      compilers are trying to emulate the missing feature. For example,
      OpenBSD PF does not support negation natively, but policy compiler
      <emphasis>"fwb_pf"</emphasis> provides a workaround and tries to emulate
      this feature for PF. Another example is policy rules with "Outbound"
      direction. Cisco PIX supports only inbound Access Lists, so the policy
      compiler emulates outbound Access Lists while generating configuration
      for PIX. <xref linkend="policy-rule-elements" /> represents a list of
      fields in the rules and which firewall platforms support them.
      Information about these fields and features is available for fwbuilder
      GUI that disables corresponding menu items and hides associated policy
      elements when they are not supported.</para>

      <para><table id="policy-rule-elements">
          <title></title>

          <tgroup cols="11">
            <thead>
              <row>
                <entry>Firewall Platform</entry>

                <entry>Source</entry>

                <entry>Destination</entry>

                <entry>Service</entry>

                <entry>Time Interval</entry>

                <entry>Direction</entry>

                <entry>Action</entry>

                <entry>Logging/ Options</entry>

                <entry>Comment</entry>

                <entry>Negation in Policy rules</entry>

                <entry>Negation in NAT rules</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>iptables</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>
              </row>

              <row>
                <entry>ipfilter</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>-</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>-</entry>
              </row>

              <row>
                <entry>pf</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>-</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>
              </row>

              <row>
                <entry>Cisco PIX</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>-</entry>

                <entry>+</entry>

                <entry>+</entry>

                <entry>-</entry>

                <entry>+</entry>

                <entry>-</entry>

                <entry>-</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </sect1>

    <sect1 id="multiple-addresses">
      <title>Using Objects With Multiple Addresses in the Policy and NAT
      rules</title>

      <para>One of the great advantages of the object-oriented approach to
      building firewall's policy is that it helps simplify the representation
      of the policy. Host and Firewall objects can have child Interface
      objects, which in turn have child Address and Physical Address objects.
      Any object in the hierarchy Host - Interface - Address/Physical Address
      can be used in the policy and compiler uses all objects in the hierarchy
      down from the one used in the policy to build the rule.</para>

      <figure float="1" id="multiple-addresses-obj1">
        <title>Host object with an interface that has multiple
        addresses</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="multiple-addresses-obj1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure float="1" id="multiple-addresses1">
        <title>Using objects with multiple addresses in the policy
        rules</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="multiple-addresses-rule1.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Consider example <xref linkend="multiple-addresses-obj1" />, <xref
      linkend="multiple-addresses1" />. Here interface
      <emphasis>eth0</emphasis> of the Host object <emphasis>"test
      server"</emphasis> has three IP addresses (named <emphasis>"test
      server:eth0:1"</emphasis> through <emphasis>"test
      server:eth0:3"</emphasis>) and interface <emphasis>eth0</emphasis> of
      the Host object <emphasis>"dmz host"</emphasis> has only one IP address
      <emphasis>"dmz host:eth0"</emphasis>. Policy rule #4 says that
      <emphasis>"dmz host"</emphasis> can talk to <emphasis>"test
      server"</emphasis> using any protocol. Since <emphasis>"test
      server"</emphasis> has three different addresses, we need to generate
      policy rule that will match any of them (obviously not on all three at
      once, that's impossible, so we have to use logical operation "OR", not
      "AND" here.) Basically, rule #4 is equivalent to three separate rules,
      each of them using one address of <emphasis>"test server"</emphasis> in
      turn. These three rules are represented in <xref
      linkend="multiple-addresses2" /> (original rule #4 also shown there, but
      it is disabled.)</para>

      <figure float="1" id="multiple-addresses2">
        <title>Equivalent rules</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left" fileref="multiple-addresses-rule2.jpg" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Firewall Builder takes care of this situation automatically and
      generates firewall policy described in <xref
      linkend="multiple-addresses1" /> as if a user have built a policy in the
      GUI using the three rules as shown in <xref
      linkend="multiple-addresses2" />.</para>

      <para>In fact, the algorithm it uses is even more general. In the
      example <xref linkend="multiple-addresses1" /> host <emphasis>"test
      server"</emphasis> has single interface with multiple addresses which
      compiler used to generate target firewall code. The policy compiler
      works in a similar way even if host or firewall object used in the rule
      has multiple interfaces and each interface, in turn, has multiple
      addresses. If host (or firewall) object is used in the rule, then the
      compiler scans all its interfaces, finds all corresponding addresses and
      uses them to generate firewall configuration. If interface object is
      used in the rule, then the compiler uses all its addresses. And finally,
      if Address or Physical Address object is used in the rule, then compiler
      uses only this parameter to generate the target firewall configuration.
      In other words, compiler always traverses the tree, starting from the
      object found in the policy rule and uses parameters of all Address and
      Physical Address objects it finds. Since Address and Physical Address
      objects are the leaf nodes in the tree and have no other objects beneath
      them, the compiler uses parameters of the objects of these types to
      generate the target code.</para>

      <note>
        <para>There is an exception to this algorithm, see <xref
        linkend="using-mac-address" /></para>
      </note>
    </sect1>
  </chapter>

  <chapter id="policy">
    <title>Examples of Policy Rules</title>

    <!-- ********************************************************* -->

    <sect1>
      <title>Letting certain protocols through, while blocking everything
      else</title>

      <para>This is one of the simplest, most basic tasks you may want your
      firewall to do - block all the traffic while letting certain protocols
      through. Let's assume that we have a network consisting of just the
      firewall "firewall1" and a few hosts behind it. We want to let protocols
      SMTP and FTP through to the server "hostA" from the Internet, and block
      everything else. All we need to do is put the following rules in the
      Global Policy:</para>

      <para><figure>
          <title>Example of a rule permitting only certain protocols to the
          server and blocking everything else.</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-1.png" />
            </imageobject>

            <textobject>
              <phrase>[]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Rule #0 allows SMTP and FTP through to the server, while rule #1
      blocks and logs everything else. It is worth mentioning that this policy
      also blocks all the access to firewall itself, including access to it
      from internal hosts.</para>

      <para>We do not need any additional rules to take care of "reply"
      packets coming back from the server to clients because our underlying
      firewall software supports stateful inspection and "understands" that
      such packets should be let through.</para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Interchangeable and non-interchangeable objects</title>

      <para>In the previous example we put object "hostA" into the Destination
      field of the policy rule #0 because our goal was to permit protocols
      SMTP and FTP to that host and not to any other one. This actually
      reflects general principle Firewall Builder is based on: put the object
      you want to control access for in the Source or Destination field of the
      policy rule. Two different objects with the same address may or may not
      be interchangeable, depending on their type and other parameters. One of
      the frequent mistakes is to create Host object with IP address of the
      firewall, then use it in the policy and expect Firewall Builder to build
      policy controlling access to the firewall. Unfortunately it does not
      always work that way. If you wish to control access to or from the
      firewall machine, then put Firewall object into the policy rule.</para>

      <para>Another example of two objects which may on the first glance
      represent the same thing, but in fact are not interchangeable, is IP
      service object with protocol number set to 1 and ICMP service object
      with type and code set to "any". Both objects might represent the same
      type of service, namely "Any ICMP message". IP protocol 1 is in fact
      ICMP, so one would expect the behaviour of the firewall to be the same
      regardless of what type of service object is used. However, target
      firewall software typically uses special syntax for indication of
      different protocols, so using proper syntax for ICMP protocol turns
      certain features on, like for example session state tracking. Using just
      IP with protocol number 1 will most likely not turn these features on
      and therefore will lead to unexpected results.</para>

      <para>On the other hand, two objects of the same type with different
      names but the same values of all other parameters are perfectly
      interchangeable. Using different objects to describe the same object may
      be confusing, but the final firewall policy will be correct. Firewall
      Builder leaves design of the objects up to the firewall
      administrator.</para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Using groups</title>

      <para>Sometimes we need to define a lot of very similar rules for
      multiple hosts or networks. For example, there may be a need to permit
      the same service to 10 different hosts on the network, while still
      blocking it to all others. The simplest way to accomplish this is to add
      10 rules with the same source and service fields and just different
      destinations. Obviously this can make firewall policy quite cluttered.
      To avoid this and make policy readable we can use groups. Group is just
      a container which includes multiple objects of the same or similar type.
      Firewall Builder supports groups of objects and groups of services. One
      can put "Host", "Network" and "Firewall" objects in the group of
      objects; service objects can not be put in a such group. Similarly group
      of services can contain "IP Service", "TCP Service", "UDP Service" and
      "ICMP Service" objects and can not contain hosts or networks. Groups can
      contain other groups of the same type as well. <xref
      linkend="group-dialog1" /> represents an example of the object
      group.</para>

      <para>To add objects to a group simply drag them from the tree on the
      left into group view on the right, or use Copy/Paste functions available
      via menus.</para>

      <para>Once appropriate group has been created, it can be used for the
      policy and NAT rules just like any other object.</para>

      <para><figure>
          <title>Example of a rule using object group.</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-1-1.png" />
            </imageobject>

            <textobject>
              <phrase>[]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Firewall talking to itself</title>

      <para>Many services running on the firewall machine need to be able to
      establish connections to the same machine. X11, RPC, DNS are services
      like that, to name a few. Blocking these services on the firewall can
      cause various problems, depending on what protocol is being blocked. If
      it is DNS, then it may take a lot longer than usual to get to a command
      line prompt when logging in to the machine using telnet or ssh. Once
      logged in, you won't be able to resolve any host names into addresses.
      If X11 is blocked, then X server and any graphic environment using it
      (KDE, Gnome etc.) won't start. In any case though the problem can easily
      be solved by adding a simple rule to the loopback interface of the
      firewall to permit all sorts of communications. As shown on <xref
      linkend="rule-on-loopback" />, this rule should use firewall object in
      both source and destination, have action <emphasis>Accept</emphasis> and
      direction <emphasis>Both</emphasis>.</para>

      <para><figure id="rule-on-loopback">
          <title>Rule permitting everything on the loopback interface</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-10.png" />
            </imageobject>

            <textobject>
              <phrase>[]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <note>
        <para>Running X11 and other complex services on the dedicated firewall
        machine should be discouraged, however recommendations given in this
        chapter do apply to the firewall protecting a server or a workstation
        where X11, RPC and other services are perfectly normal.</para>
      </note>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Blocking unwanted types of packets</title>

      <para>Fragmented IP packets, although useful in certain situations, are
      often used as a tool to probe and penetrate simple packet filters.
      Particular kind of fragmented packets, namely those with incorrect
      length specification, are especially bad because they can cause some
      operating systems to crash (for example Windows NT was known to crash
      before fix was developed and published by Microsoft). These packets
      therefore are considered potentially harmful and should be blocked on
      the perimeter of your network. Many firewall platforms provide ways to
      deal with such packets.</para>

      <para>In Firewall Builder, we provide a way to set flags or options in
      the IP service object. Two options deal with fragments: one is called
      "all fragments" and another "short fragments". <xref
      linkend="f-policy-2" /> shows how does object "ip_fragments" look like
      with both options turned on. Policy compilers recognize this object and
      generate correct code for underlying firewall software platform.</para>

      <para><figure id="f-policy-2">
          <title>IP Service object which represents fragmented
          packets.</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-2.png" />
            </imageobject>

            <textobject>
              <phrase>[IP Service object which represents fragmented
              packets]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Object "ip_fragments" is included in the section "Services/IP" of
      the standard objects database coming with Firewall Builder.</para>

      <para>Another potentially harmful type of packets is so called
      "Christmas tree" packet. This one is just a TCP packet with impossible
      combination of TCP flags or even all TCP flags turned on at once (for
      example SYN, ACK, FIN, RST, PSH). This combination is never used in real
      communications, so if a packet like that appears at the boundary of your
      network, it should be considered illegal and blocked. Object "tcp-xmas"
      is included in the section "Services/TCP" of the standard objects
      database coming with Firewall Builder.</para>

      <para>Some platforms provide a mechanism to turn on and off stateful
      inspection on individual rules. Turning it off on those rules which do
      not require it may improve performance of the firewall. Obviously we do
      not need stateful inspection while analysing fragmented packets as we do
      not really want any session to be established, so we can safely use this
      option on this rule. One example of firewall platform which supports
      stateful inspection but provides a way to turn it on and off is
      iptables. In Firewall Builder, this can be done in the rule options
      dialog (which is platform-sensitive and shows different options for
      different platforms). <xref linkend="f-policy-3" /> shows rule options
      dialog for iptables firewall:</para>

      <para><figure id="f-policy-3">
          <title>Rule options dialog for iptables firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-3.png" />
            </imageobject>

            <textobject>
              <phrase>[Rule options dialog for iptables firewall]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Here is an example of the policy rule which is intended to block
      all fragmented and TCP "Christmas tree" packets. Note an icon in the
      "Options" column, it indicates that this rule has non-default options
      set.</para>

      <para><figure>
          <title>Rule blocking all fragmented packets and TCP "Christmas tree"
          packets</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-4.png" />
            </imageobject>

            <textobject>
              <phrase>[Rule blocking all fragmented packets and TCP "Christmas
              tree" packets]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>This rule is part of the Global Policy and therefore applies to
      all packets crossing the firewall regardless of their origin. This means
      that it will block such packets originating in your network, too. If by
      some reason you might want to be able to send this kind of packets out,
      then put this rule in the Interface Policy on your external interface,
      with Direction "Inbound".</para>

    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Anti-spoofing rules</title>

      <para>Generally speaking, IP spoofing is a technique of generating IP
      packets with source address that belongs to someone else. Spoofing
      creates a danger when hosts on the LAN permit access to their resources
      and services to trusted hosts by checking source IP of the packets.
      Using spoofing, an intruder can fake source address of his packets and
      make them look like those originated on the trusted hosts. The basic
      idea of anti-spoofing protection is to create a firewall rule assigned
      to the external interface of the firewall that examines source address
      of all packets crossing that interface coming from outside. If the
      address belongs to the internal network or firewall itself, the packet
      should be dropped.</para>

      <para>To create anti-spoofing rule in Firewall Builder we need objects
      for all subnets inside the firewall perimeter, plus an object for
      firewall itself. To make the rule more compact, objects for internal
      subnets can be put in a single group. Then we create a rule in the
      policy, targeted to the external interface (interface eth1 on <xref
      linkend="f-policy-5" />), that has all these objects in the "source"
      rule element. "Destination" and "service" must be set to "any" and
      Direction must be set to "inbound". <xref linkend="f-policy-5" /> shows
      the anti-spoofing rule.</para>

      <para><xref linkend="gettingstarted" /> explains how a firewall
      object and its interfaces can be created. <xref
      linkend="firewall-interface" /> has more details on the firewall's
      interfaces, their types and other properties. <xref
      linkend="direction" /> explains the concept of direction.</para>

      <para><figure id="f-policy-5">
          <title>Anti-spoofing rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-5.png" />
            </imageobject>

            <textobject>
              <phrase>[Anti-spoofing rule]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Just like in the previous example, it may be advantageous to turn
      stateful inspection off on anti-spoofing rules. Since we want to prevent
      these packets from entering our network, there is going to be no session
      opened and we do not want to keep state at all. You can use "Options"
      element to do it.</para>

      <para>An interactive Druid available via menu item "Rules/Help me build
      firewall policy" can create anti-spoofing rules.</para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Protecting local host</title>

      <para>This is the kind of policy you would want if you are using
      firewall software running on the host itself. Sometimes your host may
      obtain its IP address dynamically using DHCP or PPPoE protocol; Firewall
      Builder can handle this situation as well.</para>

      <para><itemizedlist>
          <listitem>
            <para>create firewall object, do not forget to choose firewall
            platform and OS it is running on and add its interfaces, including
            loopback interface. If host gets its IP address dynamically, mark
            interface as 'dynamic' using appropriate checkbox. See <xref
            linkend="gettingstarted" />.</para>
          </listitem>

          <listitem>
            <para>call Druid, choose "Firewall protects local host" and then
            pick rules you want.</para>
          </listitem>
        </itemizedlist></para>

      <para>See what Druid have created for you. You can edit these and add
      more rules now.</para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Using Action 'Reject': blocking Ident protocol</title>

      <para>Suppose we want to block connections to certain ports on the
      server behind the firewall, but want to do it in a "polite" manner, that
      is somehow let sender host know right away that the connection attempt
      was blocked so our server would look like nothing is listening on that
      port at all. One of the practical applications of this setup would be
      blocking Ident connections to a mail relay or a mail server. Sendmail
      and many other MTA's (Mail Transport Agents) attempt to connect to Ident
      port (TCP port 113) on the mail relay every time they accept email from
      that relay. Many believe Ident protocol is practically useless and does
      not really serve as a protection against SPAM or for any other useful
      purpose. Unfortunately silent blocking of ident connections on the
      firewall using a rule with action <emphasis>"Deny"</emphasis> adds a
      delay in the email delivery. This happens because when sender host tries
      to establish Ident connection to the recipient, it sends TCP SYN packet
      to it (the first packet in three-way TCP handshake) and then waits for
      TCP ACK packet in response. However, it never sees it because
      recipient's firewall blocked its first TCP SYN packet. In the situation
      like this sender host assumes the reply packet got lost and tries to
      send TCP SYN packet again. It repeats this for a few seconds (usually 30
      sec) before it gives up. This adds 30 sec delay to email delivery. Our
      intent is to show how one can construct a policy rule to block Ident
      without causing this delay.</para>

      <para>The simplest way to block any protocol is to use "Deny" action in
      the policy rule. Since "Deny" causes firewall to silently drop the
      packet, sender never knows what happened to it and keeps waiting for
      response. To avoid this delay we will set rule Action to "Reject".
      Normally "Reject" makes firewall to send ICMP "unreachable" message back
      to sender, thus indicating that access to requested port is denied by
      the firewall. This may be insufficient in some cases because host trying
      to connect to our Ident port won't understand this type of ICMP message
      and will keep trying. In fact, most OS do not recognize ICMP
      "administratively prohibited" message and do keep trying. To make host
      on the other side stop its attempts right away we need to send TCP RST
      packet back instead of ICMP message. This can be done by adding
      appropriate rule option (see <xref linkend="f-policy-7" />) It is also
      safe to turn stateful inspection off on this rule since we do not want
      connection to be established and therefore do not need to keep track of
      it.</para>

      <para><figure>
          <title>Using action "Reject" with rule option</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-6.png" />
            </imageobject>

            <textobject>
              <phrase>[Using action "Reject" with rule option]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para><figure id="f-policy-7">
          <title>Adding rule option to make send TCP RST packet</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-7.png" />
            </imageobject>

            <textobject>
              <phrase>[Adding rule option to make send TCP RST
              packet]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Using negation in policy rules</title>

      <para>Suppose we want to set up a rule to permit access from the host on
      DMZ net "mail_relay_1" to hosts on the Internet, but do not want to open
      access from it to machines on our internal network represented by the
      object "internal_net". Since we want it to connect to hosts on the
      Internet and can not predict their addresses, we have to use "any" as a
      destination in the policy rule. Unfortunately "any" includes our
      internal net as well, which is going to open undesired hole in the
      firewall.</para>

      <para>There are two solutions to this problem. First, we can use two
      rules: first will deny access from "mail_relay_1" to "internal_net" and
      the second will permit access from "mail_relay_1" to "any". Since rules
      are consulted in the order they are specified in the policy, access to
      internal net will be blocked by the first rule since the packet would
      hit it first. These two rules are represented on <xref
      linkend="f-policy-8" /></para>

      <para><figure id="f-policy-8">
          <title>Using two rules to block access from DMZ to internal net and
          permit access to the Internet</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-8.png" />
            </imageobject>

            <textobject>
              <phrase>[Using two rules to block access from DMZ to internal
              net and permit access to the Internet]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Another solution uses negation. We can specify destination in the
      rule as "not internal_net", thus permitting access to anything but
      "internal_net". Negation can be enabled and disabled in the pop-up menu
      which you call by clicking right mouse button on the corresponding rule
      field. This rule depends on the rules below it to block access from
      "mail_relay1" to the "internal_net". If the policy was built using
      general principle of blocking everything and then enabling only types of
      connections that must be permitted, then it usually has a "catch-all"
      rule at the bottom that blocks everything. This last rule is going to
      deny connections from the "mail_relay1" to "internal_net".</para>

      <para><figure id="f-policy-9">
          <title>Using rule with negation to block access from DMZ to internal
          net and permit access to the Internet</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="policy-9.png" />
            </imageobject>

            <textobject>
              <phrase>[Using rule with negation to block access from DMZ to
              internal net and permit access to the Internet]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Negation can be used in NAT rules in a similar way.</para>
    </sect1>
  </chapter>

  <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -->

  <chapter id="nat-examples">
    <title>Examples of Network Address Translation Rules</title>

    <!-- ********************************************************* -->

    <sect1>
      <title>Providing Internet connection for workstations behind the
      firewall</title>

      <para>Suppose your internal network is configured using so-called
      private IP addresses as defined in RFC 1918. These addresses are:</para>

      <para><itemizedlist>
          <listitem>
            <para>10.0.0.0 / 255.0.0.0</para>
          </listitem>

          <listitem>
            <para>172.16.0.0 / 255.240.0.0</para>
          </listitem>

          <listitem>
            <para>192.168.0.0 / 255.255.0.0</para>
          </listitem>
        </itemizedlist></para>

      <para>If your network uses addresses from one of these blocks, and you
      want to provide Internet access for machines on this net, then you may
      need Network Address Translation (NAT) configured on the firewall. This
      particular type of NAT configuration is often called Masquerading. When
      configured this way, the firewall rewrites source IP address of each
      packet sent by internal machines to the Internet, replacing private IP
      address with the address of its external interface.</para>

      <para>In Firewall Builder this type of the NAT rule is composed as shown
      on <xref linkend="f-nat-1" /></para>

      <para><figure id="f-nat-1">
          <title>Masquerading rule (this rule is part of NAT ruleset)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-1.png" />
            </imageobject>

            <textobject>
              <phrase>[Masquerading rule (part of NAT ruleset)]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Here, object representing internal network is placed in "Original
      Source" and firewall's object is placed in "Translated Source", thus
      indicating that we want source address of the packets to be translated.
      As before, we do not need to worry about reply packets because
      underlying firewall software keeps track of translations done for all
      the connections opened through the firewall and rewrites addresses in
      all reply packets automatically.</para>

      <para><xref linkend="f-nat-1" /> uses firewall object in Translated
      Source, which means firewall will substitute a source address in the
      packet for the address of its external interface. But what if the
      firewall has two or more external interfaces ? This happens if it has
      multiple connections to the Internet or other insecure subnets like DMZ.
      Generally speaking, Masquerading rule translates source address of
      packets that go from the more secure subnet to the less secure one. See
      <xref linkend="firewall-interface" /> for detailed explanation of
      Security Levels of firewall's interfaces. If the firewall has multiple
      interfaces and firewall object is used in the Translated Source of the
      NAT rule like in <xref linkend="f-nat-1" />, then the firewall will
      translate source address into address of the interface through which the
      packet is going to exit (which is dictated by the routing table).
      Firewall <emphasis>"fw2"</emphasis> on <xref linkend="f-nat-1-1" /> has
      two insecure interfaces: <emphasis>"eth1"</emphasis> and
      <emphasis>"eth2"</emphasis>, both use routable IP addresses. NAT rule #0
      will automatically translate source address of outgoing packets into the
      address of either eth1 or eth2, depending on the routing which dictates
      through which interface the packet is going to exit.</para>

      <para><figure id="f-nat-1-1">
          <title>NAT rule for the firewall with two external
          interfaces</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-1-1.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>There may be situations when we would not want to automatically
      use all external interfaces of the firewall for translation. Suppose
      firewall <emphasis>"fw2"</emphasis> has two insecure interfaces, one of
      which connects it to the Internet, while another one is connected to DMZ
      subnet which is using private IP addresses on the net 192.168.2.0. We
      want to do the same masquerading translation for all packets going from
      internal network to the Internet as before, but do not need to translate
      packets going from the internal net to DMZ. <xref linkend="f-nat-1-2" />
      illustrates this configuration.</para>

      <para><figure id="f-nat-1-2">
          <title>Translation using only one interface of the firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-1-2.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Rule #0 in <xref linkend="f-nat-1-2" /> uses firewall's interface
      <emphasis>"eth1"</emphasis> for translation. This means that only
      packets exiting through this interface will be translated; packets
      exiting through <emphasis>"eth2"</emphasis> will keep their original
      source address on the internal net.</para>

      <note>
        <para>Interface object can be used in the NAT rules even if the
        address of this interface is obtained dynamically and is not known
        beforehand.</para>
      </note>

      <para>The rules on <xref linkend="f-nat-1" /> , <xref
      linkend="f-nat-1-1" /> and <xref linkend="f-nat-1-2" /> provide address
      translation for packets, but to permit connections to the Internet a
      special Global Policy rule is needed. This rule simply permits all
      connections from internal network to "any" and should be placed
      somewhere close to the end of the policy, for example right on top of
      "catch all and log" rule.</para>

      <para><figure id="f-nat-2">
          <title>Rule #3 permits connections from internal network to the
          Internet (this rule is part of Global Policy)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-2.png" />
            </imageobject>

            <textobject>
              <phrase>[Rule #3 permits connections from internal network to
              the Internet (this rule is part of Global Policy)]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Server behind the firewall using address of the firewall for
      access</title>

      <para>Suppose we have a network using private IP addresses behind the
      firewall, and a web server on it. We need to provide access to this
      server from the Internet in a such way that connections will be
      established to the address of the firewall. In this case we need
      destination address of packets to be rewritten so packets would reach
      the server on internal network. Just like in the previous case we need
      one NAT rule to provide translation and one Global Policy rule to permit
      connections. <xref linkend="f-nat-3" /> shows NAT rule we need:</para>

      <para><figure id="f-nat-3">
          <title>NAT rule for the server behind the firewall</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-3.png" />
            </imageobject>

            <textobject>
              <phrase>[NAT rule for the server behind the firewall]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Since we wanted to use address of the firewall's external
      interface to access the server, firewall's object is placed in "Original
      Destination" part of the rule. Server's object was placed in "Translated
      Destination" part of the rule so that original destination address of
      the packet will be replaced with server's address.</para>

      <para>Just like with masquerading rules, firewall with multiple external
      (or insecure) interfaces automatically uses all of them for this type of
      the NAT rule. Which one will actually be used for a particular packet
      depends on the routing that dictates which interface the packet enters
      the firewall through. Firewall <emphasis>"fw2"</emphasis> on <xref
      linkend="f-nat-3-1" /> has two external interfaces:
      <emphasis>"eth1"</emphasis> and <emphasis>"eth2"</emphasis>, both use
      routable IP addresses. NAT rule #1 provides translation for packets
      entering the firewall through either eth1 or eth2; in both cases
      destination address of the packet is going to be rewritten and packet
      will be sent to the server <emphasis>"hostA"</emphasis>.</para>

      <para><figure id="f-nat-3-1">
          <title>NAT rule for the server behind the firewall which has
          multiple insecure interfaces</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-3-1.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>This may not have the desired effect in certain configurations
      though. One such case is when the second insecure
      interface<emphasis>"eth2"</emphasis> of the firewall is connected to a
      DMZ subnet using private addresses. The translation is not necessary for
      the packets going from DMZ to internal net and we are avoiding it by
      using firewall's external interface <emphasis>"eth1"</emphasis> instead
      of the firewall's object in the NAT rule #1 as shown in <xref
      linkend="f-nat-3-2" />.</para>

      <para><figure id="f-nat-3-2">
          <title>NAT rule for the server behind the firewall, using interface
          object in the NAT rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-3-2.png" />
            </imageobject>

            <textobject>
              <phrase>[NAT rule for the server behind the firewall]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>As before, we also need a Global Policy rule to permit connections
      to the server. This rule is shown on <xref linkend="f-nat-4" /></para>

      <para><figure id="f-nat-4">
          <title>rule #0 permits access to the server (This rule is part of
          Global Policy)</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-4.png" />
            </imageobject>

            <textobject>
              <phrase>[rule #0 permits access to the server (This rule is part
              of Global Policy)]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para><xref linkend="f-nat-3-2" /> also illustrates how configuration
      <xref linkend="f-nat-3" /> could be combined with configuration <xref
      linkend="f-nat-1" />. Such combination allows machines on the local
      network to go out to the Internet, and at the same time users on the
      Internet can access server located on the internal network - all using
      single IP address of the firewall's external interface! This
      configuration can be useful for those with cable or DSL connection and
      single IP address.</para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Server behind the firewall using virtual address for
      access</title>

      <para>Those who have more than one IP address allocated by their ISP may
      want to configure the firewall to map extra addresses to different
      servers inside their network. This can be done using slightly different
      NAT rule.</para>

      <para>First of all, we add virtual addresses to appropriate interface of
      the firewall. See <xref linkend="creating-objects" /> and <xref
      linkend="address-object" /> for an explanation on how address can be
      added to the interface. Since our goal is to use these additional IP
      addresses for NAT, we will add them to the external interface of the
      firewall. <xref linkend="f-nat-5" /> shows firewall
      <emphasis>fw2</emphasis> with external interface
      <emphasis>eth1</emphasis> that has two IP addresses: 192.0.2.22 and
      192.2.0.44. These two addresses are represented by corresponding Address
      objects with names <emphasis>fw2:eth1(ip1)</emphasis> and
      <emphasis>fw2:eth1(ip2)</emphasis>. The choice of the name for the
      Address object is completely up to administrator, although we usually
      recommend our users choose descriptive names which can be easily
      recognized when objects are used in the policy and NAT rules.</para>

      <note>
        <para>Firewall script created by Firewall Builder adds virtual
        addresses created in the GUI to the real interfaces of the firewall
        machine. This means that you do not need to configure these virtual
        addresses in two places - in the configuration of the firewall machine
        and in the GUI. Adding them in the GUI should be sufficient. Should
        you need to remove a virtual address, you just remove it in the GUI.
        It will be removed from the interface on the firewall machine when you
        run regenerated firewall script.</para>

        <para>Firewall Builder uses appropriate command line utilities to add
        virtual addresses to interfaces depending on the OS the firewall runs
        on. For example, for the firewall running on Linux it uses
        <emphasis>/sbin/ip</emphasis> tool, while for the firewall running on
        FreeBSD or OpenBSD it uses <emphasis>ifconfig</emphasis>. Policy
        compilers that generate firewall script are aware not only of the
        names of tools that are available on the target OS, but also of the
        differences in the command line syntax specific to that OS.</para>
      </note>

      <para><figure id="f-nat-5">
          <title>Firewall has two IP addresses on its external interface
          eth1</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-5.png" />
            </imageobject>

            <textobject>
              <phrase></phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para><xref linkend="f-nat-5" /> also shows how different addresses
      assigned to the firewall's external interface can be used for different
      purposes. NAT rule #0 uses address 192.0.2.22 represented by the object
      <emphasis>fw2:eth1(ip1)</emphasis> for masquerading translation for
      machines on internal network trying to access services on the Internet.
      NAT rule #1 uses address 192.0.2.44 represented by the object
      <emphasis>fw2:eth1(ip2)</emphasis> to provide access to the server
      <emphasis>hostA</emphasis>. These two NAT rules are just like those
      explained in the previous two chapters, except they use Address objects
      instead of the Firewall or Interface objects.</para>

      <para>Finally we need a Global Policy rule to permit connections to the
      server. This rule looks exactly like that in the previous case - see
      <xref linkend="f-nat-4" /></para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Server behind the firewall with port mapping</title>

      <para>This case is similar to two previous ones, except it illustrates
      how NAT rule can help change a port number besides of the address. This
      can be useful if server behind the firewall runs on some alternative
      port, yet we want to make it so that users would access it using another
      port when connect to it. For example, one could use it to provide access
      to the web server running on non-standard port #8080 by setting up
      translation of TCP ports to the standard one #80. This configuration can
      be combined with either one of the two above, that is translation can be
      done using either firewall's external interface address or some
      different address.</para>

      <para>This kind of translation works for both TCP and UDP
      services.</para>

      <para>First of all, additional Service object needs to be created. Since
      our goal is to provide access to the web server running on TCP port
      #8080, we need to create a TCP Object with destination port equal to
      8080. The source port number does not matter in this case, therefore we
      leave source port setting at zero in our new object. We also do not need
      to set any TCP flags since we are not going to build rules matching
      those. Basically, all we need is an object that defines destination port
      8080. See <xref linkend="creating-objects" /> and <xref
      linkend="tcp-service" /> for an explanation on how create and edit TCP
      Service object. <xref linkend="f-nat-7" /> illustrates this object's
      setup.</para>

      <para><figure id="f-nat-7">
          <title>TCP Service object for port translation rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-7.png" />
            </imageobject>

            <textobject>
              <phrase>[TCP Service object for port translation rule]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Now we can create the rule, it would look just like previous
      translation rules except we put appropriate service objects in "Original
      Service" and "Translated Service" columns. see <xref
      linkend="f-nat-8" /></para>

      <para><figure id="f-nat-8">
          <title>NAT rule with port translation</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-8.png" />
            </imageobject>

            <textobject>
              <phrase>[NAT rule with port translation]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Of course we need Global Policy rule as well to permit connections
      to our server. As described in <xref linkend="policies-and-rules" />,
      Firewall Builder operates assuming policy rules are consulted after NAT.
      This means policy rule should use TCP Service object "tcp-8080" instead
      of "http". See <xref linkend="f-nat-9" /></para>

      <para><figure id="f-nat-9">
          <title>Global Policy rule which permits access to the server</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-9.png" />
            </imageobject>

            <textobject>
              <phrase>[Global Policy rule which permits access to the
              server]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Destination NAT Onto the Same Network</title>

      <para>This situation is described in iptables HOWTO <ulink
      url="http://www.netfilter.org/documentation/HOWTO//NAT-HOWTO.html">&ipt-howto;</ulink></para>

      <para>This problem occurs when machines on internal LAN try to access a
      server (let's say a web server) which is actually located on the same
      LAN and NAT'ed through the firewall for external access. If internal
      users access it by its external NAT'ed address, then they send their TCP
      packets through the firewall, which translates them and sends them to
      the server on LAN. Server, however, replies back to the clients
      directly, because they are on the same network. Since the reply has
      server's real address in the source, clients do not recognize it and
      connection can not be established.</para>

      <para>To resolve this problem you need to make NAT rule replace source
      address of the packet with address of firewall's internal interface.
      This should happen in addition to the translation of the destination
      address described in the previous chapters. If the source address of the
      packet that hits the server belongs to the firewall, the server replies
      to it; the firewall then translates again before sending the packet back
      to the client. Client sees the address it expects and connection gets
      established.</para>

      <para>Fortunately Firewall Builder supports this kind of a dual
      translation NAT rule. The rule #0 in <xref
      linkend="dnat-back-to-same-net" /> does just that: it translates both
      source and destination address of the packet.</para>

      <para>Firewall's interface <emphasis>eth0</emphasis> is internal and is
      connected to the same subnet the server <emphasis>web server</emphasis>
      belongs to. For any packet headed for any address of the firewall, TCP
      port 80, the rule #0 substitutes its source address with the address of
      interface <emphasis>eth0</emphasis> and its destination address with the
      address of <emphasis>web server</emphasis>. The packet reaches the
      server because its destination address has been changed. This also makes
      the server reply back to the firewall, which in turn provides reverse
      translation before it sends these reply packets back to client
      hosts.</para>

      <para><figure id="dnat-back-to-same-net">
          <title>DNAT back to the same LAN</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="dnat-back-to-same-net.png" />
            </imageobject>

            <textobject>
              <phrase>[DNAT back to the same LAN]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Rule in <xref linkend="dnat-back-to-same-net" /> replaces source
      address of all packets regardless of their origin. Because of this, the
      web server sees all connections as if they were coming from the firewall
      rather than from the real clients. If having real client addresses in
      the web server log is necessary, the scope of this rule can be narrowed
      by placing object representing internal network in the
      <emphasis>Original Source</emphasis>. Since the source address needs to
      be translated only in the connections coming from the internal net, dual
      translation rule should only be needed for these connections.
      Connections coming from the Internet can be translated as usual.
      Combination of rules that implement this configuration is shown in <xref
      linkend="dnat-back-to-same-net-2" />. Rule #0 does dual translation,
      while rule #1 does a simple destination address translation. Dual
      translation rule must be the first in the pair because if it weren't,
      another one would match connections coming from the internal net and
      translate destination address without changing the source address.</para>

      <para><figure id="dnat-back-to-same-net-2">
          <title>Using dual translation only for connections coming from
          internal network</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="dnat-back-to-same-net-2.png" />
            </imageobject>

            <textobject>
              <phrase>[DNAT back to the same LAN]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <note>
        <para>Not all firewall platforms provide features Firewall Builder
        needs to implement dual translation rules. Currently dual translation
        rules are supported only with iptables and OpenBSD PF.</para>
      </note>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>"No NAT" rules</title>

      <para>Sometimes we need to instruct the firewall to do NAT for certain
      connections, but not for others. In other words, we need to set up a
      rule to define an exceptions for another NAT rule. For example, suppose
      firewall <emphasis>fw3</emphasis> has three interfaces: an external
      interface <emphasis>eth1</emphasis>, internal interface
      <emphasis>eth0</emphasis> and interface <emphasis>eth2</emphasis>
      connected to a DMZ subnet. Both internal net and DMZ use private IP
      addresses. Our goal is to provide NAT for both internal net and DMZ to
      be able to establish connections to hosts out on the Internet, but
      connections between internal net and DMZ should not be translated. This
      can be achieved using a combination of rules shown in <xref
      linkend="f-nat-12" /></para>

      <para><figure id="f-nat-12">
          <title>Example of no NAT rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-12.png" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>Since both <emphasis>Translated Source</emphasis> and
      <emphasis>Translated Destination</emphasis> in the rule #0 are left
      <emphasis>Original</emphasis>, this rule says that connections from
      <emphasis>internal_net</emphasis> to <emphasis>dmz_net_1</emphasis> and
      from <emphasis>dmz_net_1</emphasis> to <emphasis>internal_net</emphasis>
      should not be translated. The rule #1 is a usual masquerading type rule
      as described in previous chapters. The order of these two rules is
      important: the <emphasis>Original destination</emphasis> in the rule #1
      is <emphasis>Any</emphasis>, which means connections from both
      <emphasis>internal_net</emphasis> and <emphasis>dmz_net_1</emphasis> to
      any host on any network should be translated. In order to exclude
      connections between <emphasis>internal_net</emphasis> and
      <emphasis>dmz_net_1</emphasis> from the rule #1, "no nat" rule #0 must
      be located above rule #1 so it would hit first.</para>

      <note>
        <para>The same effect can be achieved by using negation in the
        <emphasis>Original Destination</emphasis></para>
      </note>
    </sect1>

    <!-- ********************************************************* -->

    <sect1>
      <title>Redirecting the traffic</title>

      <para>This is a special case of NAT where packet's destination address
      gets changed to that of the firewall itself. This may be useful if you,
      for example, run transparent web proxy on the firewall box. The rule
      goes to NAT ruleset and should have firewall object in "Translated
      destination". Redirection rule may be combined with port mapping, so
      redirected packet will hit firewall on a different port.</para>

      <para>In a real policy this rule would have a specific port number in
      the "Original Service" to limit its scope to the protocol supported by
      the proxy server and will also be placed on top of other NAT rules
      dealing with the same source addresses so it would match first. <xref
      linkend="f-nat-10" /> shows redirection rule which bounces all HTTP
      connections opened by users on "internal_net" to the Squid proxy server
      running on the firewall box on port 3128.</para>

      <note>
        <para>Squid needs to be configured as a transparent proxy or it won't
        work. Please see Squid documentation and FAQ for instructions.</para>
      </note>

      <para><figure id="f-nat-10">
          <title>Redirect rule</title>

          <mediaobject>
            <imageobject>
              <imagedata align="left" fileref="nat-10.png" />
            </imageobject>

            <textobject>
              <phrase>[Redirect rule]</phrase>
            </textobject>
          </mediaobject>
        </figure></para>

      <para>Note that for this setup to work a Global Policy rule is needed to
      permit HTTP requests made by Squid. These requests will originate from
      the firewall itself.</para>
    </sect1>
  </chapter>

 

  <chapter id="Troubleshooting">
    <title>Troubleshooting</title>

    <para>This chapter provides tips for troubleshooting problems with the
    program.</para>

    <sect1>
      <title>Build and Install Startup Issues</title>

      <sect2>
        <title>When compiling from source, autogen.sh complains "libfwbuilder
        not installed"</title>

        <para>As of version 0.9.6 the code has been split into three major
        parts: API, GUI and policy compilers. You need to download, compile
        and install API for the rest to compile. The API comes in a separate
        source archive called libfwbuilder-0.10.0.tar.gz. Compile and install
        it as usual, using "./autogen.sh; make; make install"
        procedure.</para>
      </sect2>

      <sect2>
        <title>Trying to install fwbuilder RPM but I get a bunch of errors
        "Failed dependencies: ...". What do I need to do ?</title>

        <para>You need to install prerequisite libraries. See the list of RPMs
        in the appendix.</para>

        <para><remark>Note: Do not use options "--force" or "--nodeps" when
        you install fwbuilder RPMs. If rpm complains about unsatisfied
        dependencies, this means your system is missing some libraries, or
        wrong versions are installed. Forcing the package install won't fix
        that, most likely it will fail in one way or another.</remark></para>
      </sect2>
    </sect1>
    <sect1>
      <title>Program Startup Issues</title>

      <sect2>
        <title>fwbuilder binary does not start. Error "fwbuilder: cannot
        connect to X server localhost:0.0" or similar</title>

        <para>Firewall Builder GUI is an X application, that is, it needs X
        server to display it on the screen. The program determines how to
        connect to the X server using environment variable DISPLAY; you
        probably do not have this environment variable if you get an error
        like that. The simplest way to avoid this problem is to start
        fwbuilder from the shell window in Gnome or KDE environment.</para>

        <para>It may also be that the environment variable DISPLAY is set, but
        the program fwbuilder can not connect to the X server. In this
        situation you won't be able to run any application using X, check if
        that's the case by trying to start "xclock". This may be happening
        because of many different reasons, such as X server is not running, X
        authentication failure, or DISPLAY variable reassigned its value by
        the shell login script or many others. This problem falls outside the
        scope of this document, please search on the Internet for the answer.
        Here are few URLs to make troubleshooting easier:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>http://www.openssh.org/faq.html</para>
            </listitem>

            <listitem>
              <para>http://en.tldp.org/HOWTO/XDMCP-HOWTO/ssh.html</para>
            </listitem>

            <listitem>
              <para>http://en.tldp.org/LDP/intro-linux/html/sect_10_03.html</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
        <title>fwbuilder binary does not start. Error "fwbuilder: error while
        loading shared libraries: libfwbuilder.so.0: cannot load shared
        object file: no such file or directory."</title>

        <para>Then the GUI binary (fwbuilder) can not find API library
        libfwbuilder. If you are using our binary packages, then make sure you
        download and install package called libfwbuilder. If you compiled from
        sources, then perhaps you installed libfwbuilder with default prefix
        /usr/local/, therefore library went to /usr/local/lib. Dynamic linker
        ldd can not find it there.</para>

        <para>You have the following options:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>create environment variable LD_LIBRARY_PATH with value
              /usr/local/lib and run fwbuilder from this environment.</para>
            </listitem>

            <listitem>
              <para>add /usr/local/lib to the file /etc/ld.so.conf and run
              ldconfig so it will rescan dynamic libraries and add them to its
              cache.</para>
            </listitem>

            <listitem>
              <para>recompile libfwbuilder and fwbuilder with prefix /usr/,
              this will install libfwbuilder.so.0 in /usr/lib. ldd will find
              it there without any changes to environment variables or
              /etc/ld.so.conf file. To change prefix you need to run
              autogen.sh with command line parameter "--prefix=/usr". Do this
              both for libfwbuilder and fwbuilder.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>

      <sect2>
	  <title> fwbuilder binary does not start. Error "fwbuilder: error while loading shared libraries: /usr/local/lib/libfwbuilder.so.8: cannot restore segment prot after reloc: Permission denied"</title>

<para>The problem is caused by SELinux security settings, to work around it try the following command:</para>

<para><command>chcon -t texrel_shlib_t /usr/lib/libfwbuilder.so*</command></para>
	</sect2>         
    </sect1>
    <sect1>
      <title>Firewall Compiler and Other Runtime Issues</title>
      <sect2>
	<title>fwbuilder or policy compiler  crashes </title>
	<para>Please file a bug on Sourceforge. Provide information we might need to fix the problem:</para>
	<para><itemizedlist>
	  <listitem>
	    <para>what version of fwbuilder do you run, did you install pre-built binary packages or compiled it yourself ?</para>
	  </listitem>
	  <listitem>
	    <para>Provide the output of the following commands:
	    </para>
	  </listitem>
	  <listitem>
	    <para><command>
                      cat /etc/issue

                      rpm -qa | grep qt
                      rpm -qa | grep libxml
                      rpm -qa | grep libxslt

                      ldd /usr/bin/fwbuilder
                      ldd /usr/bin/fwb_ipf
                      ldd /usr/bin/fwb_iptables
                    </command>
	    </para>
	  </listitem>
	  <listitem>
	    <para>Download script "check_libs.sh" from Contrib area on our Sourceforge page and run it as follows:</para>
	    <para><command>
                check_libs.sh fwbuilder
		</command>
      include its output in your bug report
	    </para>
	  </listitem>
	  </itemizedlist></para>
<para>Also send us core file and .xml file with your objects.</para>
	</sect2>
	<sect2>
	  <title>Data file created in the older version of fwbuilder can not be loaded in the latest one</title>
	  <para>Sometimes this happens when you skip several versions trying to upgrade the program. There used to be a bug in the upgrade procedure somewhere around version 1.0.4 which broke automatic upgrades from versions before 1.0.4 to versions after that. If this happens to you, upgrade your data file using script fwb-upgrade.sh that you can find in Contrib/Scripts area on our SourceForge site.</para>
	</sect2>
      <sect2>
	<title>Firewall policy does not compile. Error "Exec error (fwb_iptables) No such file or directory."</title>
<para>You need to install corresponding policy compiler. Our pre-built compilers come in a separate RPMs named like this: fwbuilder-ipt-2.0.2-1rh9.i386.rpm</para>
      </sect2>
      <sect2>
	<title>"I/O Error" while compiling policy. There is no other indication of error though.</title>
	<para>Did you install package with corresponding compiler ? Our pre-built compilers come in a separate RPMs named like this: fwbuilder-ipt-2.0.2-1rh9.i386.rpm</para>

<para>Check if compiler dumped core. If you can't find it, you may try to run compiler manually, providing the following command line parameters:</para>

<para><command>$ fwb_ipt  -f path_to_objects.xml   firewall_object_name</command></para> 
<para>All policy compilers have the same command line format.</para>
      </sect2>
      <sect2>
	<title>When I run fwbuilder I get the following message: "QSplitter::setProperty( "handleWidth", value ) failed: property invalid, read-only or does not exist"</title>
	<para>
This is a warning that appears because the version of QT on your machine is older than what was used to generate fwbuilder GUI. This warning is harmless and can be ignored.</para>
      </sect2>
      <sect2>
	<title> Policy compiler stops with an error ios_base::failbit set on Windows</title>

	<para>It looks something like this:</para>
	<screen>
---------------------------------------
fwb_ipfw -f C:/Documents and Settings/User/data.fwb -d C:/Documents
and Settings/User -r C:\FWBuilder\resources fw

 Compiling policy for fw ...
  Detecting rule shadowing
 Begin processing
 Policy compiled successfully 
ios_base::failbit set
------------------------------------------
        </screen>
	<para>First of all, check available free disk space. Also check if the output file ( fw.fw ) is opened in another program while compiler is running. That is, if you looked at it after the previous compiler run and opened it in Notepad, it becomes locked and compiler won't be able to overwrite it with the new copy until you close Notepad.</para>
      </sect2>
      <sect2>
	<title>Policy compiler stops processing rules with error message "Cannot create virtual address NN.NN.NN.NN"</title>
	<para>This happens when you are using an option "Create virtual addresses for NAT rules". The problem is that policy compiler needs to be able to determine interface of the firewall to assign virtual address to. In order to do that it scans all interfaces trying to find subnet requested NAT address is on. Sometimes firewall's interface has an address which belongs to a different network than NAT address specified in the rule; in this case compiler can not identify an interface and aborts.</para>

	<para>The NAT rule still can be built without "-i" or "-o" option, but automatic assignment of virtual address is impossible. You need to turn off option "Create virtual addresses for NAT rules" in the tab "Firewall" of firewall dialog and configure this address manually. </para>
      </sect2>
    </sect1>
    <sect1>
      <title>Running the Firewall Script</title>
      <sect2>
	<title>I get some error when I run generates script, how can I figure out which rule causes this error?</title>

	<para>You can turn debugging on (look for a checkbox in the tab "Firewall" in firewall dialog). This simple generates firewall script with shell option "-x" so it will print all commands while executing. This way you can see which command causes the error and trace it back to the policy rule.</para>
      </sect2>
      <sect2>
	<title> (Linux / iptables only) I've generated script for iptables firewall using Firewall Builder, but when I run it I get an error "ip: command not found". What is this command for and what package should I install?</title>
	<para>This tool is part of the package 'iproute'; we use it to manage virtual IP addresses needed for some NAT rules.</para>
      </sect2>
      <sect2>
	<title> I get the following error when I run generated script for iptables firewall: "iptables v1.2.8: can't initialize iptables table 'drop': Table does not exits (do you need to insmod?) Perhaps iptables or your kernel needs to be upgraded."</title>

	<para>You get this error because you used option "Log all dropped packets" (there is a checkbox in the 'Firewall' tab). This option requires "dropped" patch from patch-o-matic. You either need to turn this option off, or apply corresponding patch and recompile both kernel modules and command-line utilities for iptables.</para>
      </sect2>
      <sect2>
	<title>You are trying to execute iptables script generated by fwbuilder but get an error message "Interface eth0 does not exist" or similar.</title>

	<para>There are several conditions that may cause this error.</para>

	<para>The script generated by fwbuilder uses tool /sbin/ip to verify configuration of the firewall interfaces and make sure that interfaces of the real firewall machine correspond to the interface objects created in the GUI. You may get this error if the tool /sbin/ip is not installed on your system. All modern Linux distributions come with the package iproute2 which includes /sbin/ip; check if iproute2 is installed and /sbin/ip exists.</para>

	<para>Another case when you may encounter this error is when firewall script is executed prematurely during the boot sequence and interface really does not exist at that time. For example, interface ppp0 is created only when the system is configured for PPP and daemon pppd is running. If firewall script is activated before the daemon started during the boot sequence, interface ppp0 is not there yet, which leads to this error. Make sure you start firewall script after all interfaces has been initialized.</para>
      </sect2>
      <sect2>
	<title>My firewall has virtual interface eth0:1. In fwbuilder I added the interface, however, when I want to apply the new rules I get the error "Interface eth0:1 does not exist"</title>

	<para>eth0:1 is not a real interface on Linux, it is just a label for a second IP address of the interface eth0. One way to solve this is not to create it in the OS (remove file /etc/sysconfig/network-scripts/ifcfg-eth0:1 and restart networking), but rather add its IP address in the Firewall Builder GUI as a second address to interface eth0.</para>

	<para>In any case you should not add interface "eth0:1" in fwbuilder because it really does not exist. Iptables will not recognize this interface either, so even if fwbuilder let you use it, you would get an error from iptables. You see "eth0:1" in the output of ifconfig only because ifconfig has been modified on Linux to show virtual IP addresses as pseudo-interfaces. The command "ip addr show" will reveal that the eth0:1 is really a label on the second IP address of eth0.</para>
      </sect2>
      <sect2>
	<title>Generated script fails to load module nf_conntrack when it is executed on the firewall</title>

	<para>This problem is specific to iptables. The answer below has been written in September 2006, most likely the situation and relevant recommendations are going to change in the future as module nf_conntrack matures and gets wider deployment.</para>

	<para>Here is an example of an error message:</para>
	<screen>
FATAL: Error inserting nf_conntrack_ipv4
(/lib/modules/2.6.13-15.11-default/kernel/net/ipv4/netfilter/nf_conntrack_ipv4.ko):
Device or resource busy
        </screen>

	<para>Here is the <ulink url="http://www.netfilter.org/projects/patch-o-matic/pom-extra.html#pom-extra-nf_conntrack"><citetitle>link</citetitle></ulink> to the nf_conntrack page in patch-o-matic catalog. Here is the <ulink url="http://lists.netfilter.org/pipermail/netfilter-devel/2006-July/024879.html"><citetitle>link</citetitle></ulink> to the discussion on netfilter-devel mailing list.</para>

	<para>It appears you can load either ip_conntrack or nf_conntrack but not both at the same time since nf_conntrack is a replacement for ip_conntrack. As of this writing, nf_conntrack does not support NAT just yet and is marked as having status "TESTING" on the patch-o-matic catalog page.</para>

	<para>This actually represent a problem for fwbuilder. I would like to avoid having to write extensive GUI to let user choose which modules they want to load. One of the reasons is that the GUI may be working on one machine, while generated firewall script will be executed on another. In this situation the GUI can not determine which modules are available on the firewall. Currently generated script simply tries to load all modules but it aborts if it detects an error in the command that does it (modprobe).</para>

	<para>Until better solution is found, you would probably need to remove module that conflicts with others or disable feature that makes generated script load modules and write your own script to load modules you need. You can for example add commands to load modules explicitly to the "prolog" section of the generated script.</para>
      </sect2>
    </sect1>
    <sect1>
      <title>Using RCS</title>
      <sect2>
	<title>I can not open my data file, I get error "Error checking file out: co: RCS file c:/fwbuilder/RCS/file.fwb is in use"</title>

	<para>A catastrophe (e.g. a system crash) can cause RCS to leave behind a semaphore file that causes later invocations of RCS to claim that the RCS file is in use. To fix this, remove the semaphore file. A semaphore file name typically begins with , or ends with _.</para>

	<para>If not that, then it could be another manifestation of bug #1908351</para>

	<para>See if there is a file with the name starting and ending with a comma in the RCS directory (like ",file.fwb,"). The file should have length of zero bytes. This file is a lock file, it is created and deleted by RCS tools. Bug 1908351 caused this lock file to be left behind. When that happens, ci won't check file in because it thinks another copy of ci is already running. Likewise, co won't check the file out for the same reason. If such file exists (zero bytes in length and name starting or ending with a comma), just delete it and try to check your data file out again.</para>
      </sect2>
      <sect2>
	<title>I can not open my data file, I get error "Error checking file out:"</title>

	<para>Such non-descriptive error message is usually caused by hard unrecoverable errors experienced by RCS tools. Unfortunately these tools not always report errors in the best way possible and when this happens, Firewall Builder GUI can not provide any better diagnostics than it gets from the tool. Such poor diagnostics of errors happens more frequently on Windows than on other platforms.</para>

	<para>Here are few things to check and try:</para>
	<itemizedlist>
	  <listitem><para>First of all, check file permissions. The data file (.fwb) should be read-only. RCS repository file (.fwb,v) should also be read-only. Repository file may be located in subdirectory RCS but that depends on the OS. It may be located in the same directory with corresponding data file (.fwb) as well.</para></listitem>
	  <listitem><para>Try to check the file out manually to see if you can get better diagnostics:</para>
	  <para>If you use Windows, start MSDOS window and in it navigate to the folder where you keep your files, then execute the following command:</para>
	  <screen>c:\FWBuilder\co.exe -l filename.fwb</screen>
	  <para>If it checks the file out successfully, it just prints revision number and 'done'. Otherwise it will print some error.</para>
	  <para>After you do that, you need to check the file in to RCS again. Do it like this:</para>
	  <screen>c:\FWBuilder\ci.exe -u filename.fwb</screen>
	  <para>Since the file hasn't changed, it should just check it in without asking you for the RCS log record. If you can successfully check it out and then check it in again from the command line, then the GUI should work too.</para>
	  <para>On Linux, *BSD and Mac OS X the process is exactly the same, except for the path to the checkout and checkin commands:</para>

	  <para>To check the file out use</para>
	  <screen>co -l filename.fwb</screen>
	  <para>
      To check the file in use
	  </para>
	  <screen>ci -u filename.fwb</screen>
	  </listitem>
	</itemizedlist>
      </sect2>
    </sect1>
    <sect1>
      <title>Internet Access Issues</title>

      <sect2>
        <title>Can access most web sites through the firewall just fine,
        except for a few.</title>

        <para>The browser would state "waiting for www.somesite.com" for a
        while and then time out when you connect to one of these sites.</para>

        <para>This might be caused by a MTU problem if you are on a DSL
        connection using PPPoE. Here are couple of useful pages that describe
        the problem in details:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>http://www.dslreports.com/tweaks/MTU</para>
            </listitem>

            <listitem>
              <para>http://www.internetweekly.org/llarrow/mtumss.html</para>
            </listitem>
          </itemizedlist></para>

        <para>If your firewall runs iptables you can use option "Clamp MSS to
        MTU" in the firewall settings dialog to work around it.</para>

        <para>For the PF firewalls similar option is called "Enforce maximum
        MSS" and is located in the "Scrub rule options" tab of firewall
        settings dialog. It allows for setting MSS value of TCP sessions
        opened through the firewall; try values between 1460 or 1464 (1464 is
        the maximum MSS value that can be used on PPPoE connections without
        fragmentation).</para>

        <para>There is no way to change MSS value on the ipf, ipfw and pix
        firewalls. If your firewall is one of these, you may need to change
        MTU on your workstation. See links above for recommendations on how to
        do it.</para>
      </sect2>

      <sect2>
        <title>I compiled and activated firewall policy, but workstations
        behind the firewall still can not access the Internet.</title>

        <para>Here are few troubleshooting steps:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Make sure you compiled, then installed and activated
              firewall policy. Were there any errors during compile and
              activation?</para>
            </listitem>

            <listitem>
              <para>check if ip forwarding is turned on (pull down menu in the
              "Network" tab of the firewall object dialog).</para>
            </listitem>

            <listitem>
              <para>try to ping hosts on the Internet by their IP address, not
              their name. This helps isolate DNS problems. If you can ping by
              address but can't ping by name, then you need to add policy
              rules to permit DNS queries.</para>
            </listitem>

            <listitem>
              <para>Look in firewall's log for records indicating that it
              drops packets. Error in the policy design can cause it to block
              connections that you really want to go through.</para>
            </listitem>

            <listitem>
              <para>Use option "Log everything" to make all rules generate log
              entries, this sometimes helps pinpoint a rule that drops
              packets.</para>
            </listitem>
          </itemizedlist></para>

        <para>Things to check in the policy:</para>

        <para><itemizedlist spacing="compact">
            <listitem>
              <para>Check if you have a NAT rule if your protected network is
              using "private" IP addresses.</para>
            </listitem>

            <listitem>
              <para>If the NAT rule is there, then you may need to add a
              policy rule to actually permit connections from the protect
              network.</para>
            </listitem>

            <listitem>
              <para>In case when NAT is not used, check if the routing is
              configured properly. If your firewall separates subnets A and B,
              and you are trying to connect from the host on subnet A to the
              host on subnet B, then both hosts should have routing to the
              opposite network. Host on the net A needs a route for the net B,
              pointing at the firewall. Similarly, host on the net B needs a
              route for the net A, also pointing at the firewall. If one (or
              both) host has a default route pointing at the firewall, then it
              won't need a special route for another network.</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>
  </chapter>

 <!-- ############################################################### -->

  <appendix id="compile-from-source">
    <title>Compiling Firewall Builder from Source</title>

    <para>Pre-built binary packages for many OS's and distributions can be
    downloaded from the Firewall Builder website: &fwbuilder-url;</para>

          <para>Firewall Builder can be compiled and works on the following OS and distributions:</para>

    <para><itemizedlist spacing="compact">
        <listitem>
          <para>Debian Linux (including Ubuntu)</para>
        </listitem>

        <listitem>
          <para>Mandrake Linux</para>
        </listitem>

        <listitem>
          <para>RedHat Linux</para>
        </listitem>

        <listitem>
          <para>SuSE Linux</para>
        </listitem>

        <listitem>
          <para>Gentoo Linux</para>
        </listitem>

        <listitem>
          <para>FreeBSD</para>
        </listitem>

        <listitem>
          <para>OpenBSD</para>
        </listitem>

        <listitem>
          <para>Mac OS X</para>
        </listitem>

        <listitem>
          <para>Solaris</para>
        </listitem>
      </itemizedlist></para>

      <para>To compile from source, download source archives from SourceForge (libfwbuilder-3.0.0.tar.gz and fwbuilder-3.0.0.tar.gz) and unpack them somewhere. Then build as follows:</para>
<screen>
cd libfwbuilder-&lt;version_number&gt;
./autogen.sh
make
make install

cd /fwbuilder-&lt;version_number&gt;
./autogen.sh
make
make install
</screen> 

    <note><title>Compilation may require other packages for RedHat and SuSE</title>

    <para>You may need to install packages elfutils-libelf and elfutils-libelf-devel (libelf on SuSE), otherwise libfwbuilder won't pick up net-snmp library even if it is installed.</para>

    <para>If you get errors that refer to missing autoconf macros while running autogen.sh for fwbuilder, check if your system has RPM gettext-devel. You may need to add other "development" RPMs besides these, but these two are often forgotten.</para>
    </note>

      <para>The configure scripts for both libfwbuilder and fwbuilder tries to find your QT4 installation in several more-or-less standard places. However, if you installed QT in a directory where the script can't find it, you can provide the path to it using the <parameter>--with-qtdir</parameter> option to script autogen.sh. This looks as follows:</para>

<screen>
cd libfwbuilder-&lt;version_number&gt;
./autogen.sh --with-qtdir=/opt/qt4
make
make install
      
cd /fwbuilder-&lt;version_number&gt;
./autogen.sh --with-qtdir=/opt/qt4
make
make install
</screen>           

      <para>By default script configure assumes prefix="/usr/local" and installs libfwbuilder libraries in /usr/local/lib and binaries in /usr/local/bin. Make sure /usr/local/lib is added to your LD_LIBRARY_PATH environment variable or to the /etc/ld.so.conf configuration file, otherwise the program won't find dynamic libraries there. Likewise, /usr/local/bin needs to be in your PATH.</para>

      <para>You can install libraries and binaries in a different place by specifying new prefix as follows:</para>
<screen>
./autogen.sh --prefix="/opt"
</screen>

      <para>This will install libraries in <filename class='directory'>/opt/lib</filename> and the program in <filename class='directory'>/opt/bin</filename>.</para> 

  </appendix>
</book>
