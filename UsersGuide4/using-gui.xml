<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <chapter id="using-gui">
    <title>Firewall Builder GUI</title>

    <para>The Firewall Builder GUI is your workspace for creating and compiling your firewall policy. In it, you will create objects (logical representations of your servers, network services, subnetworks, and other aspects of your network), then use those objects in your policy.</para>

<para>You'll then use Firewall Builder to compile your policy for your target firewall platform, and, if you like, to deploy the policy to the actual firewall.</para>

<para>This chapter provides a high-level overview of the Firewall Builder GUI and how it works. Later chapters describe using the GUI to accomplish specific tasks.</para>

<para>The Firewall Builder GUI consists of a main window and some dialog boxes. In the next section, we describe the main window.</para>

    <sect1 id="main_window">
      <title>The Main Window</title>

      <para>This image shows the Firewall Builder GUI with a single object file open. The panels in the GUI have been shrunk down to make the image fit on the page. On a computer screen, you'd be able to see much more.</para>

      <para>
      <figure id="main-win1">
        <title>The main window</title>
        <graphic scale="50" fileref="fwbMainWindow-wUndo.png" />
      </figure>
      </para>

      <para>The sections of the main window are as follows:</para>

      <table frame='none' tabstyle='reg_table'><title>Main Window</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Window area</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Menus and tool bar</entry>
		<entry>Firewall Builder comes
                with menus and a tool bar at the top of the
                window. 
      <para>
        <figure id="main-win-menus">
          <title>Menu and Tool Bars</title>
          <graphic scale="50" fileref="fwbMainWindow-3.png" />
        </figure>
      </para>
		</entry>
	      </row>
	      <row>
		<entry>Object Tree</entry>
		<entry><para>Displayed on the
                left side of the window, holds firewall, host,
                interface, service, and other "objects" that you will
                use when creating your firewall. You can close the tree if you want more room for your policy by clicking the X button (re-open it using the <guimenu>View</guimenu> menu, or you can make it "float" as 
                its own window by clicking the float button next to the close button.</para>
		<para><xref linkend="object_tree" /> describes the objects in the tree, shows a picture of the object tree "floating", and shows how to filter the object tree.</para>
      <para>
        <figure id="object-tree-small">
          <title>Object Tree</title>
          <graphic scale="50" fileref="object-tree-small.png" />
        </figure>
      </para>
		</entry>
	      </row>
	      <row>
		<entry>Policy Ruleset Workspace</entry>
		<entry>Displayed to the right of the object tree, this area holds the ruleset you're currently working on. This space is blank when you first load an object file. It only appears when you double-click a policy, NAT, or routing ruleset link in a firewall object. (So, you have to create a firewall object before you can work on a policy.)
      <para>See <xref linkend="firewall-object" /> for instructions on creating a firewall object. See <xref linkend="firewall-policies" /> for instructions on working with policies.</para>
	<para>The two buttons on the top of the ruleset let you compile (the hammer) or compile-and-install (arrow and wall) the current firewall policy. <xref linkend="compile-install-policy" /> describes both compiling and compiling-and-installing a firewall policy.</para>
      <para>
        <figure id="policy-small">
          <title>Policy Area</title>
          <graphic scale="50" fileref="policy-small.png" />
        </figure>
      </para>
		</entry>
	      </row>
	      <row>
		<entry>Object Editor Dialog</entry>
		<entry><para>The dialog area, across the bottom of the main window, 
                is where you make changes to object
                parameters, do finds-and-replaces, and see the output from single-rule compiles. 
                The dialog area, which is not visible at
                first, appears when you double-click an object.</para>
                <para>The dialog, which you can close by clicking the X, has three tabs and three uses: editing an object's parameters, doing a find or find-and-replace on an object, and displaying the output of a single-rule compile run.</para>
		<para>In the object editor dialog, you can make changes to an object's parameters. Changes made in to a field in the dialog are saved whenever you click out of the field, or press the Tab or Enter key. (This does not change the data in the .fwb file until you save the file itself.) If you wish to cancel a change, select Edit > Undo.See <xref linkend="working-with-objects" />for information on objects and their parameters.</para>
      <para>
        <figure id="object-editor-small">
          <title>Object Editor, partial view</title>
          <graphic scale="50" fileref="object-editor-small.png" />
        </figure>
      </para>
	<para> You can search for objects and rulesets across your object files, plus do replacements of objects. See <xref linkend="find-replace" /> for an explanation of the 
                find-and-replace tab.</para>
      <para>
        <figure id="find-small">
          <title>Find-and-Replace Object dialog, partial view</title>
          <graphic scale="50" fileref="find-small.png" />
        </figure>
      </para>
 	<para>You can compile individual rules and see how the rule gets converted into firewall instructions. See <xref linkend="policy-and-nat-rules-for-the-cluster" /> for 
                details on compiling a single rule and viewing the results in the Output tab.</para>
      <para>
        <figure id="output-small">
          <title>Output view, partial view</title>
          <graphic scale="50" fileref="output-small.png" />
        </figure>
      </para>
		</entry>
	      </row>
	      <row>
		<entry>Undo Stack</entry>
		<entry><para>Displayed on the
                right side of the window, the Undo Stack is not displayed by default. To activate it, select <guimenuitem>View > Undo Stack</guimenuitem>.</para>
		<para>As you make changes to your object file, those changes show up in the <guilabel>Undo Stack</guilabel> window. You can "undo" an action by clicking the action above it (in other words, prior to it) in the window. Clicking any action in the window rolls back all changes after that action. However, the "future" changes stay in the Undo Stack until you make another edit. At that point, all changes after the current point in the stack are removed.</para>
		<para>Like the object tree, the Undo Stack can "float" as its own window.</para>
      <para>See <xref linkend="using-undo" /> for a more detailed explanation of the Undo Stack window.</para>
      <para>
        <figure id="undo-stack">
          <title>Undo Stack</title>
          <graphic scale="50" fileref="undo-stack.png" />
        </figure>
      </para>
		</entry>
	      </row>

	  </tbody>
	</tgroup>
      </table>

      <para>You can open more than one object file window at a
      time, and you can copy objects between them. See <xref linkend="multiple-data-files" /> for an
      example of working with multiple data files.</para>
      </sect1>

      <sect1 id="gui-menus">
	<title>GUI Menu and Tool Bars</title>

     <para>This section describes the commands available in the GUI menus and tool bar.</para>
	<sect2 id="file-menu">
	<title>File menu</title>
      <para>The <guimenu>File</guimenu> menu provides the same file
      management options found in most GUIs, plus it lets you import
      and export libraries and manage your object files with the
      revision control system.</para>

      <table frame='none' tabstyle='reg_table'>
        <title>File Menu</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colnum="1" colname="c1"  colwidth="120pt"/>
	  <colspec colnum="2" colname="c2"  />
	    <thead>
	      <row>
		<entry>File Menu entry</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>New Object File</entry>
		<entry>Opens a "file" dialog that lets you name your
		new object file. Object file names end with
		".fwb". In general, you should create a new directory
		for your object files.</entry>
	      </row>
	      <row>
		<entry>Open...</entry>
		<entry>Opens a standard "file" dialog that lets you
		select an existing file. The file dialog, by default,
		only looks for files that end in ".fwb".</entry>
	      </row>
	      <row>
		<entry>Open Recent</entry>
		<entry>Contains a sub-menu listing recently opened object files.</entry>
	      </row>
	      <row>
		<entry>Save</entry>
		<entry>Saves the current file.</entry>
	      </row>
	      <row>
		<entry>Save As...</entry>
		<entry>Opens a "file" dialog that lets you save the object file under a new name.</entry>
	      </row>
	      <row>
		<entry>Close</entry>
		<entry>Closes the current object file, but does not exit the program.</entry>
	      </row>
	      <row>
		<entry>Properties</entry>
		<entry>Opens a dialog indicating properties of the
		current file, including revision control information
		(if applicable.) (Program preferences are in the Edit
		menu.)</entry>
	      </row>
	      <row>
		<entry>Add File to RCS</entry>
		<entry>This menu item adds the object file to
		reversion control. See <xref linkend="rcs" /> for a
		detailed explanation.</entry>
	      </row>
	      <row>
		<entry>Commit</entry>
		<entry>Commits current changes to RCS. (This option is
		grayed out if the file has not already been added to
		RCS.)  See <xref linkend="rcs" /> for a detailed
		explanation.</entry>
	      </row>
	      <row>
		<entry>Discard</entry>
		<entry>Discards current changes. (This option is
		grayed out if the file has not already been added to
		RCS.)  See <xref linkend="rcs" /> for a detailed
		explanation.</entry>
	      </row>
	      <row>
		<entry>Import Policy</entry>
		<entry>Allows you to import an existing policy into Firewall Builder. See <xref linkend="policy-importer" /> for a detailed explanation.</entry>
	      </row>
	      <row>
		<entry>Import Library</entry>
		<entry>Lets you import an Object Library. (See <guimenuitem>Export Library</guimenuitem>.)</entry>
	      </row>
	      <row>
		<entry>Export Library</entry>
		<entry>Brings up a dialog that lets you select which
		Object Library you wish to export to a ".fwl"
		file. Once exported, you can import it into another
		instantiation of Firewall Builder. This is
		particularly useful in Enterprise settings that have
		multiple Firewall Builder workstations and
		administrators.</entry>
	      </row>
	      <row>
		<entry>Print</entry>
		<entry>Lets you print your policy.</entry>
	      </row>
	      <row>
		<entry>Exit</entry>
		<entry>Closes Firewall Builder.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>
	</sect2>
	<sect2 id="edit-menu">
	<title>Edit menu</title>
      <para>The <guimenu>Edit</guimenu> options are self-explanatory
      if you're familiar with GUI-based tools. <guimenuitem>Preferences</guimenuitem> 
      for Firewall Builder are described in <xref linkend="preferences" />.</para>

	</sect2>
	<sect2 id="view-menu">
	<title>View menu</title>
      <para>The <guimenu>View</guimenu> menu lets you turn on or off various display panes.</para>

      <table frame='none' tabstyle='reg_table'>
        <title>View menu</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>View Menu entry</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Object Tree</entry>
		<entry>If checked, the object tree is displayed</entry>
	      </row>
	      <row>
		<entry>Editor Panel</entry>
		<entry>Displays the object editor. You can also display this panel by double-clicking on an object.</entry>
	      </row>
	      <row>
		<entry>Undo Stack</entry>
		<entry>Displays the undo history. You can undo several changes by clicking on the last change you want to keep. With the next change, all changes after the current one are removed from the undo history.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>
	</sect2>
	<sect2 id="object-menu">
	<title>Object menu</title>
      <para>The <guimenu>Object</guimenu> menu lets you create a new
      object, find occurrences of an object (including doing
      replaces), lock an object to prevent accidentally changes, and
      unlock an object when you need to edit it.</para>

      <table frame='none' tabstyle='reg_table'>
        <title>Object menu</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Object Menu entry</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>New Object</entry>
		<entry>Opens a menu of all possible object
		types. Select one to create a new object of that
		type. <xref linkend="creating-objects" /> describes
		how to create objects.</entry>
	      </row>
	      <row>
		<entry>Find Object</entry>
		<entry>Opens the <guilabel>Find object</guilabel>
		dialog, which also provides search-and-replace
		functions. <xref linkend="find-replace" /> explains
		how to use this dialog.</entry>
	      </row>
	      <row>
		<entry>Lock</entry>
		<entry>Makes the selected object read-only, which
		prevents accidental modification. An object that is
		locked has a little padlock for its icon. In this
		example, the eth0 interface of test server is
		locked. Locking the eth0 interface object also renders
		read-only the address objects associated with the
		interface. (test server, because it is "above" eth0 in
		the hierarchy, is still editable.)
      <para>
      <figure id="locked-icon">
        <title>locked object</title>
        <graphic scale="70" fileref="locked.png" />
      </figure>
      </para>
                </entry>
	      </row>
	      <row>
		<entry>Unlock</entry>
		<entry>Unlocks the selected object. The object becomes
		editable, and the objects associated with it become
		editable as well, unless they have their own
		locks.
      <para>
      <figure id="unlocked-icon">
        <title>unlocked object</title>
        <graphic scale="70" fileref="unlocked.png" />
      </figure>
      </para>
                </entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>
	</sect2>
	<sect2 id="rules-menu">
	<title>Rules menu</title>
      <para>The <guimenu>Rules</guimenu> menu lets you add, delete, and
      rearrange rules and rule groups in a policy. In addition, it lets you 
      compile an individual rule or an entire policy, and it lets you  
      install an entire policy. The menu is context sensitive, so not all 
      options are visible at all times. See <xref linkend="editing-policy-and-nat" /> 
      for details.</para>
	</sect2>
	<sect2 id="tools-menu">
	<title>Tools menu</title>
     <para>The <guimenu>Tools</guimenu> menu provides access to useful
     tools.</para>

     <table frame='none' tabstyle='reg_table'>
       <title>Tools menu</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Tools Menu entry</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Find Conflicting Objects In Two Files</entry>
		<entry>Launches a tool that lets you specify two
		object files (.fwb) or two library files (.fwl). The
		tool then looks for objects that have the same ID, but
		different characteristics. Such a conflict would cause
		a problem if you wanted to merge the files.</entry>
	      </row>
	      <row>
		<entry>Discovery Druid</entry>
		<entry>Launches a wizard that lets you populate many
		objects automatically via an SNMP crawl, via an
		existing "hosts" file, or via the import of an
		existing firewall policy. 
		<xref linkend="network-discovery" /> explains the
		tool.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>
	</sect2>
	<sect2 id="window-menu">
	<title>Window menu</title>
      <para>The <guimenu>Window</guimenu> menu provides controls for
      selecting and rearranging object file windows. It works
      similarly to Window menus in most GUIs.</para>
	</sect2>
	<sect2 id="help-menu">
	<title>Help menu</title>
      <para>The <guimenu>Help</guimenu> provides access to help
      resources, information about the current version of Firewall
      Builder, and a dialog with debugging information.</para>
	</sect2>
	<sect2 id="object-context-menu">
	<title>Object Context menu</title>
      <para>The <guimenu>Context Menu</guimenu> for a particular object provides a short-cut to menu commands for that object. Right-click an object's label to bring up a
      menu of the following functions:</para>

      <table frame='none' tabstyle='reg_table'>
        <title>Object Right-Click Menu</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Right-Click Menu Entry</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Edit</entry>
		<entry>Opens the Editor dialog for that object. (You can
		get the same result by double-clicking the
		object.)</entry>
	      </row>
	      <row>
		<entry>Duplicate</entry>
		<entry>Places a copy of the object into the specified
            library. (If no user-created libraries exist, then
            Firewall Builder puts the object in the User tree by
            default.) The new object has the same name as the original
            object, unless that object name is already in use in that
            tree. If so, a "-1" is appended to the object
            name.</entry>
	      </row>
	      <row>
		<entry>Copy</entry>
		<entry>Copies an object onto the clipboard.</entry>
	      </row>
	      <row>
		<entry>Cut</entry>
		<entry>Copies an object onto the clipboard and removes it from
            the tree.</entry>
	      </row>
	      <row>
		<entry>Paste</entry>
		<entry>Puts a copy of the object on the clipboard into
		a tree or into the policy, depending on where the
		mouse is when you click.</entry>
	      </row>
	      <row>
		<entry>Delete</entry>
		<entry>Deletes an object without making a copy on the
            clipboard. If the Deleted Objects tree has been turned on, the object shows up there.</entry>
	      </row>
	      <row>
		<entry>Find</entry>
		<entry><para>Brings up a Find/Find-and-Replace
		panel, which is another tab in the object dialog. 
                Click <guibutton>Next</guibutton> in the panel
		to see all instances of the object boxed in
		red.</para>
		<para>To do a Search and Replace, drag another object
		into the <guilabel>Replace object</guilabel> box,
		specify a scope for the replacement using the
		pull-down menu, and then use the <guibutton>Replace
		All</guibutton>, <guibutton>Replace</guibutton>, <guibutton>Replace
		&amp; Find</guibutton>,
		and <guibutton>Next</guibutton> buttons.</para>
		<para><xref linkend="find-replace" /> has details on this
		dialog.</para></entry>
	      </row>
	      <row>
		<entry>Used Where</entry>
		<entry>Scans the whole tree, including all groups and policies
            of all firewalls, looking for references to the object. In
            the end the program shows a pop-up dialog with icons corresponding
            to groups and firewalls that use the object. Double-clicking
            an icon opens the corresponding object in the main
            window.</entry>
	      </row>
	      <row>
		<entry>Lock and Unlock</entry>
		<entry>Lock makes an object read-only, which prevents
		accidental modification. Unlock puts the object back
		into read/write mode.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>The pop-up menu can also have items to add interface and
      address objects, depending on what type of object was clicked
      on.</para>

      <para>In addition, the right-click context menu on policy rules has a selection for <guimenuitem>Compile Rule</guimenuitem>. Selecting this compiles the rule and shows you the output in the <guilabel>Output</guilabel> tab of the Editor dialog. See 
                <xref linkend="policy-and-nat-rules-for-the-cluster" /> for 
                details on compiling a single rule and viewing the results in the Output tab.</para>
	</sect2>
	<sect2 id="tool-bar-menu">
	<title>Tool Bar</title>
      <para>The Tool Bar has buttons for commonly used
      functions:</para>

      <para>
      <figure id="main-buttons">
        <title>Buttons</title>
        <graphic scale="50" fileref="fwbMainWindow-3.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'>
       <title>Tool Bar</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Button</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Open</entry>
		<entry>Opens a standard "file" dialog that lets you
		select an existing file. The file dialog, by default,
		only looks for files that end in ".fwb".</entry>
	      </row>
	      <row>
		<entry>Save</entry>
		<entry>Saves the current file.</entry>
	      </row>
	      <row>
		<entry>Find</entry>
		<entry>Opens the <guilabel>Find object</guilabel>
		dialog, which also provides search-and-replace
		functions.  <xref linkend="find-replace" /> explains
		how to use this dialog.</entry>
	      </row>
	      <row>
		<entry>Compile</entry>
		<entry>Opens the compile
		wizard for all firewalls in the current object file. The compile button on an individual file opens the compile dialog for just the selected firewall. <xref linkend="compile-install-policy" />
		explains this in more detail.</entry>
	      </row>
	      <row>
		<entry>Install</entry>
		<entry>Opens the compile/install
		wizard for all firewalls in the current object file. The compile/install button on an individual file opens the compile/install dialog for just the selected firewall. <xref linkend="compile-install-policy" />
		explains this in more detail.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>
	</sect2>
    </sect1>

    <sect1 id="object_tree">
    <title>Object Tree</title>

      <para>
    <figure id="tree-structure">
      <title>Object Tree Structure</title>
      <graphic scale="50" fileref="fwbMainWindow-4.png" />
    </figure>
      </para>

      <para>The object tree stores all objects in a predefined
      hierarchy.  Types that correspond to network objects (hosts,
      address ranges, networks and groups of these) are located in
      the <guilabel>Objects</guilabel> branch, types that correspond
      to services are in the <guilabel>Services</guilabel> branch,
      time intervals are in the <guilabel>Time</guilabel> branch, and
      all firewalls are in the
      <guilabel>Firewalls</guilabel> branch. Newly created objects are
      automatically placed in the appropriate position in the
      tree. Each branch of the tree is automatically sorted by the
      object name.</para>

      <para>The program has three default libraries: User, Standard,
      and Deleted Objects. (Deleted Objects must be turned on
      in <guimenuitem>File>Preferences>Objects>Show deleted
      objects</guimenuitem>. <guilabel>User</guilabel> holds objects
      that you define, including objects for your firewall, hosts, and
      networks. <guilabel>Standard</guilabel> holds a collection of
      standard objects that come with the program,
      and <guilabel>Deleted Objects</guilabel> acts like a trash can
      or recycle bin for user objects you delete. In addition, you can
      create tailored libraries by selecting <guimenuitem>New
      Library</guimenuitem> from the <guimenu>New Object</guimenu>
      menu and populating it by copy-and-pasting objects from one of
      the other views (or creating them there from
      scratch). <xref linkend="new-library" /> has instructions for
      creating and distributing user-defined libraries.</para>

      <para>Functionally, there is no difference between having an
      object in the Standard tree, the User tree, or a user defined
      tree; it is just a convenient way to sort objects in the
      tree. You can think of each as a kind of the "view". It only
      affects representation of the data in the GUI; objects are all
      equal in all other senses and you can use an object from any
      library in your policy. You need not (and cannot) insert objects
      into the Standard tree.</para>

      <para>The object that is currently selected in the tree is
      highlighted in color and is shown in the dialog area on the
      right.</para>

      <para>
      <figure id="main-standard-objects">
        <title>Standard Objects</title>
        <graphic scale="50" fileref="pict_095.png" />
      </figure>
      </para>

      <para>Firewall Builder understands and uses the object and
      service types described in the table below. See
      <xref linkend="working-with-objects" /> and
      <xref linkend="working-with-services" /> for more detailed
      information.</para>

     <table frame='none' tabstyle='reg_table'>
       <title>Object Types</title>
	<tgroup cols='2' align='left' rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Object Type</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Library</entry>
		<entry>Firewall Builder comes with the Standard, User,
		and Deleted Objects libraries. In addition, you can
		create your own.</entry>
	      </row>
	      <row>
		<entry>Cluster</entry>
		<entry>Represents a high-availability pair of firewall devices. The firewall objects themselves must be created as firewall objects, then added to the cluster. The cluster's platform and OS settings must match those of the component firewalls.</entry>
	      </row>
	      <row>
		<entry>Firewall</entry>
		<entry>Represents a physical firewall device, its
		interfaces and addresses, and the policy rulesets
		associated with the device. Use Firewall Builder to
		model your actual device's firewall software, OS,
		interfaces and addresses. Then, use Firewall Builder
		to construct the policy rulesets to assign to the
		device.</entry>
	      </row>
	      <row>
		<entry>Host</entry>
		<entry>A computer on your network. Hosts can have interfaces associated with them.</entry>
	      </row>
	      <row>
		<entry>Interface</entry>
		<entry>A physical interface on a firewall or
		host. Interfaces can have IP and physical (MAC)
		addresses associated with them. An IP address can be
		created from the <guimenu>New Object</guimenu> for the
		selected interface, but physical addresses can only be
		created by right-clicking on an interface
		object.</entry>
	      </row>
	      <row>
		<entry>Network</entry>
		<entry>An IPv4 subnet</entry>
	      </row>
	      <row>
		<entry>Network IPv6</entry>
		<entry>An IPv6 subnet</entry>
	      </row>
	      <row>
		<entry>Address</entry>
		<entry>An IPv4 address</entry>
	      </row>
	      <row>
		<entry>Address IPv6</entry>
		<entry>An IPv6 address</entry>
	      </row>
	      <row>
		<entry>DNS Name</entry>
		<entry>A DNS Name object represents a DNS "A" or
		"AAAA" record and can resolve it into an IP address at
		compile or run time.</entry>
	      </row>
	      <row>
		<entry>Address Table</entry>
		<entry>Objects of this type can be configured with the
		name of an external file that is expected to contain a
		list of IP addresses (a mix of IPv4 and IPv6 is
		supported). Addresses can be loaded during policy
		compile or during the execution of a generated
		firewall script.</entry>
	      </row>
	      <row>
		<entry>Address Range</entry>
		<entry>A range of IPv4 or IPv6 IP addresses. This
		range does not have to be a specific subnet, but it
		does have to be contiguous.</entry>
	      </row>
	      <row>
		<entry>Group</entry>
		<entry>A collection of addressable objects (objects
		that have or contain IP addresses) such as network,
		interface, and hosts objects. Useful for creating a
		less cluttered-looking firewall policy and for making
		sure you have the same objects in every related
		rule.</entry>
	      </row>
	      <row>
		<entry>Custom Service</entry>
		<entry>Can be used to inject arbitrary code into the generated firewall script.</entry>
	      </row>
	      <row>
		<entry>ESTABLISHED and ESTABLISHED ipv6 Services</entry>
		<entry>These services match all packets that are part of network connections established through the firewall, or connections 'related' to those established through the firewall. Term 'established' refers to the state tracking mechanism which exists inside iptables and other stateful firewalls and does not mean any particular combination of packet header options.</entry>
	      </row>
	      <row>
		<entry>IP Service</entry>
		<entry>An IP service such as GRE, ESP, or VRRP. IP
		Service objects cover IP services that
		are <emphasis>not</emphasis> ICMP, ICMP6, TCP, or UDP
		services.</entry>
	      </row>
	      <row>
		<entry>ICMP Service</entry>
		<entry>An ICMP service such as a ping request or reply</entry>
	      </row>
	      <row>
		<entry>ICMP6 Service</entry>
		<entry>An ICMP6 service such as "ipv6 packet too big", "ipv6 ping request", or "ipv6 ping reply"</entry>
	      </row>
	      <row>
		<entry>TCP Service</entry>
		<entry>TCP services such as HTTP, SMTP, or FTP</entry>
	      </row>
	      <row>
		<entry>UDP Service</entry>
		<entry>A UDP service such as DNS or NTP</entry>
	      </row>
	      <row>
		<entry>TagService</entry>
		<entry>A service object that lets you examine the tag
		in an IP header. You can then construct your rule to
		take appropriate action on a match.</entry>
	      </row>
	      <row>
		<entry>User Service</entry>
		<entry>A User Service object matches the owner of the
		process on the firewall that send the packet. It
		translates to the "owner" match in iptables and "user"
		parameter for PF.</entry>
	      </row>
	      <row>
		<entry>Service Group</entry>
		<entry>A collection of services. For example, Firewall
		Builder comes with the Useful_ICMP service group that
		contains the "time exceeded", "time exceeded in
		transit", "ping reply", and "all ICMP unreachable"
		ICMP services. It also comes with a "DNS" service
		group that contains both the UDP and TCP version of
		DNS. Useful for creating a less cluttered-looking
		firewall policy and for making sure you have the same
		objects in every related rule.</entry>
	      </row>
	      <row>
		<entry>Time Interval</entry>
		<entry>A time period such as "weekends" or a range of
		dates, or a range of times on certain days of the
		week. Can be used as part of rule matching in Access
		Policy rulesets to provide or deny access to something
		based on time. Note that these time intervals are
		relative to the time on the firewall device
		itself.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <sect2>
	<title>Floating the Object Tree</title>
      <para>By default, the object tree panel and editor panels are anchored to the display area. However, you can cause each to float by clicking the little button next to the close button in the respective panel. This image shows the object tree panel floating free.</para>

      <para>
    <figure id="floating-object-tree">
      <title>Object Tree Floating</title>
      <graphic scale="50" fileref="floating-object-tree1.png" />
    </figure>
      </para>

    <para>A floating object tree stays associated with its parent object file. However, there is only one object editor panel. It is associated with whichever object file is active.</para>

    <para>To re-attached a floating panel, click the icon next to the close button again.</para>
     </sect2>

     <sect2>
	<title>Filtering the Object Tree</title>
	<para>There are a lot of objects in the tree, nested in their respective categories. You can filter the tree to have only certain objects and categories appear based on a string. For example, typing "eth" in the <guilabel>Filter</guilabel> field causes all the objects with "eth" in the object name to appear.</para>

      <para>Here we have the object tree with all categories collapsed and the <guilabel>Filter</guilabel> field unpopulated.</para>

    <para>
    <figure id="filter-before">
      <title>Empty Filter Field</title>
      <graphic scale="50" fileref="filter-before.png" />
    </figure>
      </para>

     <para>Next we start to type into the <guilabel>Filter</guilabel> field. In this example, we start to type the word "address" to get all the address-related objects. As you can see from the screen shot below, the filter begins to work immediately. We have only typed "ad" and yet the tree is already filtered by those characters, showing the <guilabel>Address Range</guilabel>, <guilabel>Address Table</guilabel>, and <guilabel>Addresses</guilabel> categories and their contents.</para>

    <para>
    <figure id="filter-after">
      <title>Populated Filter Field</title>
      <graphic scale="50" fileref="filter-after.png" />
    </figure>
      </para>

      <para>Objects are always displayed with their parent objects, so you can always see where your objects "live" in the tree.</para>

      <para>When you enter a string into the <guilabel>Filter</guilabel> field, that string is added to the field's history, which is accessible by clicking the down arrow next to the field. Here we see our recent history of filters.</para>

    <para>
    <figure id="filter-history">
      <title>Filter Field History</title>
      <graphic scale="50" fileref="filter-history.png" />
    </figure>
      </para>

    <para>You can clear the history by clicking the <guibutton>X</guibutton> button next to the field.</para>

     </sect2>

     <sect2 id="object-attributes">
       <title>Object Attributes in the Tree</title>
        <para>If you check the <guilabel>Show object attributes in the tree</guilabel> checkbox in the <guilabel>Preferences>Object</guilabel> tab, then the object tree displays a second column of information, like shown here.</para>


    <para>
    <figure id="object-attributes-in-tree">
      <title>Object Attributes Column</title>
      <graphic scale="50" fileref="object-attributes-in-tree.png" />
    </figure>
      </para>

    <para>The information shown depends on the type of object.</para>

    <para>If you check the checkbox, but don't see the second column, open the panel wider until you see the column separator, then drag it until the columns are in the right position. Column sizing is saved with the object file, so the next time you open it, the columns will be the sizes you left them.</para>

     </sect2>

    <sect2 id="creating-objects">
      <title>Creating Objects</title>

      <para>New objects can be created using the
      <guimenu>New Object</guimenu> menu, accessed by clicking this icon above the object tree:</para>
      <para>
      <figure id="new-object-icon.png">
	<title>Create Objects button</title>
            <graphic scale="100" fileref="new-object-icon.png" />
      </figure>
      </para>
	<para>Certain objects can also
      be created via a pop-up menu that can be opened by right-clicking on a parent object in the tree.</para>
      <para>
      <figure id="menu-new-object">
        <title>Creating Objects Using The Object Menu</title>
            <graphic scale="50" fileref="menu-new-object.png" />
      </figure>
      </para>

      <para>You can create all objects except physical address objects
      through the New Object menu. (Physical address objects can only
      be created by right-clicking on an existing Interface object.)
      You can also create objects by right-clicking on a folder in a
      tree (though not in the read-only Standard tree). If you
      right-click a folder, you can only create objects appropriate to
      that folder. For example, the interface object can only be
      placed under a host or firewall object, so the
      option <guimenuitem>Add Interface</guimenuitem> is available
      only if you right-click on a host or firewall.</para>

      <para>
      <figure id="menu-right-click-new-object">
        <title>Creating Objects by Right-Clicking</title>
            <graphic scale="50" fileref="menu-right-click-new-object.png" />
      </figure>
      </para>

      <para>Another way to create objects is to use
      the <guimenuitem>Duplicate</guimenuitem> option when you right
      click on an object. This allows you to create a copy of the
      object. For example, you may want to create a firewall policy
      for one platform, duplicate it, then just change the target
      platform on the copy. However, copies are not linked in any
      way. A change to the original has no affect on the copy, and
      vice versa.</para>
	</sect2>
    </sect1>

	<sect1 id="using-undo">
	  <title>Undo Stack</title>

	  <para>The undo stack shows you a list of your changes, and lets you roll back changes you don't want. You can roll back just one change, all changes after a certain point, or all changes.</para>
	  <para>A change enters the stack as soon as you "commit" it. In other words, as soon as you drag an object into a new position, that change appears in the stack. For field edits, the change appears as soon as you move the GUI focus out of a field by pressing Enter or Tab, or by clicking outside the field.</para>
          <para>Rolling back a change does not immediately remove that change from the stack. You can "redo" a change by clicking on it. Changes after the current change stay in the stack until you do a new edit. At that point, the new change appears as current, and all the undone changes after that point are removed.</para>

	  <para>This screenshot shows a portion of an object tree, an access policy, and the <guilabel>Undo Stack</guilabel>. The stack has been "floated," so it can be moved as its own window. (Click the button next to the close button in the panel to float.)</para>

          <para>As you can see from the stack, we have just added a new, blank rule to the policy.</para>

      <para>
      <figure id="undo-stack1">
        <title>Policy and Undo Stack</title>
            <graphic scale="50" fileref="undo-stack1.png" />
      </figure>
      </para>

	  <para>We will now add the "inside range" IP object to the Source of the new rule, and the "outside range 2" IP object to the Destination of the rule. However, we have made a mistake: Instead of adding "outside range 2" to the Destination, we accidentally added the "outside range" object to the Source field.</para>

	  <para>You can see the object in the policy and the undo history in this screenshot.</para>

      <para>
      <figure id="undo-stack2">
        <title>Added Inside Range and Outside Range</title>
            <graphic scale="50" fileref="undo-stack2.png" />
      </figure>
      </para>
	  
	  <para>To fix this, we do two things. First, we click on "insert inside range" in the <guilabel>Undo Stack</guilabel>. This rolls back the stack to before we inserted "outside range 2."</para>

      <para>
      <figure id="undo-stack3">
        <title>Removed Outside Range from Source</title>
            <graphic scale="50" fileref="undo-stack3.png" />
      </figure>
      </para>

	<para>Now we drag "outside range 2" into the Destination field. You can see that the "insert outside range" entry has been removed from the stack, and the "insert outside range 2" edit now appears as the most recent change.</para>

      <para>
      <figure id="undo-stack4">
        <title>Added Outside Range 2 to Destination</title>
            <graphic scale="50" fileref="undo-stack4.png" />
      </figure>
      </para>

	</sect1>

      <sect1 id="preferences">
        <title>Preferences dialog</title>
<para>To open the <guilabel>Preferences</guilabel> dialog,
      select <guimenuitem>Edit/Preferences...</guimenuitem>. The
      dialog has several tabs, described here.</para>

      <para>
      <figure id="preferences-dialog">
        <title>The GUI Preferences Dialog</title>
        <graphic scale="50" fileref="fwbPrefGeneral.png" />
      </figure>
      </para>

      <table frame='none' tabstyle='reg_table'>
        <title>Preferences>General tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>General Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Working Directory</entry>
		<entry>This option tells the program where it should store the
                data file. Policy compilers also store firewall configuration
                files and scripts they produce in this directory. If this
                parameter is left blank, then the policy compiler will store
                the firewall configurations it generates in the same directory
                as the original data file.</entry>
	      </row>
	      <row>
		<entry>Do not show tips on startup</entry>
		<entry>If checked, the program does not show tips on start up.</entry>
	      </row>
	      <row>
		<entry>Check for updates automatically</entry>
		<entry>If checked, the program checks for program updates every time it starts. If unchecked, the program will not check for updates unless you specifically tell it to by clicking the <guibutton>Check Now</guibutton> button.</entry>
	      </row>
	      <row>
		<entry>Check Now</entry>
		<entry>Click if you want the program to check for updates at that moment.</entry>
	      </row>
	      <row>
		<entry>Use http proxy while checking for updates (host:port)</entry>
		<entry>Whether you use the automatic or manual method
                to check for updates, if you are behind a proxy, enter
                the host IP and port of the proxy in this
                field. Separate the host IP and port number with a
                colon (:).</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-objects">
        <title>GUI Preferences Objects tab</title>
        <graphic scale="50" fileref="fwbPrefObjects1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'>
       <title>Preferences>Objects tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Objects Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Enable object tooltips</entry>
		<entry>Firewall Builder can show a summary of an
                object's properties in a quick pop-up window (a
                "tooltip") when you places the mouse cursor over an
                object icon. If this is not enabled, then you must
                click on an object to get the same information. The
                <guilabel>Tooltip delay</guilabel> control sets the
                delay, in seconds, between the time you hover the
                cursor and the time the tooltip appears.</entry>
	      </row>
	      <row>
		<entry>Show deleted objects</entry>
		<entry>Selecting this checkbox turns on a third object tree:
                Deleted Objects. Once activated, the Deleted Objects tree acts
                like trash can (or recycle bin) for deleted objects. If you
                delete something by mistake, you can retrieve it.</entry>
	      </row>
	      <row>
		<entry>Show object attributes in the tree</entry>
		<entry>Creates a second column in the object tree. The second column
		contains information about the object, such as how many objects a folder contains, whether a ruleset is the top ruleset, IP addresses, and so on. See <xref linkend="object-attributes" /> for a description.</entry>
	      </row>
	      <row>
		<entry>Clip comments in rules</entry>
		<entry>Comments in a rule can sometimes make the rule
                line taller, reducing the number of rules visible on a
                screen.  Select this if you want comments to be
                truncated in the view if they take up more than one
                line.</entry>
	      </row>
	      <row>
		<entry>DNS Name - Create new objects in "Compile Time" or "Run Time" mode by default</entry>
		<entry>These radio buttons set the default for when DNS Name object addresses will be read from a file: when the firewall script is generated by Firewall Builder or when the firewall runs the script. This just sets the default; you can override this setting for individual objects. <xref linkend="dns-name-object" /> has more information on DNS Name object creation.</entry>
	      </row>
	      <row>
		<entry>DNS Name - Use object name for the DNS record in all objects of this type</entry>
		<entry>If checked, Firewall Builder will use the DNS Name object's name for DNS lookups. If it is not checked, the Firewall Builder will use the <guilabel>DNS Record</guilabel> field in the object for lookups. (If this checkbox is checked, the <guilabel>DNS Record</guilabel> field will be grayed out in all DNS Name objects.)</entry>
	      </row>
	      <row>
		<entry>Address Table - Create new objects in "Compile Time" mode or "Run Time" mode by default radio buttons</entry>
		<entry>These radio buttons set the default for when Address Table object addresses will be read from a file: when the firewall script is generated by Firewall Builder or when the firewall runs the script. This just sets the default; you can override this setting for individual objects. <xref linkend="address-table-object" /> has more information on Address Table object creation.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-datafile">
        <title>GUI Preferences Data File tab</title>
        <graphic scale="50" fileref="fwbPrefDataFile1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'>
       <title>Preferences>Data File tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Data File Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Periodically save data to file every ... minute</entry>
		<entry>If checked, automatically saves your data every
                specified number of minutes.</entry>
	      </row>
	      <row>
		<entry>Do not ask for the log record when checking in the new
                file version</entry>
		<entry>Only affects RCS. If selected, the program does
                not prompt you for a "comment" when you check your
                file back into RCS.  See <xref linkend="rcs" /> for a
                detailed explanation on using revision control with
                Firewall Builder.</entry>
	      </row>
	      <row>
		<entry>Enable compression of the data file</entry>
		<entry>If selected, your data file will be compressed to save
                disk space.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-installer">
        <title>GUI Preferences Installer tab</title>
        <graphic scale="50" fileref="fwbPrefInstaller1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'><title>Preferences>Installer tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Installer Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>SSH and SCP paths</entry>
		<entry>These fields let the program know where your
                  SSH and SCP programs (or their equivalents) live. If
                  they are in your PATH, then you don't have to
                  specify the complete paths to them. On Windows,
                  however, you must install putty. See
                  <xref linkend="install-putty" /> for
                  instructions.</entry>
	      </row>
	      <row>
		<entry>Enable password caching</entry>
		<entry>If checked, the program can remember firewall passwords for the duration of the Firewall Builder GUI session. Passwords are never stored permanently in any form; they are only kept in memory for the working Firewall Builder GUI instance. You need to enter each password once when you activate a generated policy. If you keep the program open and need to modify and activate policy again, the password fields in the installer dialog can be filled automatically. Cached passwords are associated with the firewall object and account name used to activate the policy. To use this feature, you must also configure a user name in the <guilabel>Installer</guilabel> tab in the <guilabel>Firewall Settings</guilabel> dialog of the firewall object. Caution: using this feature creates a risk if a working Firewall Builder GUI is left unattended on an unlocked workstation.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-labels">
        <title>GUI Preferences Labels tab</title>
        <graphic scale="50" fileref="fwbPrefLabels1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'>
       <title>Preferences>Labels tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Labels Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Labels</entry>
		<entry>You can assign colors to particular rows in your policies to
            make them stand out visually. You can change the text label
            associated with each color using this tab. While the color shows
            up in the ruleset, the text label only appears in the label
            list.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-appearance">
        <title>GUI Preferences Appearance tab</title>
        <graphic scale="50" fileref="fwbPrefAppearance1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'><title>Preferences>Appearance tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Appearance Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Rules, Tree, and Compiler Output Panel Fonts</entry>
		<entry>Use these controls to set the font used for rules, the object tree, 
		and the compiler output panel.</entry>
	      </row>
	      <row>
		<entry>Show icons in rules</entry>
		<entry>By default, objects such as interfaces, hosts, and
                networks show up as both an icon and text. De-select this to have
                only the text appear (no icon).</entry>
	      </row>
	      <row>
		<entry>Show text descriptions in columns
                "Direction","Action"</entry>
		<entry>By default, the Direction and Action columns show only
                icons. Select this to have text appear as well.</entry>
	      </row>
	      <row>
		<entry>Icon size</entry>
		<entry>By default, icons are 25x25
                pixels. Select <guilabel>16x16</guilabel> to make them
                somewhat smaller. (The larger icons are easier to see, but
                the smaller ones are suitable for smaller displays,
                such as laptop screens.)</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
      <figure id="preferences-dialog-platformsandos">
        <title>GUI Preferences Platforms and OS tab</title>
        <graphic scale="50" fileref="fwbPrefPlatformsandOS1.png" />
      </figure>
      </para>

     <table frame='none' tabstyle='reg_table'>
       <title>Preferences>Platforms and OS tab</title>
	<tgroup cols='2' align='left'  rowsep='1'>
	  <colspec colname='c1'  colwidth="120pt"/>
	  <colspec colname='c2'/>
	    <thead>
	      <row>
		<entry>Platforms and OS Preferences</entry>
		<entry>Explanation</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Lists of Platforms and OSs</entry>
		<entry>Checked platforms and OSs appear in drop-down
		menus of platforms and OSs in the program. You can
		uncheck unneeded platforms and OSs to reduce clutter
		in GUI menus. Remember to re-check entries when you
		want them to re-appear in the GUI, such as when you
		acquire a new type of firewall Also, not all platforms
		and OSs supported by Firewall Builder are checked by
		default. If the firewall you have doesn't appear in
		your drop-down menus, check its entry in this
		tab.</entry>
	      </row>
	  </tbody>
	</tgroup>
      </table>

      </sect1>

    <sect1 id="multiple-data-files">
      <title>Working with multiple data files</title>

      <para>This section shows an example of working with two data
      files at the same time.</para>

  <para>
    We start with a data file. Note the file name, "policy_rules.fwb", is
    shown in the main window title bar.
  </para>

      <para>
  <figure>
    <title>Data file</title>
    <graphic width="50%" fileref="multifile_slide_1.png"/>
  </figure>
      </para>

  <para>
    Use <guimenuitem>File/Open</guimenuitem> to open another data
    file.
  </para>

      <para>
  <figure>
    <title>Data file</title>
    <graphic width="50%" fileref="multifile_slide_2.png"/>
  </figure>
      </para>

  <para>
    Here we see file "clusters.fwb" opened in the GUI. Its name is now shown
    in the title bar of the window.
  </para>

      <para>
  <figure>
    <title>clusters.fwb</title>
    <graphic width="50%" fileref="multifile_slide_3.png"/>
  </figure>
      </para>

  <para>
    The <guimenu>Window</guimenu> menu supports the usual windows
    operations: you can maximize and minimize them, as well as cascade
    or tile them and switch from one to another.
  </para>

      <para>
  <figure>
    <title>Window menu</title>
    <graphic width="50%" fileref="multifile_slide_4.png"/>
  </figure>
      </para>

  <para>
    Here we have both windows shown. The size of the main windows was
    rather small to keep the size of the screen shots down, so two
    windows do not fit well. However even with such a cramped layout
    we can move objects from one to another using copy/paste operations. In this example we are going to copy-and-paste the 
    firewall object "fw" from the top window to the bottom one. We
    are going to paste it into the folder "Firewalls" in the tree.
  </para>

      <para>
  <figure>
    <title>Copy/pasting between windows</title>
    <graphic width="50%" fileref="multifile_slide_5.png"/>
  </figure>
      </para>

  <para>
    Here we maximized the window showing data file "clusters.fwb"; note that
    firewall object "fw" is part of the tree.
  </para>

      <para>
  <figure>
    <title>Top window now has the object</title>
    <graphic width="50%" fileref="multifile_slide_6.png"/>
  </figure>
      </para>

  <para>
    In addition, firewall "fw" used a host object called "dmz-server" in the data
    file "policy_rules.fwb". Copying the firewall object "fw" also copied
    all other objects it depended on. This image shows that host
    "dmz-server" is now part of the data file "clusters.fwb".
  </para>

      <para>
  <figure>
    <title>dmz-server</title>
    <graphic width="50%" fileref="multifile_slide_7.png"/>
  </figure>
      </para>
  
  </sect1>
 
  </chapter>
