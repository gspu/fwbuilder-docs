<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <chapter id="gettingstarted">
    <title>Getting Started</title>

    <para>This chapter introduces you to the Firewall Builder
    program. It walks you through using the tool, from starting it to
    building and installing an actual firewall configuration.</para>

    <sect1 id="gs_overview">
     <title>Firewall Builder Overview</title>

    <para>The Firewall Builder package for most Linux distributions
    creates a menu item that makes starting the program easy. (On
    Ubuntu, it's <guimenuitem>System > Administration > Firewall
    Builder</guimenuitem>.) However, if the menu item is not there,
    you can always launch it from the command line by just
    typing <command>fwbuilder</command> at the shell prompt.</para>

    <para>The program starts by opening the main window and a welcome
    dialog.</para>

    <figure id="pict_020"><title>Starting Firewall Builder</title>
      <graphic scale="50" fileref="gettingstarted_fig_1.png"/>
    </figure>

    <para>
      The "welcome" dialog is only shown once when you start the
      program for the very first time. It includes a summary of
      features of Firewall Builder and links to the "Getting Started"
      guide and "Release Notes" for the latest version.
    </para>

    <para>
      Let's create our first firewall object. To do this, we'll
      use the object creation menu, accessed by clicking this icon above
      the object tree:
      <inlinegraphic fileref="new-object-icon.png"/>. Choose <guimenuitem>New
        Firewall</guimenuitem> from the menu that appears.
    </para>

    <figure id="pict_030">
      <title>Select New Firewall</title>
      <graphic scale="50" fileref="gettingstarted_fig_2.png" />
    </figure>

    <para>
      The first page of the New Firewall wizard appears. In this page
      of the wizard we can enter the name for the new firewall object
      (here it is "guardian"), its platform ("iptables") and its host
      OS ("Linux 2.4/2.6").
    </para>

    <figure id="pict_040">
      <title>Define firewall platform</title>
      <graphic scale="50"  fileref="gettingstarted_fig_3.png" />
    </figure>

    <para>
      The program remembers your choice of the firewall platform and
      OS and automatically fills these fields when you create new
      firewall object next time. Of course you can change the
      selection, but if you tend to work with the same firewall
      platform and OS all the time, such as all your machines are
      Linux running iptables, the program will select these setting
      automatically, saving you few clicks.
    </para>
    
    <para>
      The name of the new firewall object can be anything you
      want. However, if you want to use SNMP to populate the interface
      objects, or if you want to use DNS lookups to populate IP
      address objects, you must name the firewall object the same name
      as the actual firewall machine.
    </para>

    <para>
      There are three ways a new firewall can be created: you can use
      a pre-configured template firewall object, create it from
      scratch, or use SNMP to create a firewall object with interfaces
      but an empty policy.
    </para>

    <para>
      This guide demonstrates the first method, using a template
      object. (Other methods are described in
      <xref linkend="firewall-object" />.) To do this,
      check <guilabel>Use pre-configured template firewall
      objects</guilabel> checkbox. Firewall Builder comes with a set
      of default objects, and we'll be using one of those
      there. Alternatively, an administrator can distribute a library
      of predefined templates to other users in the enterprise, as
      described in <xref linkend="new-library" />.
    </para>

    <para>
      We are going to use one of the standard templates distributed
      with Firewall Builder, so we'll leave the standard template
      library path and name in the <guilabel>Template file</guilabel>
      input field. Click <guibutton>Next</guibutton> to move on to the
      next page of the wizard.
    </para>

    <para>
      Note that the template firewall object comes completely
      configured, including addresses and netmasks for its interfaces
      and some basic policy and NAT rules. This configuration is
      intended as a starting point only. You should reconfigure
      addresses of interfaces to match those used on your
      network. We'll see how this is done later on.
    </para>

    <para>
      This page of the wizard shows template objects and their
      configuration. Standard template objects represent firewalls
      with two or three interfaces, a host with one interface, a web
      server or a Cisco router. We'll choose <guilabel>fw template
      3</guilabel>, a firewall with three interfaces, for this
      example. Click <guibutton>Next</guibutton> to create a new
      firewall object using chosen template.
    </para>

    <figure id="pict_050">
      <title>Pick a template</title>
      <graphic scale="50" fileref="gettingstarted_fig_5.png" />
    </figure>

    <para>
      Clicking "Next" brings us to the next page of the wizard where
      we can change configuration of the interfaces of the template
      firewall:
    </para>

    <figure id="pict_050_1">
      <title>Change IP addresses of interfaces</title>
      <graphic scale="50" fileref="gettingstarted_fig_5_1.png" />
    </figure>

    <para>
      Here each tab represents an interface of the firewall
      (<emphasis>eth0</emphasis>,
      <emphasis>eth1</emphasis>, <emphasis>eth2</emphasis>
      and <emphasis>lo</emphasis>). You can change interface name,
      label, its type and edit, add or remove IP addresses. You can
      manage both IPv4 and IPv6 addresses on this page of the wizard.
    </para>

    <para>
      Template object is preconfigured with generic IP addresses that
      likely do not match addressing scheme you use on your
      network. This page of the wizard allows you to change addresses
      to match your setup.
    </para>

    <note>
      <para>
        You do not have to edit IP addresses at this point in the
        process and can postpone it for later. Each IP address will
        appear as a separate object in the object tree, right under
        the object representing interface it belongs to and you will
        be able to open this address object in the editor and make the
        changes. However, if you change addresses of interfaces while
        still in the wizard that creates new firewall object, the
        program will also adjust policy and NAT rules that comes with
        template firewall object to reflect IP addresses you use on
        your network. If you use template object and plan to use at
        least some of the rules it comes with, we recommend you change
        addresses here in the wizard so you can then start with the
        policy and NAT rules that are much closer to your network
        configuration. In some simple cases that are very close to our
        predefined template objects, template rules may even be all
        you need.
      </para>
    </note>

    <para>
      After you adjust IP addresses of all interfaces, click Finish
      button to create firewall object.
    </para>


    <para>
      Our newly created firewall object is shown in
      <xref linkend="pict_060"/>. Its name is "guardian", and it
      appears in the object tree in the left hand side of the main
      window in the folder "Firewalls". Double-clicking the object in
      the tree opens it in the editor panel at the bottom panel of the
      main window. The editor for the firewall object allows us to
      change its name, platform and host OS, and also provides buttons
      that open dialogs for "advanced" settings for the firewall
      platform and host OS. We will inspect these little later in this
      chapter. </para>

    <figure id="pict_060">
      <title>New Firewall</title>
      <graphic scale="50" fileref="gettingstarted_fig_6.png"/>
    </figure>

    <para>
      Now would be a good time to save the data to a disk file. To
      do so use main menu <guimenuitem>File/Save
        As</guimenuitem>.
    </para>

    <figure id="pict_070">
      <title>Save firewall</title>
      <graphic scale="50" fileref="gettingstarted_fig_7.png" />
    </figure>
    
    <para>
      Firewall Builder uses file extension ".fwb" for the data files.
      Pick location and name for the new data file, then
      click <emphasis>Save</emphasis>.
    </para>

    <para>
      Note that once the firewall data is saved to a file, its
      name appears in the main window title. Here it is
      "test.fwb."
    </para>
    
    <figure id="pict_090">
      <title>File name displayed</title>
      <graphic scale="50" fileref="gettingstarted_fig_9.png" />
    </figure>

    <para>
      

    </para>

    <para>
      Let's take a little tour of the network and service objects
      that come standard with the program. You can use these
      pre-configured objects to build access Policy, NAT, and Routing
      rules for your firewall.
    </para>

    <para>
      Objects in the tree are organized in libraries. You can
      switch between libraries using the drop-down menu above the
      tree. Firewall Builder comes with a collection of address, service
      and time interval objects in the library called "Standard". Let's
      take a look at them.
    </para>

    <figure id="pict_093">
      <title>Objects tree</title>
      <graphic scale="50" fileref="gettingstarted_fig_10.png" />
    </figure>

    <para>
      Folder <guilabel>Objects/Hosts</guilabel> contains a few
      host objects used in standard firewall
      templates. Folder <guilabel>Objects/Network</guilabel> contains
      network objects that represent various standard address ranges and
      blocks, such as multicast, net 127/8, networks defined in RFC1918
      and so on.
    </para>

    <figure id="pict_094">
      <title>Standard Host and Network objects</title>
      <graphic scale="50" fileref="gettingstarted_fig_11.png" />
    </figure>

    <para>
      Firewall Builder also comes with an extensive collection of
      service objects. The following screenshots show some TCP and UDP
      objects (all of them do not fit in the screenshot).
    </para>

    <table frame="none"  tabstyle="reg_table">
      <title></title>
      <tgroup cols='2' align='left'  rowsep='1'>
        <colspec colnum="1" colname="col1" colwidth="1*"/>
        <colspec colnum="2" colname="col2" colwidth="1*"/>
	<tbody valign='top'>
          <row>
            <entry>
              <para>
                <figure id="pict_095">
                  <title>TCP objects</title>
                  <graphic scale="50" fileref="gettingstarted_fig_12.png" />
                </figure>
              </para>
            </entry>
            <entry>
              <para>
                <figure id="pict_097">
                  <title>UDP objects</title>
                  <graphic scale="50" fileref="gettingstarted_fig_13.png" />
                </figure>
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>
      Let's inspect some of the objects Firewall Builder created
      for you as part of the new firewall object. To open an object in
      the editor and inspect or change its properties, double-click on
      it in the tree.
    </para>

    <tip>
      <para>
        The tree and editor panels in Firewall Builder 4.0 are
        detachable and can "float". You can rearrange them on the
        screen to keep them away when you do not need them but still
        within reach so you can quickly find objects and change their
        properties.  Use main menu "View" to open and close panels;
        the tree panel can be opened and closed using keyboard shortcut
        Ctrl+T.

        <figure id="pict_100_1">
          <title>Main menu "View"</title>
          <graphic scale="50" fileref="gettingstarted_fig_13_1.png" />
        </figure>
      </para>
    </tip>


    <figure id="pict_100">
      <title>Firewall object selected in the tree and opened in the
        editor</title>
      <graphic scale="50" fileref="gettingstarted_fig_14.png" />
    </figure>

    <para>
      You can also right-click on the object in the tree to open a
      pop-up menu. Choose <guimenuitem>Edit</guimenuitem> to edit the
      object.
    </para>

    <figure id="pict_101">
      <title>Open an object in the editor using context menu</title>
      <graphic scale="50" fileref="gettingstarted_fig_15.png" />
    </figure>

    <para>
      Every object in Firewall Builder has basic attributes such
      as <guilabel>Name</guilabel>
      and <guilabel>Comment</guilabel>. Other attributes depend on the
      object type.
    </para>

    <para>
      Attributes of the firewall object
      include <guilabel>Platform</guilabel> (can be iptables, pf,
      ipfilter, etc.), <guilabel>Version</guilabel>
      (platform-dependent) and <guilabel>Host
      OS</guilabel>. Buttons <guibutton>Host OS Settings</guibutton>
      and <guibutton>Firewall Settings</guibutton> open dialogs with
      many additional attributes that depend on the firewall platform
      and host OS. More on these later.
    </para>

    <figure id="pict_102">
      <title>Firewall attributes</title>
      <graphic scale="50" fileref="gettingstarted_fig_16.png" />
    </figure>

    <para>
      Object dialogs in Firewall Builder 4.0 do not have button
      "Apply". When you make changes in the editor, object attributes
      are updated immediately as soon as you click on another GUI
      element or hit Tab or Enter.
    </para>

    <tip>
      <para>
        Firewall Builder 4.0 has full Undo/Redo functions of unlimited
        depth. You can monitor undo stack if you open it using main
        menu "View / Undo stack".
      </para>
    </tip>

    <para>
      Drop-down list <emphasis>"Platforms"</emphasis> switches between
      supported firewall platforms <emphasis>"iptables"</emphasis>,
      <emphasis>"ipfilter"</emphasis>, <emphasis>"pf"</emphasis>,
      <emphasis>"ipfw"</emphasis>, <emphasis>"Cisco IOS
      ACL"</emphasis> and <emphasis>"Cisco ASA (PIX)"</emphasis>. The
      choice of the host OS depends on chosen firewall platform. For
      example, for "iptables" the program offers <emphasis>"Linux
      2.4/2.6"</emphasis>, <emphasis>"OpenWRT"</emphasis>,
      <emphasis>"Sveasoft"</emphasis>
      and <emphasis>"IPCOP"</emphasis>.  Host OS choices for the
      firewall platform <emphasis>"PF"</emphasis>
      are <emphasis>"OpenBSD"</emphasis>
      and <emphasis>"FreeBSD"</emphasis> and so on.
    </para>

    <figure id="pict_103">
      <title>Host OS available for the firewall platform "iptables"</title>
      <graphic scale="50" fileref="gettingstarted_fig_17.png" />
    </figure>

    <para>
      Objects located below the Firewall object in the tree represent
      interfaces of the firewall. We refer to them as "children" of
      the firewall object. <xref linkend="pict_104" /> shows
      properties of interface eth0. To open it in the editor,
      double-click it in the tree.
    </para>

    <para>IP and MAC addresses of interfaces are represented by child
    objects in the tree located below the corresponding
    interface.</para>

    <figure id="pict_104">
      <title>Firewall interface objects</title>
      <graphic scale="50" fileref="gettingstarted_fig_6.png" />
    </figure>

    <para>
      An interface object has several attributes that define its
      function, such as "Management interface", "external", and so on.
    </para>

    <figure id="pict_105">
      <title>Attributes of the Interface object</title>
      <graphic scale="50" fileref="gettingstarted_fig_18.png" />
    </figure>

    <itemizedlist>
      <listitem><para><guilabel>Name</guilabel>: The name of the
      interface object in Firewall Builder must match exactly the name
      of the interface of the firewall machine it represents. This
      will be something like "eth0", "eth1", "en0", "br0", and so on.
	</para></listitem>

	<listitem><para><guilabel>Label</guilabel>: On most OS this
	field is not used and serves the purpose of a descriptive
	label. Firewall Builder GUI uses a label, if it is not blank,
	to show interfaces in the tree. One of the suggested uses for
	this field is to mark interfaces to reflect the network
	topology ('outside', 'inside') or the purpose ('web front-end'
	or 'backup subnet'). The label is mandatory for Cisco PIX
	though, where it must reflect the network topology.
	</para></listitem>

	<listitem><para><guilabel>Management interface</guilabel>:
	When the firewall has several network interfaces, one of them
	can be marked as the "management interface". The management
	interface is used for all communication between Firewall
	Builder and the firewall.  For example, the Firewall Builder
	policy installer uses the address of the management interface
	to connect to the firewall via SSH when it copies the
	generated script or configuration file to it. (firewall object
	only)
	</para></listitem>

	<listitem><para><guilabel>External interface
	(insecure)</guilabel>: Marks an interface that connects to the
	Internet.
	</para></listitem>

	<listitem><para><guilabel>Unprotected interface</guilabel>:
	Recognized by policy compilers for Cisco IOS access lists and
	PF. The compiler for IOS ACL just skips unprotected interfaces
	and does not assign an ACL to them. The compiler for PF
	generates a "set skip on &lt;interface_name&gt;" clause for
	unprotected interfaces.
	</para></listitem>

	<listitem><para><guilabel>Regular Interface</guilabel>: Use
	this option if the interface has an IP address assigned to it
	manually.
	</para></listitem>

	<listitem><para><guilabel>Address is assigned
	dynamically</guilabel>: Use this option if the interface has a
	dynamic address obtained via DHCP, PPP or another protocol. In
	this case an address is unknown when when Firewall Builder
	generates the Firewall policy. Some firewalls allow for using
	the interface name in the policy instead of the IP address;
	the firewall engine then picks its address either when the
	policy is activated or even at run-time.</para>
	</listitem>

	<listitem><para><guilabel>Unnumbered interface</guilabel>: Use
	this option if the interface can never have an IP address,
	such as the Ethernet interface used to run PPPoE communication
	on some ADSL connections, or tunnel endpoint interface (GRE,
	PPPoE, sometimes IPSEC). Although unnumbered interfaces do not
	have addresses, firewall policy rules and access lists can be
	associated with them.
	</para></listitem>

	<listitem><para><guilabel>Security level</guilabel>: The
	security level of this interface, used only with Cisco PIX
	(ASA).
	</para></listitem>

	<listitem><para><guilabel>Network zone</guilabel>: Network
	zone of this interface, used only with Cisco PIX
	(ASA). Network zone drop-down list shows all network objects
	and groups of addresses and networks present in the
	tree. Choose one of them to tell the compiler which networks
	and blocks of addresses can be reached through this
	interface. Compiler uses this information to decide which
	interface each ACL rule should be associated with based on the
	addresses used in the destination of the rule.
	</para></listitem> 
      </itemizedlist>


    <para>
      Screenshot below shows IP address of
      interface <emphasis>eth0</emphasis>. The address and netmask are
      attributes of the child object of the type "IPv4 address". Here
      the address is "192.0.2.1" and netmask "255.255.255.0". (Netmask
      can also be specified using slash notation, such as 24, without
      the actual slash.)  Button <guibutton>DNS Lookup</guibutton> can
      be used to determine IP address using DNS. The program runs DNS
      query for the "A" record for the name of the parent firewall
      object. (This only works if the firewall object has the same
      name as the actual firewall machine.)
    </para>

    <figure id="pict_110">
      <title>Interface IP address</title>
      <graphic scale="50" fileref="gettingstarted_fig_19.png" />
    </figure>

    <para>
      Let's inspect the properties of the firewall
      object. Double-click on the firewall "guardian" in the tree to
      open it in the editor panel, then click the <guibutton>Firewall
      Settings</guibutton> button in the editor. This opens a new
      dialog that looks like <xref linkend="pict_140" />.
    </para>

    <figure id="pict_140">
      <title>Firewall Compiler properties</title>
      <graphic scale="50" fileref="gettingstarted_fig_21.png" />
    </figure>

    <para>
      Click the <guibutton>Help</guibutton> button at the bottom of
      the dialog page to open help for this dialog. The online help
      explains all attributes and parameters located in each tab of
      the <guilabel>advanced settings</guilabel> dialog. Explore it,
      as many parameters are important and affect the generated
      firewall script in different ways.
    </para>

    <para>
      The next few images show other tabs of
      the <guilabel>advanced settings</guilabel> dialog. You can find
      detailed explanations of all parameters in the online help and
      Firewall Builder Users Guide.
    </para>

    <para>
      This page defines various parameters for the built-in policy
      installer. The installer uses an SSH client (pscp.exe and
      plink.exe on Windows) to transfer the generated script to the
      firewall machine and activate it there.
    </para>

    <figure id="pict_150">
      <title>Installer properties</title>
      <graphic scale="50" fileref="gettingstarted_fig_22.png" />
    </figure>

    <para>You can define shell commands that will be included in the
    generated script at the beginning and at the end of it. These
    commands can do anything you want, such as configure some
    subsystems, set up routing, and so on. </para>

    <figure id="pict_160">
      <title>Script Prolog/Epilog properties</title>
      <graphic scale="50" fileref="gettingstarted_fig_23.png" />
    </figure>
    
    <para>Parameters for logging. </para>
    
    <figure id="pict_170">
      <title>Logging properties</title>
      <graphic scale="50" fileref="gettingstarted_fig_24.png" />
    </figure>

    <para>
      Screenshot below shows more options for the script
      generation. Notice that Firewall Builder can produce the
      iptables script in two formats: 1) as a shell script that calls
      the iptables utility to add each rule one by one, or 2) it can
      use iptables-restore script to activate the whole policy at
      once. Other parameters are explained in the online help.
    </para>

    <figure id="pict_180">
      <title>Script properties</title>
      <graphic scale="50" fileref="gettingstarted_fig_25.png" />
    </figure>

    <para>
      Starting with v3.0, Firewall Builder can generate both IPv4 and
      IPv6 policies. This tab controls the order in which they are
      added to the script if you have defined rules for both address
      families in the Policy objects of the firewall.
    </para>

    <figure id="pict_190">
      <title>IPv4, IPv6 generation order</title>
      <graphic scale="50" fileref="gettingstarted_fig_26.png" />
    </figure>

    <para>
      Let's take a look at the policy of the template firewall shown
      in <xref linkend="pict_200" />. These rules are intended to be
      an example, a starting point to help you create your own
      policy. Most likely you will want to modify the rules to suite
      your requirements. Explanations of the rules given here are
      brief because the goal of Getting Started is only to demonstrate
      how to use Firewall Builder.
    </para>

    <itemizedlist>
      <listitem><para><guilabel>Rule 0</guilabel>: This is an
          anti-spoofing rule. It blocks incoming packets on the external
          interface that have source addresses that belong to the firewall
          or your internal or DMZ networks. The rule is associated with
          outside interface and has <guilabel>Direction</guilabel> set to
          "Inbound".
      </para></listitem>

      <listitem><para><guilabel>Rule 1</guilabel>: This rule permits
	  any packets on the loopback interface. This is necessary
	  because many services on the firewall machine communicate back
	  to the same machine via loopback.
      </para></listitem>

      <listitem><para><guilabel>Rule 2</guilabel>: Permit ssh access
	  from internal network to the firewall machine. Notice service
	  object "ssh" in the column <guilabel>Service</guilabel>. (This
	  object can be found in the Standard objects library in the
	  Services/TCP folder.)
      </para></listitem>
    </itemizedlist>

    <figure id="pict_200">
      <title>Template rule sets</title>
      <graphic scale="50" fileref="gettingstarted_fig_27.png" />
    </figure>

    <para>
      Firewall Builder 4.0 allows you to compile single policy or nat
      rule and see generated firewall configuration right there in the
      GUI. To do this, select any object in the rule you want to
      process or highlight its leftmost element where rule number is
      shown, then click right mouse button to open context menu:
    </para>

    <figure id="pict_201">
      <title>Using context menu to compile single rule</title>
      <graphic scale="50" fileref="gettingstarted_fig_27_1.png" />
    </figure>

    <para>
      Now click "Compile rule" (keyboard shortcut is "X") to see the
      result in the panel at the bottom of the main window. The is a
      great way to experiment with rules and see what is being
      generated in response to your changes.
    </para>

    <figure id="pict_202">
      <title>Compiling single rule</title>
      <graphic scale="50" fileref="gettingstarted_fig_27_2.png" />
    </figure>




    <para>
      Access policy rules belong to the object "Policy", which is a
      child object of the firewall and can be found in the tree below
      it. As with any other object in Firewall Builder, the Policy
      object has some attributes that you can edit if you double-click
      on it in the tree.
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Policy can be IPv4, IPv6, or combined IPv4 and IPv6. In the
	  last case you can use a mix of IPv4 and IPv6 address objects
	  in the same policy (in different rules), and Firewall
	  Builder will automatically figure out which one is which and
	  sort them out.
	</para>
      </listitem>

      <listitem>
        <para>
          Policy can translate into only the mangle table (used for
	  modifying packets) or a combination of the filter table
	  (used for allowing/blocking packets) and the mangle
	  table. In the latter case, the policy compiler decides which
	  table to use based on the rule action and service
	  object. Some actions, such as "Tag" (which translates into
	  iptables target MARK), go into mangle table.
        </para>
      </listitem>

      <listitem>
        <para>
          The "Top rule set" is the one the compiler will use to
	  populate iptables built-in chains INPUT/OUTPUT/FORWARD. (If
	  you have only one rule set, then mark it as the top rule set.)
	  If a policy is not marked as "top rule set", generated rules
	  will go into a user-defined chain with the same name as the
	  policy object.
	</para>
      </listitem>
    </itemizedlist>

    <figure id="pict_210">
      <title>Properties of the Policy rule set object</title>
      <graphic scale="50" fileref="gettingstarted_fig_28.png" />
    </figure>

    <para>Here are the pre-configured NAT rules.</para>

    <itemizedlist>
      <listitem>
        <para>
          <guilabel>Rule 0</guilabel>: Tells the firewall that no
          address translation should be done for packets traveling
          from network 192.168.2.0 to 192.168.1.0 (because Translated
          Source, Translated Destination and Translated Service are
          left empty).
	</para>
      </listitem>

      <listitem>
        <para>
          <guilabel>Rule 1</guilabel>: Packets coming into the
	  firewall from internal and DMZ networks are translated so
	  that their source address will change to that of the outside
	  interface on the firewall.
        </para>
      </listitem>

      <listitem>
        <para>
          <guilabel>Rule 2</guilabel>: Packets coming from the
	  Internet to the interface "outside" will be translated and
	  forwarded to the internal server on DMZ represented by the
	  host object "server on dmz".
	</para>
      </listitem>
    </itemizedlist>

    <figure id="pict_220">
      <title>NAT rule set</title>
      <graphic scale="50" fileref="gettingstarted_fig_29.png" />
    </figure>
    
    <para>
      Now we compile the policy of the firewall "guardian" and
      generate the iptables script. To do so, use toolbar button
      located right above the panel that shows policy and nat
      rules. This button compiles rules of the firewall that is opened
      at the moment. Compiler processes Policy, NAT and Routing rules
      even though the panel shows only one kind of rules at a time.
      Another button with the same picture is located in the main
      toolbar under the main menu bar compiles all firewall objects
      defined in the object tree. Of course there is no difference if
      you only have one firewall object.
    </para>

    <para>
      A new dialog appears that allows you to choose which firewalls
      you want to compile. The program keeps track of the changes and
      automatically selects firewalls that require recompile because
      some object they depend on has changed recently. Obviously this
      is only useful if you have several firewalls in the object
      tree. Since the checkbox next to the "guardian" firewall is
      already checked, click <guibutton>Next</guibutton> to proceed.
    </para>

    <figure id="pict_240">
      <title>Compile firewall dialog</title>
      <graphic scale="50" fileref="gettingstarted_fig_30.png" />
    </figure>
    
    <para>
      Firewall Builder calls the appropriate policy compiler. The
      dialog displays compiler progress and results.
    </para>

    <figure id="pict_250">
      <title>Compiler progress page</title>
      <graphic scale="50" fileref="gettingstarted_fig_31.png" />
    </figure>

    <tip>
      <para>
        If compiler finds problems with configuration and issues any
        warning or error messages, the program highlights them using
        different color (blue for warnings and red for errors).  Click
        on the warning and error message and the GUI will switch to
        the firewall object, open corresponding rule set and highlight
        the rule that caused the message.
      </para>
    </tip>
    
    <para>
      Compiler generates an iptables script in a ".fw" file with the
      name the same as the firewall object (guardian.fw). The file is
      placed in the same directory as the .fwb data file. Generated
      iptables script supports standard startup script parameters
      "start", "stop", "status", "reload" and can be used in place of
      the standard system firewall script in the
      <emphasis>/etc/init.d/</emphasis> directory.
    </para>

    <para>
      Firewall Builder can also transfer generated script to the
      firewall and activate it there. It uses ssh to do this (putty on
      Windows). To use the installer, click on the "Install" toolbar
      button located above the firewall policy panel or in the main
      toolbar. Firewall Builder will compile the policy (if it is not
      compiled already) and then open a dialog where you can configure
      the parameters of the installer. Here you need to enter a
      password to authenticate to the firewall. Section
      <xref linkend="compile-install-detail" /> of the Users Guide has
      detailed instructions for setting up and using the installer.
    </para>

    <tip>
      <para>
        Firewall Builder 4.0 can cache password you entered so you
        don't have to enter it again and again if you need to
        reinstall firewall policy several times. The password is never
        stored on disk in any form, it is only cached in the memory of
        the running fwbuilder process and discarded when you stop the
        program. You will need to enter it again when you use the
        program again after that. However this feature really helps
        speed up policy update if you need to do it several times. To
        activate it you need to turn it on in the "Installer" tab of
        the global preferences dialog (menu Edit / Preferences) and
        then turn on checkbox "Remember passwords" in the installer
        dialog. Passwords are stored in a dictionary indexed by the
        firewall name and user name configured in the "Installer" tab
        of the firewall object dialog. This means you can have
        different passwords for different firewall objects.
      </para>
    </tip>

    <figure id="pict_280">
      <title>Parameters of the policy installer</title>
      <graphic scale="50" fileref="gettingstarted_fig_32.png" />
    </figure>

    </sect1>

      <sect1 id="router_acl">
      <title>Configuring Cisco Router ACL</title>

       <para>
        This section of the Users Guide provides an overview
        of everything you need to know to get started configuring
        Cisco router access lists using Firewall Builder. This means
        there is some repetition of concepts and materiels that are 
        included in other sections of the Users Guide. Many of these
        topics are only briefly covered here, so we still suggest 
        reading the other sections of the Users Guide that go in to
        more details.
        </para>
        
        <para> 
        The examples in this section will be based on configuring
        access lists on the Cisco router with the configuration shown
        in the diagram below.
        </para>

      <figure id="gs_acl_example_router">
        <title>Example Router Configuration</title>      
        <graphic fileref="gs/example_router.png" />
      </figure> 

        <sect2 id="gs_acl_step1">
        <title>Creating Objects</title>

        <para>
        Firewall Builder is based on the concept of objects. There are
        a variety of different object types that can be used to define
        IP objects that can be used as the Source and Destination in
        your router ACL rules. Two of the most common IP objects used
        in Cisco access lists are <emphasis>Networks</emphasis> and 
        <emphasis>Addresses</emphasis>.
        </para>

        <title>Network Objects</title>

        <para>
        To create a Network object, for example a network to represent the
        internal 10.0.0.0/24 network in the diagram above, go to the object
        tree on the left side of the screen and double-click the folder
        labeled <emphasis>Objects</emphasis> to expand it. Right click on the folder called
        <emphasis>Networks</emphasis> and select “New Network”. This creates a new network
        object. In the lower portion of your screen, called the Editor
        Panel, you can modify the properties of this object.
        </para>

        <para>
        Change the object name to something that matches the function, in this
        example we are going to call it “Internal Network” to represent the
        network connected to our "inside" interface. The address is set to 10.0.0.0
        and the netmask is 255.255.255.0.
        </para>

      <figure id="gs_acl_new_network">
        <title>New Network Object</title>      
        <graphic fileref="gs/new_network.png" />
      </figure> 

        <para>
        <emphasis>NOTE:</emphasis> When editing the attributes of an object there is no Apply
        or Submit button. Once you edit an attribute as soon as you move away from
        the field you were editing the change will take effect immediately.
        </para>

        <title>Address Objects</title>

        <para>
        To create an object that represents a single IP address, similar to the
        host parameter in a Cisco access list, go to the object tree and
        right-click on the <emphasis>Addresses</emphasis> folder and select "New Address". In the
        Editor Panel change the name of the object to something that reflects its
        function, for example “POP3 Server”, and set the IP address.
        </para>

      <figure id="gs_acl_new_address_steps">
        <title>New Address Object</title>      
        <graphic fileref="gs/new_address_steps.png" />
      </figure> 
            
       </sect2>
       <sect2 id="gs_acl_step2">
       <title>Define The Router</title>

        <para>
        Firewall Builder refers to devices that support filtering rules as
        firewalls. To create a firewall object to represent your router
        click on the “Create new firewall” icon on the main window of
        Firewall Builder. This will launch a wizard that walks you through
        creating your router.
        </para>

        <para>
        Enter a name for the firewall object, in this example we will use
        <emphasis>la-rtr-1</emphasis>. Change the drop down menu for software 
        that is running on the firewall to be “Cisco IOS ACL”.
        </para>

      <figure id="gs_acl_create_router">
        <title>New Address Object</title>      
        <graphic fileref="gs/create_router.png" />
      </figure> 

        <para>
        Click the "Next >" button to continue to the next step in the wizard.
        </para>

        <para>
        When creating a firewall in Firewall Builder you have a choice of
        configuring interfaces manually, or you can use SNMP discovery if you
        have SNMP enabled on your router and you have know the Read-Only or
        Read-Write community string. For this example we are going to configure
        the router interfaces manually.
        </para>

      <figure id="gs_acl_interface_discovery">
        <title>Select Interface Configuration Method</title>      
        <graphic fileref="gs/interface_discovery.png" />
      </figure> 

        <para>
        Click the "Next >" button to continue to the next step.
        </para>

        <para>
        The firewall that you create in Firewall Builder needs to match the router
        that you want to deploy the access lists on.  This means that the <emphasis>interface 
        names</emphasis> and <emphasis>IP addresses</emphasis> in the firewall object that you are
        creating must <emphasis>match exactly</emphasis> to what is configured on the router.
        </para>

        <para>
        Click the green <img src="/4.0/images/getting-started/green_plus.png" />
        icon to add a new interface to the router.  Enter the name of the router
        exactly as it is shown on a router command line when you run “show ip
        interfaces brief” command. In our example the interfaces are
        FastEthernet0/0 and FastEthernet0/1.
        </para>

        <para>
        Set the interface name as FastEthernet0/0 and set the label to outside. Click
        on the Add address button and set the IP address to 192.0.2.1 with a netmask
        of 255.255.255.240.
        </para>

      <figure id="gs_acl_interface_address">
        <title>Set Interface IP Address</title>      
        <graphic fileref="gs/interface_address.png" />
      </figure> 

        <para>
        Click the green <img src="/4.0/images/getting-started/green_plus.png" />
        icon to add another interface to the router.  Enter the information
        in to the wizard to match the second interface as follows:
        </para>
           
      <figure id="gs_acl_interface_address2">
        <title>Interface Tabs</title>      
        <graphic fileref="gs/interface_address2.png" />
      </figure> 

        <para>
        Click on the Finish button.
        </para>

        <para>
        After you create the firewall object representing the router that
        you will be installing the access lists on will be displayed in
        the object tree on the left side.  The Policy object, which is where
        the access list rules are configured, is automatically opened in
        the main window.
        </para>

      <figure id="gs_acl_firewall_object_tree">
        <title>Interface Tabs</title>      
        <graphic fileref="gs/firewall_object_tree.png" />
      </figure> 

        <para>
        Before moving on you should save our data file that contains the new
        firewall object that you just created.  Do this by going to the
        File -> Save As menu item.  Choose a name and location to save the
        file to.
        </para>

        </sect2>

        <sect2 id="gs_acl_step3">
        <title>Configuring Access Lists</title>

        <para>
        After you create a firewall object, for example <emphasis>la-rtr-1</emphasis> from our
        previous example, it will be opened automatically in the object tree and
        its Policy object is opened in the main window for editing. The Policy
        object is where access list rules are configured.
        </para>

        <para>
        To add a new rule to the Policy, click on the green
        <img src="/4.0/images/getting-started/green_plus.png" /> icon at the top
        left of the main window. This creates a new rule with default values set
        to deny all.
        </para>

      <figure id="gs_acl_default_rule">
        <title>Default Rule</title>      
        <graphic fileref="gs/default_rule.png" />
      </figure> 

        <para>
        Every rule includes the following sections:
        </para>

        <itemizedlist>
          <listitem><para><emphasis>Source</emphasis> - this can be one or more IP objects. Default value
          is Any which is the same as the "any" parameter in a Cisco access list
          that matches all IP addresses.</para></listitem>
          <listitem><para><emphasis>Destination</emphasis> - this can be one or more IP objects. Default value
          is Any which is the same as the "any" parameter in a Cisco access list
          that matches all IP addresses.</para></listitem>
          <listitem><para><emphasis>Service</emphasis> - this can be one or more Service object. Example services
          include the TCP and UDP protocols like HTTP and DNS. Default value is Any
          which matches any IP service and is the same as the "ip" parameter in
          Cisco access lists.</para></listitem>
          <listitem><para><emphasis>Interface</emphasis> - this can be one or more interfaces configured on the
          firewall (router) object. Default value is All which means the rule will be
          applied as an access list to all configured interfaces.</para></listitem>
          <listitem><para><emphasis>Direction</emphasis> - options are Inbound, Outbound and Both. This defines
          whether the resulting access-group will be applied to interfaces as "in" or
          "out". Both will generate an identical rule for "in" and "out". Default
          value is Both.</para></listitem>
          <listitem><para><emphasis>Action</emphasis> - options are Accept and Deny. This matches the Cisco
          access list parameters "permit" and "deny". Default value is Deny.</para></listitem>
          <listitem><para><emphasis>Options</emphasis> - options are Logging On and Logging Off. Setting
          Logging On matches the Cisco access list parameter "log".  Default value
          is Logging On.</para></listitem>
        </itemizedlist>

        <title>Setting the Source</title>

        <para>
        To set the Source of a rule, drag-and-drop at least one IP object from the
        tree to the Source section of your rule. For example, if you created a
        Network object called Internal Network you would drag this to your rule
        as shown below.
        </para>

      <figure id="gs_acl_new_rule_source">
        <title>Default Rule</title>      
        <graphic fileref="gs/new_rule_source.png" />
      </figure> 

        <para>
        After you drop the network object into the rule the Source section will
        change from Any to Internal Network.
        </para>

      <figure id="gs_acl_rule_step1">
        <title>Default Rule</title>      
        <graphic fileref="gs/rule_step1.png" />
      </figure> 

        <para>
        <emphasis>NOTE:</emphasis>  You can have more than one IP object in the Source and
        Destination sections. When Firewall Builder generates the Cisco command
        line access lists it will automatically split the rule in to multiple
        lines if necessary.
        </para>

        <title>Setting the Destination</title>

        <para>
        Setting the Destination is exactly the same as setting the Source, except
        you drag-and-drop IP objects in to the Destination section of the rule.
        </para>

        <title>Setting the Service</title>

        <para>
        Firewall Builder comes with hundreds of <emphasis>predefined</emphasis> objects including
        Service objects for almost all standard protocols. To access these objects
        switch to the Standard library by selecting it from the drop down at the
        top of the Object tree window.
        </para>

      <figure id="gs_acl_switch_library">
        <title>Default Rule</title>      
        <graphic fileref="gs/switch_library.png" />
      </figure> 

        <para>
        Services are located in the <emphasis>Services</emphasis> folder. For example, if you wanted
        to define a rule that permitted HTTP traffic you would navigate to
        the HTTP service by opening the Services folder, then opening the <emphasis>TCP</emphasis>
        folder and scrolling down until you find the http object.
        </para>

        <para>
        Once you find the http object, drag-and-drop from the tree on the left in
        to the Service section of the rule in the Rules window.
        </para>
            
      <figure id="gs_acl_new_rule_service">
        <title>Default Rule</title>      
        <graphic fileref="gs/new_rule_service.png" />
      </figure> 

        <para>
        <emphasis>IMPORTANT</emphasis> To switch back to the User library, which contains the
        objects that you created, click on the drop down menu that says Standard
        and select User from the list of libraries.
        </para>

        <title>Setting the Interface</title>

        <para>
        Set the Interface for the rule by dragging-and-dropping an interface
        object from the firewall (router) object to the Interface section of
        the rule. This will define which interface on the router that the
        access list will be applied to as an "access-group".
        </para>
            
      <figure id="gs_acl_new_rule_interface">
        <title>Default Rule</title>      
        <graphic fileref="gs/new_rule_interface.png" />
      </figure> 

        <title>Setting the Direction</title>

        <para>
        The direction of the rule is based on the traffic you want to filter.
        Traffic coming in to an interface should have the rule Direction set
        to Inbound and traffic going out of an interface should have the rule
        Direction set to Outbound.
        </para>

        <para>
        The Direction combined with the Interface setting will determine which
        interfaces should have this rule applied.
        </para>

        <para>
        <emphasis>NOTE:</emphasis> Setting the Direction to Both will create 2 access lists
        per rule, one that will be applied as an access-group "in" and one that
        will be applied as an access-group "out".
        </para>

        <title>Setting the Action</title>

        <para>
        The action controls whether traffic matching the rule should be permitted
        or denied. Remember, all Cisco access lists have an implicit deny at the
        end of the list, so any traffic that has not matched a rule that permits
        the traffic will be dropped.
        </para>

        <title>Setting the Options</title>

        <para>
        Logging for rule matches is set in the Options section. By default logging
        is turned on. To turn logging off, right-click in the Options section and
        select Logging Off.
        </para>

        <title>Example of a Complete Rule</title>

        <para>
        The following is an example of a complete rule that allows traffic from
        an internal network to any destination address arriving inbound on the
        "inside" interface for the HTTP and HTTPS protocols.
        </para>
        
      <figure id="gs_acl_new_rule_complete">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/new_rule_complete.png" />
      </figure> 

        <title>Addtional Tips</title>

        <title>Adding a Rule</title>

        <para>
        To add a new rule click the
        <img src="/4.0/images/getting-started/green_plus.png" /> icon at the
        top of the Rules Editor window.  This will insert a new rule above
        the current rule. To add a new rule below the current rule right-click
        on a rule and select "Add New Rule Below".
        </para>

      <figure id="gs_acl_add_new_rule_below">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/add_new_rule_below.png" />
      </figure> 
            
        <title>Copy-and-Paste</title>

        <para>
        In addition to drag-and-drop you can also copy-and-paste objects.
        For example, you can right-click on the Internal Network object in
        the first rule and select Copy. Navigate to the Source section of
        the new rule you just created and right-click and select Paste.
        </para>

        <title>Using Filters to Find Objects</title>

        <para>
        Filters provide a way to quickly find objects in the tree without
        having to open multiple folders and scroll. For example, if you wanted
        to use the POP3 protocol in a rule you could use the filter to find it.
        </para>

        <para>
        The POP3 protocol object is located in the Standard library, so select it
        from the dropdown menu at the top of the Object Window. Type pop3 in to
        the filter field. This will display all objects in the current library
        that contain pop3.
        </para>

      <figure id="gs_acl_pop3_filter">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/pop3_filter.png" />
      </figure> 
            
        <para>
        <emphasis>NOTE:</emphasis> After you are done with the filtered object, clear the
        filter field by clicking the X to the right of the input box and then
        switch back to the User library by selecting it in the dropdown menu
        at the top of the object panel.
        </para>

        <para>
        For the following sections we are going to assume that the following
        three rules defined for the router configuration shown above.
        </para>

      <figure id="gs_acl_three_rules">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/three_rules.png" />
      </figure> 
         
        </sect2>
            
        <sect2 id="gs_acl_step4">
        <title>Compile and Install</title>

        <para>
        In Firewall Builder the process of converting the rules from the
        Firewall Builder GUI syntax to the target device commands is called
        <emphasis>compiling</emphasis> the configuration.
        </para>

        <para>
        To compile, click on the Compile icon which looks like a hammer
        <img src="/4.0/images/getting-started/hammer_small.png" />.  If you
        haven’t saved your configuration file yet you will be asked to do so. After
        you save your file a wizard will be displayed that lets you select which
        firewall(s) you want to compile. In this example we are going to complie
        the firewall called <emphasis>la-rtr-1</emphasis> configured with the rules above.
        </para>

        <para>
        If there aren’t any errors, you should see some messages scroll by in the
        main window and a message at the top left stating Success.
        </para>

        <para>
        To view the output of the compile, click on the button that says Inspect
        Generated Files.  This will open the file that contains the commands in
        Cisco command format.  Note that any line that starts with “!” is a comment.
        </para>
            
      <figure id="gs_acl_compiler_output">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/compiler_output.png" />
      </figure> 
            
        <para>
        The output from the compiler is automatically saved in a file in the same
        directory as the data file that was used to create it. The generated files
        are named with the firewall name and a .fw extension. In our example the
        generated configuration file is called la-rtr-1.fw. You can copy and copy and
        paste the commands from this file to your router or you can use the built-in
        Firewall Builder installer.
        </para>

        <title>Installing</title>

        <para>
        Firewall Builder can install the generated configuration file for you
        using SSH.  To use the installer we need to identify one of the router
        interfaces as the “Management Interface”.  This tells Firewall Builder
        which IP address to connect to on the router.
        </para>

        <para>
        Do this by double-clicking the firewall object to expand it, and then
        double-clicking on the interface name that you want to assign as the
        management interface.  In our case this is interface FastEthernet0/1
        which is the interface connected to the internal network.
        </para>

      <figure id="gs_acl_set_mgmt_interface">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/set_mgmt_interface.png" />
      </figure> 

        <para>
        <emphasis>CAUTION!</emphasis> Any time you are changing access lists on your router
        you face the risk of locking yourself out of the device.  Please be
        careful to always inspect your access lists closely and make sure that
        you will be able to access the router after the access list is installed.
        </para>

        <para>
        To install your access lists on the router, click on the install icon
        <img src="/4.0/images/getting-started/install_icon.png" />. This will
        bring up a wizard where you will select the firewall to install. Click
        Next > to install the selected firewall.
        </para>

      <figure id="gs_acl_install_checkbox">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/install_checkbox.png" />
      </figure> 

        <para>
        Firewall Builder will compile your rules converting them in to
        Cisco access list command line format. After the compile completes
        successfully click Next >. Enter your username, password and enable
        password.
        </para>

      <figure id="gs_acl_install_screen">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/install_screen.png" />
      </figure> 

        <para>
        After the access list configuration is installed you see a message
        at the bottom of the main window and the status indicator in the
        upper left corner of the wizard will indicate if the installation
        was successful.
        </para>
            
      <figure id="gs_acl_install_success">
        <title>Completed New Rule</title>      
        <graphic fileref="gs/install_sucess.png" />
      </figure> 
            
        <para>
        By default Firewall Builder will connect to your router using SSH and
        send the commands line-by-line to the router. Depending on the size of
        your access lists this can be slow.
        </para>

        <para>
        If your router is running IOS version 12.4 you can select an option to
        have Firewall Builder scp the generated configuration file to the router
        instead of applying it line-by-line. This is much faster and is recommended
        if your router supports it.
        </para>

        <para>
        This requires ssh version 2 to be enabled on the router and scp server
        to be enabled. You can find complete instructions for enabling SCP
        installation in our
        <a href="/4.0/docs/users_guide/installer_on_ios.html">Users Guide</a>.
        </para>
    </sect2>
    </sect1>
 
  </chapter>
