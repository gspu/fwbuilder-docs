    <sect1 id="import_firewall">
      <title>Importing Existing Firewall Configurations into Firewall Builder</title>

          <para>
            Existing firewall configurations can be imported into 
            Firewall Builder using the Import Firewall wizard. Import 
            is supported for the following platforms.
          </para>

          <itemizedlist>
            <listitem>iptables</listitem>
            <listitem>Cisco IOS router access-lists</listitem>
            <listitem>Cisco ASA / Cisco PIX (requires Firewall Builder V4.2 or greater)</listitem>
          </itemizedlist>
            
      <sect2 id="import_firewall_overview">
      <title>Importing Existing Firewall Configurations</title>

      <para>
        To start the Import Firewall wizard select the File -> 
        Import Firewall menu item. This will launch the wizard 
        as shown in <xref linkend="import_firewall_dialog-1"/>.
      </para>

      <figure id="import_firewall_dialog-1">
        <title>Main Import Firewall Wizard</title>
        <graphic scale="50" fileref="network_discovery/images/import_firewall_dialog-1.png"/>
      </figure>
              
      <para>
        To start the import process use the Browse function to select 
        the file that contains the firewall configuration that you want 
        to import.
      </para>

      <note>
      <bridgehead>iptables</bridgehead>
        <para>
          The configuration file format must be in the iptables-save 
          format. For example, run the "iptables-save > myfirewall.conf" command 
          on the firewall you want to import, transfer that file to the system 
          running the Firewall Builder application and select this file in the 
          import wizard.
        </para>

      <bridgehead>Cisco IOS router access-lists</bridgehead>
        <para>
          Cisco IOS router access-lists must be in the format displayed when 
          the "show run" command is executed. Copy the output from the "show 
          run" command to a file an the system that Firewall Builder is running 
          on.
        </para>

      <bridgehead>Cisco ASA / Cisco PIX</bridgehead>
        <para>
          Cisco ASA and Cisco PIX configurations must be in the format displayed 
          when the "show run" command is executed. Copy the output from the "show 
          run" command to a file an the system that Firewall Builder is running 
          on.
        </para>
      </note>

      <para>
        After you have selected the configuration file to import click on the 
        Continue button. 
      </para>
          
      <para>
        Firewall Builder will automatically detect the type of configuration 
        file that is being imported and will display a preview of the file 
        in the window.
      </para>

      <figure id="import_firewall_dialog-2">
        <title>Import Firewall Wizard - Configuration Preview</title>
        <graphic scale="50" fileref="network_discovery/images/import_firewall_dialog-2.png"/>
      </figure>

      <para>
        Click the Continue button. On the next page, shown in 
        <xref linkend="import_firewall_dialog-3"/>, enter a name for the firewall 
        object that will be created.
      </para>

      <figure id="import_firewall_dialog-3">
        <title>Import Firewall Wizard - Set Firewall Name</title>
        <graphic scale="50" fileref="network_discovery/images/import_firewall_dialog-3.png"/>
      </figure>

      <note>
      <para>
        By default the option to "Find and use existing objects" is enabled. 
        When this option is enabled Firewall Builder will attempt to match elements 
        in in the firewall's configuration file with objects that are already 
        configured in the Firewall Builder object tree. This includes both Standard 
        Library objects and objects the user has created.
      </para>

      <para>
        For example, if an imported firewall configuration file has an object 
        or rule that uses TCP port 22, SSH, Firewall Builder will match that to 
        the pre-existing Standard ssh object instead of creating a new TCP service 
        object.
      </para>
      </note>

      <para>
        After entering the firewall object name click Commit. Firewall Builder 
        will show a log of the import process and will include any warning messages 
        in blue colored text and any error messages in red colored text. 
      </para>
        
      <figure id="import_firewall_dialog-4">
        <title>Import Firewall Wizard - Import Process Log</title>
        <graphic scale="50" fileref="network_discovery/images/import_firewall_dialog-4.png"/>
      </figure>
        
       <para> 
        Depending on the platform this will either be the final step of the 
        wizard or the user will be guided through platform specific 
        configuration activities.
      </para>
              
      </sect2>

      <sect2>
        <title>iptables Import Example</title>

        <para>
          For this example we are going to import a very basic iptables 
          configuration from a firewall that matches the diagram in 
          <xref linkend="iptables_import_diagram"/>.
        </para>

        <figure id="iptables_import_diagram">
          <title>Firewall Example</title>
          <graphic scale="50" fileref="network_discovery/images/iptables_import_diagram.png"/>
        </figure>

          <para>
            Firewall Builder imports iptables configs in the format of 
            iptables-save. Script <command>iptables-save</command> is part
            of the standard iptables install and should be
            present on all Linux distribution. Usually this
            script is installed in <emphasis>/sbin/</emphasis>. 
          </para>
            
          <para>
            When you run this script, it dumps the current iptables 
            configuration to stdout. It reads iptables rules directly form 
            the kernel rather than from some file, so what it dumps is what 
            is really working right now. To import this into Firewall Builder, 
            run the script to save the configuration to a file:
          </para>
  
  <programlisting>
iptables-save &gt; linux-1.conf
  </programlisting>

          <para>
            After copying <filename>linux-1.conf</filename> to the system where 
            Firewall Builder is running, launch the wizard by selecting the 
            File -> Import Firewall menu item.
          </para>

          <para>
            Click <guibutton>Browse</guibutton> to find <filename>linux-1.conf</filename>. 
          </para>

        <figure id="iptables-import-example-1">
          <title>Select File with iptables-save Configuration</title>
          <graphic scale="50" fileref="network_discovery/images/iptables-import-example-1.png"/>
        </figure>

        <para>
          Click <guibutton>Continue</guibutton> to move to the next window which 
          shows a preview of the configuration file that will be imported and the 
          type of firewall that Firewall Builder has detected it to be.
        </para>

        <sect3>
        <title>Importing an iptables configuration created in FireStarter</title>

          <para>
  
                  The following example demonstrates an import of an
                  iptables policy generated by <emphasis>Firestarter</emphasis>,
                  another popular iptables configuration management
                  program.
                
          </para>
  

          <para>
  
                  After the platform is selected and file name
                  entered, click <guibutton>Next</guibutton> to start the process.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_2.png"/></figure>

          <para>
  
                  The program tries to interpret the configuration file
                  rule-by-rule and recreates its equivalent in
                  Firewall Builder. The progress window displays errors, if
                  any, as well as some diagnostics that shows network
                  and service objects created in the process. Note
                  that user-defined iptables chains found in the
                  configuration file will be re-created in Firewall Builder
                  as policy rule sets. The screenshot shows rulesets
                  "LSI", "LSO", "OUTBOUND" being created. (There were
                  more but they did not fit in the output
                  window.) Address objects "h-10.3.14.10",
                  "h-10.3.14.255" and few others have been created as
                  well. Service objects "tcp fsra/s", "udp 0-0:0-0",
                  "icmp -1/-1" and few others have also been created.
                
          </para>
  

          <para>
  
                  Note that the new firewall object created in the
                  process has generic name "New Firewall". This is
                  because iptables configuration file used for import
                  does not have information about firewall machine
                  name. It also does not have information about its
                  interfaces, their names and addresses. The program
                  can infer their names when it encounters
                  "-i &lt;interface&gt;" or "-o &lt;interface&gt;" clauses in the
                  iptables configuration lines. It cannot reliably
                  detect their addresses though. You need to manually rename the
                  firewall object and add IP addresses to interfaces
                  after the import.
                
          </para>
  

          <para>
  
                  Note also that only the IPv4 part of the iptables
                  configuration was imported. Currently, import of
                  IPv6 iptables configuration is not supported.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_3.png"/></figure>

          <para>
  
                  Screenshot above shows rule sets that the
                  program created from the configuration it
                  imported. Rule sets "INBOUND", "LOG_FILTER", "LSI",
                  "LSO", "OUTBOUND", "Policy" are all of the type
                  "Policy" and contain filtering rules. There were no
                  NAT rules in the original configuration so the rule
                  set "NAT" is created but is empty. The names of all
                  policy rule sets match names of the iptables chains
                  in the original configuration.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_7.png"/></figure>

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_8.png"/></figure>

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_9.png"/></figure>

          <para>
  
                  Screen shots above demonstrate address and service
                  objects created by the program. The importer writes a comment
                  in each object to remind you that the object was created
                  automatically on import. Names of these objects are
                  chosen automatically, but you can rename objects to give
                  them more meaningful names. Some of the objects
                  created during import have the same properties as
                  existing service and address objects from the
                  Standard objects library. Currently the program does
                  not cross-match them and just creates new objects,
                  however in the future it may use Standard objects
                  instead.
                
          </para>
  

          <para>
  
                Some rules in the original iptables config used
                "--tcp-flags" parameter to match only certain
                combinations of tcp flags. Here is an example:
              
          </para>
  

  <programlisting>
-A INPUT -s 10.3.14.10 -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT 
              </programlisting>

          <para>
  
                In order to be able to reproduce this rule, Firewall Builder
                created a special TCP service object with given
                combination of tcp mask and flags:
              
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_10.png"/></figure>

          <para>
  
                  The following screenshot shows rules created
                  in the main Policy rule set. These are the top
                  iptables rules, though some of them branch off to the other
                  Policy rule sets. Some of the rules in the original
                  policy did not match state (did not have clause "-m
                  state --state NEW" or similar), these rules were
                  created with the flag "stateless" turned on. In
                  Firewall Builder, this makes the policy compiler generate
                  iptables commands without a "-m state --state NEW"
                  clause that matches the original.  These rules are
                  marked with an icon that represents non-default rule
                  options in the column <guilabel>Options</guilabel>.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_14.png"/></figure>

          <para>
  
                  Let's inspect one group of rules a little closer. The
                  original iptables file contained the following
                  commands:
                
          </para>
  

  <programlisting>

-A INPUT -i eth0 -j INBOUND 


-A INBOUND -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A INBOUND -p udp -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A INBOUND -s 10.3.14.0/255.255.255.0 -j ACCEPT 
-A INBOUND -s 10.3.14.0/255.255.255.0 -p tcp -m tcp --dport 22 -j ACCEPT 
-A INBOUND -s 10.3.14.0/255.255.255.0 -p udp -m udp --dport 22 -j ACCEPT 
-A INBOUND -j LSI 

                </programlisting>

          <para>
  
                  The first rule is in chain INPUT and was recreated
                  as rule #11 in the Policy rule set (rule colored
                  green). Since it was in INPUT, the destination
                  object in the rule #11 is the firewall itself. The
                  "-i eth0" clause translated into interface object
                  "eth0" in the "Interface" rule element and direction
                  "Inbound". The action of the rule #11 is "Branch",
                  pointing to the rule set "INBOUND". This is direct
                  re-creation of the original rule in the iptables config.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_15.png"/></figure>

          <para>
  
                  This screenshot demonstrates rules created in the
                  rule set "INBOUND". Rule #0 matches CustomService
                  object "custo-0-tcp" that was created to match a 
                  combination of protocol "tcp" and state
                  "RELATED,ESTABLISHED". This object is shown in the
                  following screenshot:
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_11.png"/></figure>

          <para>
  
                  Firewall Builder automatically adds a rule on top of the 
                  generated iptables script to match packets in states
                  "ESTABLISHED, RELATED". With that rule, it is not
                  necessary to have a rule like #0 in INBOUND, but
                  since the original script had it, Firewall Builder reproduced
                  it.
                
          </para>
  

          <para>
  
                  Rule #1 in INBOUND matches protocol UDP and state
                  "ESTABLISHED,RELATED". Other rules in INBOUND
                  reproduce original rules from the chain INBOUND and
                  match packets coming from the local net heading for
                  the firewall machine. It is easy to see that the
                  original policy was redundant: rules #2-4 match the
                  same source and destination addresses but different
                  services, but rule #2 matches any service which
                  means rules #3 and 4 will never match any
                  packets. Fwbuilder will detect this problem
                  automatically if you try to compile this policy
                  (this is called "Rule shadowing").
                
          </para>
  

          <para>
  
                  All packets not matched by any rule in INBOUND will
                  match the last rule in this rule set, which branches to
                  the rule set LSI. Rule set LSI logs various packets
                  and drops them:
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_16.png"/></figure>

          <para>
  
                  You might wonder why we have all these rules
                  with action "Continue".
                
          </para>
  

          <para>
  
                  When a rule is marked as "logging" in Firewall Builder, it
                  gets an icon in the column "Options" that represents
                  logging. This icon appears either by itself or next to
                  the icon that represents non-default rule
                  options. However, iptables does not allow for an
                  action "Accept" or "Deny" to be used in combination
                  with logging. In iptables, logging is a separate target
                  just like "ACCEPT" or "DROP". Because of that,
                  Firewall Builder splits a rule that has action "Accept" or
                  "Deny" or any other with logging turned on. One such
                  rule becomes two or more iptables rules in the
                  generated script. Unfortunately when iptables script
                  is imported back, the program cannot merge such
                  rules and logging rules appear in the rule set as
                  separate rules with a logging icon in the "Options"
                  column and action "Continue". This is a valid
                  configuration in Firewall Builder, it just means that the
                  rule generates a log record but does not make any
                  decision whether the packet should be accepted or
                  denied.
                
          </para>
  

          <para>
  
                  Here is the fragment of the original iptables rules in
                  the chain LSI:
                
          </para>
  

  <programlisting>
-A LSI -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN \
    -m limit --limit 1/sec -j LOG --log-prefix "Inbound " --log-level 6 
-A LSI -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j DROP 
                </programlisting>

          <para>
  
                  These rules become rules #1 and 2 in rule set LSI in
                  Firewall Builder. The first rule, the one that does
                  logging, becomes a separate rule because this is how
                  it is done in iptables. If this policy was created
                  in Firewall Builder, rules #1 and 2 would be just one rule
                  in the GUI.  Double-clicking in the column <guilabel>Options</guilabel>
                  in rule #1 opens a dialog where you can inspect and
                  edit its options. The <guilabel>Limit</guilabel> tab in this dialog
                  controls parameters in the iptables "limit" module, which
                  was used in the original rule. Screenshot below
                  demonstrates how the policy importer recognized these
                  parameters and reproduced them in the rule options:
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_17.png"/></figure>

      </sect3>

      <sect3>
        <title>Limitations</title>

          <para>
  
                  The iptables policy importer in Firewall Builder has its
                  limitations. The main limitation is that it can only
                  parse certain set of iptables modules and
                  targets. There are too many modules and associated
                  targets out there and supporting all of them is next
                  to impossible. However, it supports the core
                  functionality and most popular modules. Even though the 
                  importer tries to match the original
                  configuration as closely as possible, you should always review the 
                  rules and objects it creates and edit resulting
                  rules. Most of the time rules can be simplified,
                  such as with logging rules as was explained
                  above. Often you can merge multiple rules by putting
                  several objects in a <guilabel>Source</guilabel> or <guilabel>Destination</guilabel> or
                  <guilabel>Service</guilabel> field. Using Object and Service groups is another
                  good way to simplify rules.
                
          </para>
  
        </sect3>
      </sect2>

      <sect2>
        <title>Importing Cisco IOS access lists configuration</title>

          <para>
  
                  Importing an IOS access lists configuration is more
                  straightforward because branching is not possible
                  there. To import a configuration, first you need to
                  save it using the <command>show run</command> command. IOS has literally
                  hundreds of different commands and configuration
                  clauses, but Firewall Builder can only parse those related
                  to the access lists configuration. Other commands
                  will be ignored. There is no need to edit the 
                  configuration prior to importing it into Firewall Builder
                  (except for the "banner" command, see below). </para>

          <para>A saved
                  IOS configuration has information about the router's name
                  and its interfaces. This information will be used to
                  recreate objects in Firewall Builder. Parser will not only
                  create interface objects with proper names, it will
                  also attach address objects to them to describe
                  their IP addresses.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_20.png"/></figure>

          <para>
  
                  As with iptables, we start with
                  <guimenuitem>File/Import Policy</guimenuitem> and enter the filename in
                  the dialog. The <guilabel>Platform</guilabel> pull-down menu
                  should be set to <guimenuitem>Cisco IOS</guimenuitem>. Click <guibutton>Next</guibutton> to
                  start the import process.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_21.png"/></figure>

          <para>
  
                  The program recognized router name "c3620" and its
                  interfaces, created interface objects with their IP
                  addresses and then created some address and service
                  objects. This test router config contains the
                  following lines (this is just a fragment, there are
                  more interfaces and more ACLs):
                
          </para>
  

  <programlisting>

interface FastEthernet0/0
 ip address 192.168.100.100 255.255.255.0 secondary
 ip address 10.3.14.201 255.255.255.0
 ip access-group fe0_0_acl_in in
 ip access-group fe0_0_acl_out out
 no ip mroute-cache
 duplex auto
 speed auto
!
interface Ethernet1/0
 description Test [test] {test} (and one more test) /weird:characters#$%^&amp;*/
 ip address 192.168.171.2 255.255.255.0
 ip access-group e1_0_acl_in in
 ip access-group e1_0_acl_out out
 no ip mroute-cache
 ip ospf cost 65000
 half-duplex
 crypto map real


!################################################################
ip access-list extended e1_0_acl_in
 deny   ip any any fragments
 permit tcp host 10.3.14.40 host 192.168.171.2 eq 22 log
 permit tcp host 10.3.14.40 host 10.3.14.201 eq 22 log
 permit ip any 10.3.14.0 0.0.0.255 log
 deny   ip any any log
!################################################################
ip access-list extended e1_0_acl_out
 permit ip 10.3.14.0 0.0.0.255 any log
 deny   ip any any log

                </programlisting>

          <para>
  
                  The parser recognizes comments and skips them, but text
                  from interface descriptions goes into comments in
                  the Interface objects.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_22.png"/></figure>

          <para>
  
                  Firewall Builder recognizes both named and regular
                  extended access lists. Each separate access list is
                  recreated in Firewall Builder in the same main Policy rule
                  set. The program recognizes "ip access-group"
                  commands and puts the corresponding interface object in
                  the "Interface" rule element of the rules it
                  creates.
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_30.png"/></figure>

          <para>
  
                  The original configuration used the same access list
                  "133" with two interfaces:
                
          </para>
  

  <programlisting>

interface Ethernet1/1
 ip address 10.10.10.10 255.255.255.0
 no ip mroute-cache
!
!  Note - the same access list applied both in and out
 ip access-group 133 in
 ip access-group 133 out
 no shutdown
 half-duplex
!
interface Ethernet1/2
 ip address 10.10.20.20 255.255.255.0
 no ip mroute-cache
!
!  Note - the same access list applied both in and out
!  the same list is applied to eth 1/1 and eth 1/2
 ip access-group 133 in
 ip access-group 133 out
 no shutdown
 half-duplex
!
                </programlisting>

          <para>
  
                  The program recognizes this and creates object group
                  "intf-acl_133" with these two interfaces as members:
                
          </para>
  

        <figure><title/><graphic scale="50" fileref="network_discovery/images/importer_31.png"/></figure>

          <para>
  
                  It then uses this group in the <guilabel>Interface</guilabel> element
                  of rules #0, 1 and 2 to reproduce rules from the
                  access list "133".
                
          </para>
  

          <para>
  
                  Interface configuration commands visible in the
                  config snippets above, such as "half-duplex",
                  "duplex auto", "speed auto", various protocol
                  configuration commands and other commands supported
                  by IOS inside the "interface" block are ignored.
                
          </para>
  
        <sect3>
        <title>Limitations</title>

          <para>
  
                  One IOS configuration construct that Firewall Builder can
                  not import is the "banner" command. This command is
                  special in that it allows you to set an arbitrary
                  terminator character, and then it allows any text up
                  to this character. This creates a problem for the
                  Firewall Builder parser because the terminator character
                  can be arbitrary. You need to edit and remove banner
                  from the saved configuration file before importing
                  it.
                
          </para>
        </sect3>
      </sect2>
    </sect1>

