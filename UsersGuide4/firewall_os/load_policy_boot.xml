  <sect1 id="load_policy_on_reboot">
    <title>How to make your firewall load your firewall policy on reboot</title>
    
    <sect2>
      <title>Making the Firewall Load the Firewall Policy After Reboot: iptables</title>

      <para>
        The procedure for ensuring that the firewall loads the policy after 
        reboot depends on what Linux distribution your firewall
        is based on. Firewall Builder generates the policy
        in a form of a shell script for the firewall based
        on Linux and iptables. To activate the policy at boot
        time, you must execute this script at boot time
        one way or another.
      </para>
      

      <para>
        The standard method is to locate the generated script in
        the /etc or /etc/firewall directory and add a line at
        the bottom of the 
        <emphasis>/etc/rc.d/rc.local</emphasis> script (for Mandrake and
        RedHat systems), the <emphasis>/etc/rc.local</emphasis> script (for Debian, Ubuntu, and derivative systems)
        or the <emphasis>/etc/init.d/boot.local</emphasis> script (for SuSE systems) as shown below:
      </para>
      

      <programlisting>
/etc/firewall/firewall.fw
      </programlisting>
      <para>
        When this is done, the firewall script runs when machine executes
        boot-time scripts. The name of the file is the same
        as the name of the firewall object in Firewall
        Builder GUI, with extension ".fw".  So, if
        firewall object name is <emphasis>guardian</emphasis>, then
        fwbuilder puts generated policy in the file
        <emphasis>guardian.fw</emphasis>.
      </para>
      

      <para>
        Since the firewall policy generated by Firewall Builder is
        installed by running this script at a boot time, any
        other firewall startup script that might be supplied
        by the vendor of your Linux distribution should be
        disabled. On Mandrake and RedHat systems, this can be done
        using the following command:
      </para>
      

      <programlisting>
chkconfig --level 2345 iptables off
      </programlisting>

      <para>
        On SuSE use command
      </para>
      

      <programlisting>
chkconfig -e
      </programlisting>

      <para>
        and change state of services as follows:
      </para>
      

      <programlisting>
SuSEfirewall2_final       off
SuSEfirewall2_init        off
SuSEfirewall2_setup       off
      </programlisting>

      <para>
        (There must be better way to turn firewall off on SuSE, but we do not know it.)
      </para>
      

      <para>
        Another method to get firewall policy automatically
        installed at boot time uses scripts supplied by
        Mandrake or RedHat. You still need to copy the generated
        script to the firewall machine and execute it there.
        (This can be done using installer scripts
        fwb_install or fwbinstaller.) Once the policy has
        been tested and works as expected, you just execute
        <command>service iptables save</command> to
        save the policy. Now the policy will be activated at
        a boot time if the <emphasis>iptables</emphasis> service is
        active. You can make it active on Mandrake and
        RedHat using the following command:
      </para>
      

      <programlisting>
chkconfig --level 2345 iptables on
      </programlisting>

      <note>
        <para>
          The script generated by Firewall Builder
          does more than just set iptables rules; it also
          adds virtual IP addresses to the interfaces of the
          firewall and configures kernel parameters. It can
          get real IP addresses of interfaces with dynamic
          addresses and checks if interfaces are present and
          "up" at the time when firewall policy is
          applied. The standard
          scripts <emphasis>iptables-save</emphasis>
          and <emphasis>iptables-restore</emphasis> only manage
          iptables rules; other tasks performed by the
          script generated by Firewall Builder will not be
          done upon reboot if you use this method.
        </para>
      </note>

      <sect3>
        <title>Restarting the Firewall Script when an Interface Address Changes</title>

        <para>
          The Firewall policy script generated by Firewall Builder for
          iptables firewalls needs to be restarted every time the 
          IP address of a dynamic interface changes. This
          section explains why is it so and how this can be
          done.
        </para>
        

        <para>
          The iptables firewall policy script generated by 
          Firewall Builder determines the IP addresses of all
          dynamic interfaces and assigns them to variables,
          which it then uses in the policy rules. This helps
          to build rules that require knowing the address of the
          interface correctly, such as anti-spoofing rules.
          On the other hand, if interface's address changes
          after the policy has been loaded and activated, the
          firewall script needs to be restarted.
        </para>
        

        <para>
          The firewall can be restarted from one of the
          scripts that get called by PPP or DHCP daemons
          whenever the connection is established or a new address
          lease is obtained. For example, the DHCP daemon
          distributed with all major Linux distributions calls
          a script named <filename>dhclient-exit-hooks</filename> 
          when a new DHCP lease is obtained. To restart the 
          Firewall Builder-generated firewall script after a 
          new DHCP lease is obtained, add the following lines to 
          the <filename>dhcclient-exit-hooks</filename>.
        </para>

        <programlisting>
#!/bin/sh
/etc/firewall/firewall.fw
        </programlisting>
       
        <note>
        <para>
        The location of the <filename>dhcclient-exit-hooks</filename> 
        can vary, but it is usually found in either <filename>/etc</filename> 
        or <filename>/etc/dhcp3</filename>, depending on your system. You 
        may have to create the file if it does not exist already. Check 
        for the proper file location by running the <emphasis>man 
        dhclient-script</emphasis> command.
        </para>
         
        <para>
          See man page dhclient-script(8) for a detailed explanation.
        </para>
        </note>

        <note>
          <para>
            On SUSE systems, you should use YAST to
            configure this. Start the YAST control center, go to
            "System", then "Editor for
            /etc/sysconfig files" in the right panel, and
            when the editor appears, choose
            "Network/DHCP/DHCP client" in the tree
            and edit "DHCLIENT_SCRIPT_EXE".
          </para>
        </note>

        <para>
         The PPP daemon calls the <filename>/etc/ppp/ip-up</filename> script when
          the connection is established and the IP address
          obtained. This script can be used to restart the
          firewall as well. Just as
          with <filename>dhclient-exit-hooks</filename>, just add a
          call to the <filename>/etc/firewall/firewall.fw</filename> script at the
          bottom of the <filename>/etc/ppp/ip-up</filename> file.
        </para>

        <note>
          <para>
            The <filename>"/etc/firewall/firewall.fw"</filename> file should be
            replaced everywhere with the real name of the firewall
            script. Firewall Builder stores firewall commands in
            the file with the name the same as the name of the
            firewall object, with an extension ".fw".
          </para>
        </note>
        

        <note>
          <para>
            Currently, Firewall Builder requires
            restart of the firewall script only on iptables
            firewalls. Firewalls based on OpenBSD pf do not
            require a restart, because pf can dynamically load IP
            address of the interface when it changes. Currently, on ipfilter and ipfw
            firewalls address of the dynamic interface has to be
            entered in the GUI, or it cannot be used in the
            rule. This limitation will be removed in the future
            versions of the product.
          </para>
        </note>
        
      </sect3>
    </sect2>

    <sect2>
      <title>Making the Firewall Load the Firewall Policy After Reboot: pf</title>

      <para>
        For OpenBSD pf, Firewall Builder puts the firewall policy in the
        file <emphasis>firewall.conf</emphasis> and the activation script
        in <emphasis>firewall.fw</emphasis>
      </para>
      

      <para>
        To activate the policy, copy both files to the
        directory <emphasis>/etc</emphasis> on the firewall machine
        using <emphasis>fwbinstaller</emphasis>.
        <emphasis>Fwbinstaller</emphasis> executes the
        activation script to install the policy
        immediately. The activation script not only loads PF
        rules, it also configures aliased IP addresses on
        the firewall's interfaces, which is important if you
        use multiple addresses for NAT and want Firewall Builder to
        configure them for you. It also sets kernel
        parameters defined in the "Network" tab of the
        firewall dialog (such as IP forwarding etc.) In
        order to make the firewall activate it at a boot
        time, call the firewall script from the
        file <emphasis>/etc/rc.local</emphasis>, as follows:
      </para>
      

      <programlisting>
/etc/firewall.fw
      </programlisting>

      <para>
        If you do not want to use the activation script provided by
        Firewall Builder, you can use standard mechanisms supplied by
        OpenBSD. Edit the file <emphasis>/etc/rc.conf</emphasis> as
        follows:
      </para>
      

      <programlisting>
pf=YES                          # Packet filter / NAT
pf_rules=/etc/firewall.conf     # Packet filter rules file
pflogd_flags=                   # add more flags, i.e. "-s 256"
      </programlisting>

    </sect2>

    <sect2>
      <title>Making the Firewall Load the Firewall Policy After Reboot: ipfw</title>

      

      <para>
        For ipfw, Firewall Builder generates a policy in the form of a shell
        script (as for iptables).
      </para>
      

      <para>
        To install the policy, copy the generated script
        to the <emphasis>/usr/local/etc/</emphasis> directory
        using <emphasis>ssh</emphasis> and then execute it.  To make
        the firewall run this script at boot time make the following
        modifications to the <emphasis>/etc/rc.conf</emphasis> file:
      </para>
      

      <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
      </programlisting>

    </sect2>

    <sect2>
      <title>Making the Firewall Load the Firewall Policy After Reboot:  ipfilter</title>

      <para>
        On FreeBSD, Firewall Builder generates the firewall policy in three
        files. Assuming the firewall object's name
        is <emphasis>firewall</emphasis>, these files are
        <emphasis>firewall-ipf.conf, firewall-nat.conf,
          firewall.fw</emphasis>. The first two files contain the
        configuration for ipfilter, while the last one is a
        shell script that activates it. This script can also
        configure aliased IP addresses on the firewall's
        interfaces, which is important if you use multiple
        addresses for NAT and want Firewall Builder to configure
        them for you.
      </para>
      

      <para>
        The simplest way to activate the generated policy and to make sure
        it is activated at boot time is to put all three files in
        <emphasis>/usr/local/etc/</emphasis> directory and modify
        script <emphasis>/etc/rc.conf</emphasis> by adding the following
        lines:
      </para>
      

      <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
      </programlisting>

      <para>
        You can use the script <emphasis>fwbinstaller</emphasis> to copy
        all three generated files from the firewall management
        workstation to the firewall machine.
      </para>
      

      <para>
        See also the excellent
        mini-HOWTO: <ulink url="http://nil59.pisem.net/fwbuilder-relative/index.html"><citetitle>Deploy
        fwbuilder-generated policy to remote
        FreeBSD-and-ipfilter-based firewall</citetitle></ulink> by
        Daniel Podolsky.
      </para>
      

      <para>
        Another option is to copy generated
        files <emphasis>firewall-ipf.conf and
        firewall-nat.conf</emphasis> to the
        directory <emphasis>/etc/</emphasis> on the firewall machine
        using the names <emphasis>ipf.rules</emphasis>
        and <emphasis>ipnat.rules</emphasis> and then use the standard way
        of loading an ipfilter policy. In order to activate it, edit
        file <emphasis>/etc/rc.conf</emphasis> by adding the following
        lines to it:
      </para>
      
      
      <programlisting>
ipfilter_enable="YES"           # Set to YES to enable ipfilter functionality
ipfilter_program="/sbin/ipf"    # where the ipfilter program lives
ipfilter_rules="/etc/ipf.rules" # rules definition file for ipfilter, see
# /usr/src/contrib/ipfilter/rules for examples
ipnat_enable="YES"              # Set to YES to enable ipnat functionality
ipnat_program="/sbin/ipnat"     # where the ipnat program lives
ipnat_rules="/etc/ipnat.rules"  # rules definition file for ipnat
      </programlisting>

    </sect2>
    
  </sect1>

