<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="support-for-os">
  <title>Integration with OS running on the firewall machine</title>

  <para>
    Firewall Builder can generate firewall script in the format
    tailored for specific OS or distributions running on the
    firewall. This helps integrate generated firewall configuration
    with startup scripts and other parts of the system-wide
    configuration of the OS running on the firewall. As of v4.0,
    Firewall Builder comes with such support OpenWRT, DD-WRT and
    Sveasoft firmwares for small firewall appliances (Linksys, DLink
    and others), it also has experimental integration with IPCOP and
    derivatives. Integration with Secunet Wall firewall is provided
    and supported by Security Networks AG, Germany.
  </para>

  <para>
    Script generated by fwbuilder can have different format or even
    add or skip certain parts depending on the chosen target firewall
    OS. You can switch from one OS to another using "Host OS" setting
    in the firewall object dialog.
  </para>

  <sect1>
    <title>Generic Linux OS</title>

    <para>
      Script generated by Firewall Builder for a generic Linux
      firewall has standard structure
      per <ulink url="http://refspecs.freestandards.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic.html#INISCRPTACT">LSB
      ("Linux Standard Base Core Specification 3.1")</ulink>. The
      script supports command line
      arguments <emphasis>"start"</emphasis>, <emphasis>"stop"</emphasis>,
      <emphasis>"status"</emphasis>, <emphasis>"reload"</emphasis>. In
      addition to these, it also understands
      arguments <emphasis>"interfaces"</emphasis>
      and <emphasis>"test_interfaces"</emphasis>. The script can be
      placed in the /etc/init.d/ directory among other initialization
      scripts, however at this time this is not the default. The
      script does not have standard "INIT INFO" header for the
      chkconfig (or similar) utility. Mostly this is because different
      Linux distributions use slightly different format of this header
      and different utilities to manage start-up scripts and Firewall
      Builder does not yet allow the user to specify which Linux
      distribution is running on the firewall machine. This part may
      improve in the future.
    </para>

    <para>
      See <xref linkend="load_policy_on_reboot"/> for the recommended
      methods of making the firewall script installed by Firewall
      Builder run at the system start-up.
    </para>

    <para>
      Generated script is assembled from parts defined in configlets
      located
      in <emphasis>/usr/share/fwbuilder-4.0.0/configlets/linux24/script_skeleton</emphasis>.
      You can modify it following instructions in
      <xref linkend="configlets"/>.
    </para>

  </sect1>


  <sect1>
    <title>OpenWRT</title>

    <para>
      To use fwbuilder
      with <ulink url="http://openwrt.org/">OpenWRT</ulink> you need
      to install the following packages on the firewall using command
      <command>"ipkg install package.ipk"</command>:
    </para>

    <itemizedlist>
      <listitem> <para> ip </para> </listitem>

      <listitem> <para> ip6tables (if you need IPv6) </para> </listitem>

      <listitem> <para> iptables-mod-extra </para> </listitem>

      <listitem> <para> iptables-utils </para> </listitem>

      <listitem> <para> kmod-ipt-extra </para> </listitem>
    </itemizedlist>

    <note>
      <para>
        Firewall script generated by fwbuilder for OpenWRT has format
        that allows it to be placed directly in
        the <emphasis>/etc/init.d/</emphasis> directory among other
        OpenWRT startup scripts. Its default name, however, is
        different from the name of the OpenWRT standard firewall
        script (which is <emphasis>"firewall"</emphasis>). Script
        generated by fwbuilder has
        name <emphasis>"firewall.fw"</emphasis> by default so it does
        not overwrite standard
        script <emphasis>"firewall"</emphasis>. This is done as a
        precaution since support for OpenWRT was only added in
        Firewall Builder v4.0 and we haven't accumulated enough
        experience with it. If you feel it works well and can be used
        as a replacement for the standard firewall script, just change
        the name of the script to <emphasis>"firewall"</emphasis> in
        the "Compiler" tab of the firewall settings
        dialog. Instructions in this section explain how to activate
        script generated by fwbuilder assuming it has default
        name <emphasis>"firewall.fw"</emphasis>. This way, the
        standard script is still going to be present on the firewall
        and you can always switch back to it.
      </para>
    </note>

    <para>
      Firewall Builder uses name <emphasis>"fwbuilder.fw"</emphasis>
      for the generated script for OpenWRT and places it in directory
      <emphasis>"/etc/init.d/"</emphasis> on the firewall. To make the
      firewall run it during boot sequence, install the script using
      built-in policy installer or copy it to this directory manually,
      then run command
    </para>

    <programlisting>
/etc/init.d/fwbuilder.fw enable
    </programlisting>

    <para>
      and disable standard firewall script:
    </para>

    <programlisting>
/etc/init.d/firewall disable
    </programlisting>

    <para>
      To activate the firewall and load policy generated by fwbuilder,
      use command
    </para>

    <programlisting>
/etc/init.d/fwbuilder.fw start
    </programlisting>

    <para>
      To stop the firewall and block all traffic use command
    </para>

    <programlisting>
/etc/init.d/fwbuilder.fw stop
    </programlisting>

    <para>
      An option in the "Compiler" tab of the firewall object in
      fwbuilder GUI alows you to make the firewall block all traffic
      when stopped but still permit ssh connections from preconfigured
      address of the management machine.  This method works both on
      stable Kamikaze (v7.06) and the latest OpenWRT (v8.09 at the
      time of Firewall Builder v4.0 release).
    </para>

    <para>
      In test mode fwbuilder copies generated firewall script to
      directory <emphasis>/tmp</emphasis> on the firewall.
    </para>
  </sect1>

  <sect1>
    <title>DD-WRT</title>

    <para>
      To use fwbuilder
      with <ulink url="http://www.dd-wrt.com/">DD-WRT</ulink>,
      configure firewall object with host OS <emphasis>"DD-WRT
      (nvram)"</emphasis> or <emphasis>"DD-WRT (jffs)"</emphasis>.
      These two settings define the activation method used by the
      built-in policy installer, it can either store generated script
      in nvram or in jffs (journaling flash file system).
    </para>

    <sect2>
      <title>DD-WRT (nvram)</title>

      <para>
        In this mode generated script is shorter and does not support
        command line
        arguments <command>"start"</command>, <command>"stop"</command>, <command>"status"</command>. The
        script does not try to load iptables modules on the firewall
        but configures inetrface addresses, vlans, bridge ports and
        bonding interfaces. When you set host OS of the firewall
        object to "DD-WRT (nvram)", built-in policy installer saves
        the script in nvram variable <emphasis>"fwb"</emphasis> and
        configures nvram variable
        <emphasis>"rc_firewall"</emphasis> to run this script.
      </para>

      <para>
        Generated script is assembled from parts defined in configlets
        located
        in directory <emphasis>/usr/share/fwbuilder-4.0.0/configlets/dd-wrt-nvram/</emphasis>.
        You can modify it following instructions in
        <xref linkend="configlets"/>.
      </para>


    </sect2>

    <sect2>
      <title>DD-WRT (jffs)</title>

      <para>
        First of all, activate JFFS/JFFS2 (Journaling Flash File
        System) on the firewall. Instructions are provided in the
        <ulink url="http://www.dd-wrt.com/wiki/index.php/Journalling_Flash_File_System">DD-WRT
        wiki</ulink>. Once jffs is mounted read-write, create
        directory <emphasis>"/jffs/firewall"</emphasis> where
        fwbuilder will store generated script. This is explained in
        this article <ulink url="http://www.dd-wrt.com/wiki/index.php/Firewall_Builder">in
        DD-WRT wiki</ulink>.
      </para>

      <para>
        When firewall is configured with host OS <emphasis>"DD-WRT
        (jffs)"</emphasis>, built-in policy installer copies generated
        script to the
        file <emphasis>"/jffs/firewall/firewall.fs"</emphasis> on the
        firewall and configures nvram
        variable <emphasis>"rc_firewall"</emphasis> to call this
        script. In the older versions of fwbuilder you had to
        configure the program manually to do these steps
        per <ulink url="http://www.dd-wrt.com/wiki/index.php/Firewall_Builder">in
        DD-WRT wiki</ulink>. Firewall Builder 4.0 implements this
        configuration out of the box.
      </para>

      <para>
        Generated script is assembled from parts defined in configlets
        located
        in directory <emphasis>/usr/share/fwbuilder-4.0.0/configlets/dd-wrt-jffs/</emphasis>.
        You can modify it following instructions in
        <xref linkend="configlets"/>.
      </para>

      <note>
        <para>
          Recent builds of DD-WRT (tested with v24 and v24SP1) seem to
          disable JFFS for some reason. If you plan to use jffs method
          of installing firewall script, check if the version you run
          supports it.
        </para>
      </note>
    </sect2>
  </sect1>


  <sect1>
    <title>Sveasoft</title>

    <para>
      Another firmware for the firewall apliances such as Linksys,
      DLink and others supported by Firewall Builder
      is <ulink url="http://sveasoft.com/">Sveasoft</ulink>.
    </para>

    <para>
      The difference here is both in the generated script format and
      in commands that built-in policy installer executes on the
      firewall. The reason for these differences is that Sveasoft
      stores firewall configuration in NVRAM which has limited
      capacity.
    </para>

    <para>
      Script generated for the Sveasoft firmware is more compact and
      is missing certain sections. For example, since the kernel has
      all modules compiled in, the script is not trying to load
      modules. The script also activates the policy when called
      without command line parameters. Script structure is defined in
      the
      configlet <emphasis>/usr/share/fwbuilder-4.0.0/configlets/sveasoft/script_skeleton</emphasis>.
      You can modify it following instructions in
      <xref linkend="configlets"/>.
    </para>

    <para>
      Activation process on Sveasfot is more complex because installer
      can compress firewall script before storing it in NVRAM. Installation
      commands are in the configlet <emphasis>/usr/share/fwbuilder-4.0.0/configlets/sveasoft/installer_commands_root</emphasis>.
    </para>
  </sect1>


  <sect1>
    <title>IPCOP</title>

    <para>
      Firewall Builder v4.0 comes with experimental integration with
      <emphasis>IPCOP</emphasis> firewalls. To turn it on, choose
      platform <emphasis>"iptables"</emphasis> and host
      OS <emphasis>"IPCOP firewall appliance"</emphasis>. Generated
      script is supposed to be installed on the firewall as
      <command>/etc/rc.d/rc.firewall.local</command> and restarted by the command
      <command>"/etc/rc.d/rc.firewall restart"</command>. Built-in
      policy installer in Firewall Builder GUI installs it using this
      name and runs restart command to activate it. Firewall Builder
      does not manage interfaces of IPCOP firewall to avoid conflicts
      with IPCOP itself. Use fwbuilder only to generate iptables
      rules. The program comes with some template objects for IPCOP
      firewalls, you can use them when you create new Firewall object
      if you choose to create it from a template.
    </para>

    <para>
      Iptables script for IPCOP is built using configlets in
      <emphasis>/usr/share/fwbuilder-4.0.0/configlets/ipcop</emphasis>.
      Commands used by the built-in policy installer come from
      configlets in the same directory.
    </para>
  </sect1>

  <sect1>
    <title>OpenBSD and FreeBSD</title>

    <para>
      Firewall platforms "pf", "ipfilter" and "ipfw" can be used with
      these OS.
    </para>

    <para>
      For <emphasis>PF</emphasis>, Firewall Builder generates .conf
      configuration file and .fw policy activation script. Both files
      have the name the same as the name of the firewall object by
      default, but you can change this in the "Compiler" tab of the
      firewall settings dialog.
    </para>

    <para>
      For <emphasis>ipfilter</emphasis> Firewall Builder generates
      three files: the firewall-ipf.conf file with filter rules,
      firewall-nat.conf file with NAT rules and firewall.fw with
      policy activation script.
    </para>

    <para>
      For <emphasis>ipfw</emphasis> a single script firewall.fw is
      generated, this script does all the prepararory work and then
      loads ipfw rules.
    </para>

    <para>
      By default, generated scripts are installed in the /etc/fw/
      directory on the firewall and the work of making sure they are
      executed on system start-up is left for the administrator. See
      <xref linkend="load_policy_on_reboot"/> for some recommended
      ways to do this.
    </para>


  </sect1>
  
  <sect1 id="load_policy_on_reboot">
    <title>How to make your firewall load your firewall policy on reboot</title>
    
    <sect2>
      <title>How to make firewall load firewall policy after reboot  -- iptables</title>

      <para>
        It depends on what Linux distribution your firewall
        is based on. Firewall Builder generates the policy
        in a form of a shell script for the firewall based
        on Linux and iptables. To activate policy at a boot
        time you need to execute this script at a boot time
        one way or another.
      </para>
      

      <para>
        The universal method is to put generated script in
        /etc or /etc/firewall directory and add a line at
        the bottom of script
        <emphasis>/etc/rc.d/rc.local</emphasis> (Mandrake and
        RedHat), <emphasis>/etc/rc.local</emphasis> (Debian, Ubuntu and derivatives)
	or <emphasis>/etc/init.d/boot.local</emphasis>
        (SuSE) like this:
      </para>
      

      <programlisting>
/etc/firewall/firewall.fw
      </programlisting>

      <para>
        This way, firewall script runs when machine executes
        boot-time scripts. The name of the file is the same
        as the name of the firewall object in Firewall
        Builder GUI, with extension ".fw".  So, if
        firewall object name is <emphasis>guardian</emphasis>, then
        fwbuilder puts generated policy in the file
        <emphasis>guardian.fw</emphasis>.
      </para>
      

      <para>
        Since the firewall policy generated by fwbuilder is
        installed by running this script at a boot time, any
        other firewall startup script that might be supplied
        by the vendor of your Linux distribution should be
        disabled. On Mandrake and RedHat this can be done
        using command
      </para>
      

      <programlisting>
chkconfig --level 2345 iptables off
      </programlisting>

      <para>
        On SuSE use command
      </para>
      

      <programlisting>
chkconfig -e
      </programlisting>

      <para>
        and change state of services as follows:
      </para>
      

      <programlisting>
SuSEfirewall2_final       off
SuSEfirewall2_init        off
SuSEfirewall2_setup       off
      </programlisting>

      <para>
        (There must be better way to turn firewall off on SuSE, but we do not know it.
      </para>
      

      <para>
        Another method to get firewall policy automatically
        installed at boot time uses scripts supplied by
        Mandrake or RedHat. You still need to copy generated
        script to the firewall machine and execute it there
        (this can be done using installer scripts
        fwb_install or fwbinstaller). Once the policy has
        been tested and works as expected, you just execute
        <command>service iptables save</command> to
        save the policy. Now the policy will be activated at
        a boot time if service <emphasis>iptables</emphasis> is
        active. You can make it active on Mandrake and
        RedHat using command
      </para>
      

      <programlisting>
chkconfig --level 2345 iptables on
      </programlisting>

      <note>
        <para>
          The script generated by Firewall Builder
          does more than just set iptables rules, it also
          adds virtual IP addresses to the interfaces of the
          firewall and configures kernel parameters. It can
          get real IP addresses of interfaces with dynamic
          addresses and checks if interfaces are present and
          "up" at the time when firewall policy is
          applied. Standard
          scripts <emphasis>iptables-save</emphasis>
          and <emphasis>iptables-restore</emphasis> only manage
          iptables rules; other tasks performed by the
          script generated by Firewall Builder will not be
          done upon reboot if you use this method.
        </para>
      </note>

      <sect3>
        <title>How to restart firewall script when interface address changes</title>

        <para>
          Firewall policy script generated by fwbuilder for
          iptables firewall needs to be restarted every time
          IP address of a dynamic interface changes.  This
          section explains why is it so and how this can be
          done.
        </para>
        

        <para>
          iptables firewall policy script generated by the
          Firewall Builder determines IP addresses of all
          dynamic interfaces and assigns them to variables
          which it then uses in the policy rules. This helps
          to build rules that require knowing address of the
          interface correctly, such as anti-spoofing rules.
          On the other hand, if interface's address changes
          after the policy has been loaded and activated, the
          firewall script needs to be restarted.
        </para>
        

        <para>
          The firewall can be restarted from one of the
          scripts that get called by PPP or DHCP daemons
          whenever connection is established or new address
          lease is obtained. For example, DHCP daemon
          distributed with all major Linux distributions calls
          script <emphasis>/etc/dhclient-exit-hooks</emphasis> when new DHCP
          lease is obtained. To restart the firewall, just
          create file <emphasis>/etc/dhclient-exit-hooks</emphasis> and call
          your firewall script from it:
        </para>
        

        <programlisting>
#!/bin/sh
/etc/firewall/firewall.fw
        </programlisting>
        
        <para>
          See man page dhclient-script(8) for a detailed explanation.
        </para>
        

        <note>
          <para>
            On SUSE you should use YAST to
            configure this. Start Yast control center, go to
            "System", then "Editor for
            /etc/sysconfig files" in the right panel, and
            when the editor appears, choose
            "Network/DHCP/DHCP client" in the tree
            and edit "DHCLIENT_SCRIPT_EXE".
          </para>
        </note>
        

        <para>
          PPP daemon calls script <emphasis>/etc/ppp/ip-up</emphasis> when
          connection is established and IP address
          obtained. This script can be used to restart the
          firewall as well. Just like
          with <emphasis>/etc/dhclient-exit-hooks</emphasis>, just add a
          call to <emphasis>/etc/firewall/firewall.fw</emphasis> at the
          bottom of <emphasis>/etc/ppp/ip-up</emphasis>
        </para>
        

        <note>
          <para>
            <emphasis>"/etc/firewall/firewall.fw"</emphasis> should be
            replaced everywhere with the real name of the firewall
            script. Firewall Builder stores firewall commands in
            the file with the name the same as the name of the
            firewall object, with an extension ".fw".
          </para>
        </note>
        

        <note>
          <para>
            Currently Firewall Builder requires
            restart of the firewall script only on iptables
            firewalls. Firewalls based on OpenBSD pf do not
            require this because pf can dynamically load IP
            address of the interface when it changes. As of the
            moment of this writing, on ipfilter and ipfw
            firewalls address of the dynamic interface has to be
            entered in the GUI, or it cannot be used in the
            rule. This limitation will be removed in the future
            versions of the product.
          </para>
        </note>
        
      </sect3>
    </sect2>

    <sect2>
      <title>How to make firewall load firewall policy after reboot  --  pf</title>

      <para>
        For OpenBSD pf fwbuilder puts firewall policy in the
        file <emphasis>firewall.conf</emphasis> and activation script
        in <emphasis>firewall.fw</emphasis>
      </para>
      

      <para>
        To activate the policy copy both files to the
        directory <emphasis>/etc</emphasis> on the firewall machine
        using <emphasis>fwbinstaller</emphasis>.
        <emphasis>Fwbinstaller</emphasis> executes the
        activation script to install the policy
        immediately. Activation script not only loads PF
        rules, it also configured aliased IP addresses on
        the firewall's interfaces which is important if you
        use multiple addresses for NAT and want fwbuilder to
        configure them for you. It also sets kernel
        parameters defined in the "Network" tab of the
        firewall dialog (such as IP forwarding etc.) In
        order to make the firewall activate it at a boot
        time, call firewall script from the
        file <emphasis>/etc/rc.local</emphasis> as follows:
      </para>
      

      <programlisting>
/etc/firewall.fw
      </programlisting>

      <para>
        If you do not want to use activation script provided by
        fwbuilder, you can use standard mechanisms supplied by
        OpenBSD. Edit file <emphasis>/etc/rc.conf</emphasis> as
        follows:
      </para>
      

      <programlisting>
pf=YES                          # Packet filter / NAT
pf_rules=/etc/firewall.conf     # Packet filter rules file
pflogd_flags=                   # add more flags, i.e. "-s 256"
      </programlisting>

    </sect2>

    <sect2>
      <title>How to make firewall load firewall policy after reboot  --  ipfw</title>

      

      <para>
        For ipfw fwbuilder generates policy in the form of a shell
        script (just like for iptables).
      </para>
      

      <para>
        To install the policy, copy generated script
        to <emphasis>/usr/local/etc/</emphasis> directory
        using <emphasis>ssh</emphasis> and then execute it.  To make
        the firewall run this script at a boot time make the following
        modifications to the <emphasis>/etc/rc.conf</emphasis> file:
      </para>
      

      <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
      </programlisting>

    </sect2>

    <sect2>
      <title>How to make firewall load firewall policy after reboot  --  ipfilter</title>

      <para>
        On FreeBSD fwbuilder generates firewall policy in three
        files. Assuming firewall object's name
        is <emphasis>firewall</emphasis>, these files are
        <emphasis>firewall-ipf.conf, firewall-nat.conf,
          firewall.fw</emphasis>. First two files contain
        configuration for ipfilter, while the last one is a
        shell script that activates it. This script can also
        configure aliased IP addresses on firewall's
        interfaces which is important if you use multiple
        addresses for NAT and want fwbuilder to configure
        them for you.
      </para>
      

      <para>
        The simplest way to activate generated policy and to make sure
        it is activated at boot time is to put all three files in
        <emphasis>/usr/local/etc/</emphasis> directory modify
        script <emphasis>/etc/rc.conf</emphasis> by adding the following
        lines:
      </para>
      

      <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
      </programlisting>

      <para>
        You can use script <emphasis>fwbinstaller</emphasis> to copy
        all three generated files from the firewall management
        workstation to the firewall machine.
      </para>
      

      <para>
        See also excellent
        mini-HOWTO: <ulink url="http://nil59.pisem.net/fwbuilder-relative/index.html"><citetitle>Deploy
        fwbuilder-generated policy to remote
        FreeBSD-and-ipfilter-based firewall</citetitle></ulink> by
        Daniel Podolsky.
      </para>
      

      <para>
        Another option is to copy generated
        files <emphasis>firewall-ipf.conf and
        firewall-nat.conf</emphasis> to the
        directory <emphasis>/etc/</emphasis> on the firewall machine
        using names <emphasis>ipf.rules</emphasis>
        and <emphasis>ipnat.rules</emphasis> and then use standard way
        of loading ipfilter policy.  In order to activate it, edit
        file <emphasis>/etc/rc.conf</emphasis> by adding the following
        lines to it:
      </para>
      
      
      <programlisting>
ipfilter_enable="YES"           # Set to YES to enable ipfilter functionality
ipfilter_program="/sbin/ipf"    # where the ipfilter program lives
ipfilter_rules="/etc/ipf.rules" # rules definition file for ipfilter, see
# /usr/src/contrib/ipfilter/rules for examples
ipnat_enable="YES"              # Set to YES to enable ipnat functionality
ipnat_program="/sbin/ipnat"     # where the ipnat program lives
ipnat_rules="/etc/ipnat.rules"  # rules definition file for ipnat
      </programlisting>

    </sect2>
    
  </sect1>
  
</chapter>
