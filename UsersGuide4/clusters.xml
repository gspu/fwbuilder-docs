<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <chapter id="clusters">
    <title>Cluster configuration</title>

    <para>
      Firewall Builder 4.0 introduces support for firewall
      clusters. Firewall Builder helps you create configuration for
      iptables, PF or PIX rules and in some cases cluster
      configuration as well. The following state synchronization and
      failover protocols are supported at this time:
    </para>


    <table frame='none'  tabstyle='reg_table'>
      <title>Supported state synchronization and failover software</title>
      <tgroup cols='3' align='left'  rowsep='1'>
        <colspec colnum="1" colname="col1" colwidth="1*"/>
        <colspec colnum="2" colname="col2" colwidth="1*"/>
        <colspec colnum="3" colname="col3" colwidth="3*"/>
	<thead>
          <row>
	    <entry>OS</entry>
	    <entry>State Synchronization</entry>
	    <entry>Failover</entry>
          </row>
        </thead>

	<tbody>
          <row>
            <entry>Linux</entry>
            <entry>conntrackd</entry>
            <entry>vrrpd, heartbeat, keepalived, OpenAIS</entry>
          </row>

          <row>
            <entry>OpenBSD/FreeBSD</entry>
            <entry>pfsync</entry>
            <entry>CARP</entry>
          </row>

          <row>
            <entry>Cisco ASA (PIX)</entry>
            <entry>PIX state sync protocol</entry>
            <entry>PIX failover protocol</entry>
          </row>

        </tbody>
      </tgroup>
    </table>
    

    <para>
      Firewall Builder automatically generates policy rules to permit
      packets of these protocols when it sees firewall cluster
      configured with one of them. You can use cluster object and its
      interfaces instead of the member firewall objects or their
      interfaces in policy and NAT rules and the program will
      substitute correct addresses when it generates iptables script
      or PF or PIX configuration.
    </para>

    <para>
      Detailed description of the Cluster object is provided in
      <xref linkend="cluster-object"/>.
    </para>



    <sect1 id="linux_cluster_overview">

      <title>Linux cluster configuration with Firewall Builder</title>

      <para>
        Detailed walk-through examples for different Linux, BSD and
        PIX cluster configurations can be found in Firewall Builder
        Cookbook chapter <xref linkend="cluster-cookbook"/>
      </para>

      <para>
        High Availability (HA) configurations on Linux can be built
        using different software packages, such as vrrpd
        (<ulink url="http://off.net/~jme/vrrpd/"><citetitle>VRRPD home
        page</citetitle></ulink>) or heartbeat
        (<ulink url="http://www.linux-ha.org/"><citetitle>Linux-HA
        home page</citetitle></ulink>). Firewall Builder focuses on
        the firewall configuration and provides independent way of
        configuring iptables rules for Linux HA clusters and can be
        used with any HA software package, including home-grown
        scripts and packages that will appear in the future. At this
        time Firewall Builder does not generate configuration or
        command line for the HA software.
      </para>

      <para>
        Like with all other supported firewall platforms, interface
        objects that belong to a cluster object serve to establish
        association between actual interfaces of the member
        firewalls. Cluster interface object should have the same
        name as corresponding member firewall interfaces. It should
        have Failover Group child object configured with interfaces
        of the member firewalls. You can create Failover Group
        object using context menu item "Add Failover Group", the
        menu appears when you right mouse click on the cluster
        interface object. If you create new cluster using "New
        object" menu or toolbar button, the wizard that creates new
        cluster object will create Failober Group objects
        automatically. Here is how it should look like:
      </para>

      <para>
        <figure id="linux_cluster_interface_mappings">
          <title>Failover group objects and mapping between
            cluster and member interfaces</title>
          <graphic scale="50" fileref="linux-cluster-interface-mappings.png"/>
        </figure>
      </para>

      <para>
        Note that the name of the cluster interface should match
        the name of the member interfaces exactly, even if it may
        appear that HA software running on the firewall creates
        new interface such as eth0:0. Heartbeat daemon creates
        what looks like interface "eth0:0" when it becomes active
        and assumes virtual ip address. The "eth0:0" is in fact a
        label on the secondary ip address on the interface "eth0"
        which you can see if you use command "ip addr show dev
        eth0". Here is an example of the output of this command
        taken on the firewall running heartbeat that was active at
        the moment:
      </para>

      <para>
        <programlisting>
# ip addr show dev eth0
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    link/ether 00:0c:29:1e:dc:aa brd ff:ff:ff:ff:ff:ff
    inet 10.3.14.108/24 brd 10.3.14.255 scope global eth0
    <emphasis role="redtext">inet 10.3.14.150/24 brd 10.3.14.255 scope global secondary eth0:0</emphasis>
    inet6 fe80::20c:29ff:fe1e:dcaa/64 scope link 
       valid_lft forever preferred_lft forever
        </programlisting>
      </para>

      <para>
        Secondary IP address 10.3.14.150 that was added by
        heartbeat is highlighted in red. The "eth0:0" at the very
        end of the output is the label assigned to this address,
        this label makes it appear as another inetrface in the
        output of ifconfig, however it is not real inetrface. Here
        is the output of ifconfig on the same machine at the same
        time when it was active in the HA pair:
      </para>

      <para>
        <programlisting>
# ifconfig 
eth0      Link encap:Ethernet  HWaddr 00:0c:29:1e:dc:aa  
          inet addr:10.3.14.108  Bcast:10.3.14.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe1e:dcaa/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:242381 errors:0 dropped:0 overruns:0 frame:0
          TX packets:41664 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:40022382 (40.0 MB)  TX bytes:5926417 (5.9 MB)
          Interrupt:18 Base address:0x2000 
<emphasis role="redtext">
eth0:0    Link encap:Ethernet  HWaddr 00:0c:29:1e:dc:aa  
          inet addr:10.3.14.150  Bcast:10.3.14.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          Interrupt:18 Base address:0x2000 </emphasis>
        </programlisting>
      </para>

      <para>
        It is important to understand the distinction because
        iptables does not recognize eth0:0 as an interface and does
        not allow it in "-i" or "-o" clause. Firewall Builder
        follows the same rules as the target firewall platform it
        prepares configuration for. This means you should build
        configuration in fwbuilder using interface "eth0" and not
        "eth0:0".
      </para>

      <para>
        Each cluster interface should have a Failover Group child
        object configured with corresponding interfaces of the member
        firewalls. Configuration of this object implements interface
        mapping illustrated by
        <xref linkend="linux_cluster_interface_mappings"/> and is
        shown below:
      </para>

      <para>
        <figure id="linux_heartbeat_cluster_2">
          <title>Failover Group object configuration</title>
          <graphic scale="50" fileref="linux-heartbeat-cluster-2.png"/>
        </figure>
      </para>

      <para>
        Firewall Builder GUI proides a way to configure some
        parameters for the failover
        protocols <emphasis>heartbeat</emphasis>
        and <emphasis>OpenAIS</emphasis>. Click <emphasis>Edit
          protocol parameters</emphasis> button to open dialog for
        this:
      </para>
      
      <table frame='none' tabstyle='two_columns_layout_table'>
        <title></title>
        <tgroup cols='2' align='left'  rowsep='1'>
          <colspec colnum="1" colname="col1" colwidth="1*"/>
          <colspec colnum="2" colname="col2" colwidth="1*"/>
	  <tbody valign='top'>
            <row>
              <entry>
                <para>
                  <figure float="1" id="heartbeat_parameters">
                    <title>Editing parameters for the heartbeat protocol</title>
                    <graphic scale="50" fileref="heartbeat-parameters.png"/>
                  </figure>
                </para>
              </entry>
              <entry>
                <para>
                  <figure float="1" id="openais_parameters">
                    <title>Editing parameters for the OpenAIS protocol</title>
                    <graphic scale="50" fileref="openais-parameters.png"/>
                  </figure>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        Firewall Builder only supports multicast or unicast
        heartbeat configuration. You can enter the address and port
        number in the dialog. If you turn checkbox "Use unicast
        address" on, generated iptables commands will match source
        and destination addresses of the corresponding interface of
        both member firewalls. If this checkbox is off, it is
        assumed heartbeat is configured to use multicast and
        generated iptables commands will only match this multicast
        address in both INPUT and OUTPUT chains.
      </para>

      <para>
        As with heartbeat, you can configure ip address and port
        number for the OpenAIS protocol. There is no unicast option
        here.
      </para>

      <para>
        Cluster object should also have State Synchronization group
        child object. Create it using context menu "Add State
        Synchronization Group" item if this object does not
        exist. In this object you need to configure member
        interfaces that should be used for state synchronization. On
        Linux, state synchronization is done using conntrackd daemon
        (<ulink url="http://conntrack-tools.netfilter.org/"><citetitle>conntrack-tools
            home page</citetitle></ulink>). Configure State
        Synchronization group object with interfaces of the member
        firewalls used to pass conntrackd packets:
      </para>

      <para>
        <figure id="linux_cluster_statesync_mappings">
          <title>Interfaces and addresses of the cluster members</title>
          <graphic scale="50" fileref="linux-cluster-statesync-mappings.png"/>
        </figure>
      </para>

      <para>
        The State Synchronization group object should look like this:
      </para>

      <para>
        <figure id="linux_cluster_statesync_group">
          <title>Interfaces and addresses of the cluster members</title>
          <graphic scale="50" fileref="linux-cluster-statesync-group.png"/>
        </figure>
      </para>

      <para>
        Member firewalls and their inetrfaces appear in the panel in
        the right hand side of the dialog. Firewall Builder uses
        this information to automatically generate iptables rules to
        permit conntrackd packets. Firewall Builder assumes
        conntrackd is configured to send synchronization packets
        over dedicated interface (which generally is a good idea
        anyway). You may use internal inetrface of the firewall for
        this purpose as well. See examples of conntrackd
        configuration in Firewall Builder CookBook. You can configure
        ip address and port number for the conntrack as well.
      </para>

      <para>
        <figure id="conntrack_parameters">
          <title>Editing parameters for the Conntrack state synchronization protocol</title>
          <graphic scale="50" fileref="conntrack-parameters.png"/>
        </figure>
      </para>

    </sect1>


    <sect1 id="bsd_cluster_overview">
      <title>OpenBSD cluster configuration with Firewall Builder</title>


      <para>
      </para>
    </sect1>


    <sect1 id="pix_cluster_overview">
      <title>PIX cluster configuration with Firewall Builder</title>

      <para>
        Firewall Builder supports PIX "lan based" failover configuration.
        Unlike in Linux or BSD, where each interface of the firewall runs
        its own instance of failover protocol, PIX runs one instance of
        failover protocol over dedicated interface. PIX can also run state
        synchronization protocol over the same or another dedicated
        interface. These dedicated interfaces should be connected via
        separate switch and do not see regular traffic. Here is how this is
        implemented in Firewall Builder:
      </para>


      <para>
        Like with all other supported firewall platforms, interface
        objects that belong to a cluster object serve to establish
        association between actual interfaces of the member
        firewalls. Cluster interface object should have the same name as
        corresponding member firewall interfaces. It should have
        Failover Group child object which should be configured with
        interfaces of the member firewalls. You can create Failover
        Group object using context menu item "Add Failover Group", the
        menu appears when you right mouse click on the cluster interface
        object. Here is an example of correct interface mapping between
        cluster and member firewalls:

        <figure float="1" id="pix_cluster_example1">
          <title>Failover group objects and mapping between
            cluster and member interfaces</title>
          <graphic scale="50" fileref="pix-failover-groups-mapping.png"/>
        </figure>
      </para>

      <para>
        The Failover Group object "cluster1:e0.101:members" is
        configured with interfaces "Ethernet0.101" of both members:

        <figure float="1" id="pix_cluster_failover_group_example_1">
          <title>Example of failover group object</title>
          <graphic scale="50" fileref="pix-failover-group-1.png"/>
        </figure>
      </para>

      <para>
        Interface that is configured for the failover on the member
        firewall should be marked as "Dedicated Failover". Use checkbox
        with this name in the interface object dialog to do this.
      </para>

      <para>
        Cluster interface that corresponds to the failover interface
        of the members should be configured with protocol "PIX
        failover protocol". Click on the "Edit protocol parameters"
        button to edit timeout, poll time and the key.
      </para>
      
      <para>
        Cluster interfaces that represent regular interfaces of the
        members also must have failover group objects; that is where
        you add interfaces of the member firewalls. There is no need
        to configure protocol in these failover groups because PIX
        does not run it over these interfaces. Regular interfaces
        should not be marked as "Dedicated Failover".
      </para>
      
      <para>
        Cluster object should have State Synchronization group child
        object. Create it using context menu "Add State
        Synchronization Group" item if this object does not
        exist. In this object you need to configure member
        interfaces that should be used for state
        synchronization. You can use separate dedicated interfaces
        or the same interfaces used for failover. If these are
        separate, corresponding interface objects of the member
        firewalls must be marked as "Dedicated Failover".
      </para>

      <para>
        One of the member firewall interfaces used in the State
        Synchronization group must be marked as "master". This is
        where you define which PIX unit is going to be the primary
        and which is going to be the secondary in the HA pair.
      </para>

      <para>
        Here is an example of the state synchronization and failover using
        the same interface Ethernet2:

        <figure float="1" id="state_sync_conf_1">
          <title>Example of the state synchronization and failover
            using the same interface Ethernet2</title>
          <graphic scale="50" fileref="pix-statesync-group-mapping.png"/>
        </figure>
      </para>

      <para>
        The State Synchronization Group object "State Sync Group" is
        configured with interfaces "Ethernet2" of both members:

        <figure float="1" id="pix_cluster_statesync_group_example_1">
          <title>Example of state synchronization group object</title>
          <graphic scale="50" fileref="pix-statesync-group-1.png"/>
        </figure>
      </para>


      <para>
        Dedicated failover interfaces of the member firewalls must
        have IP addresses and these addresses must be different but
        belong to the same subnet.
      </para>

      <para>
        Built-in policy installer treats PIX clusters in a special way:
        <itemizedlist>
          <listitem>
            <para>
              For the PIX cluster, built-in installer installs
              generated configuration only on the master PIX unit. It
              determines which one is the master by looking in the
              StateSyncGroup object (state synchronization cluster
              group).
            </para>
          </listitem>
          <listitem>
            <para>
              Dialog where user enters authentication credentials and
              other parameters for the installer has a checkbox that
              makes installer initiate copy of the configuration to
              the standby PIX if installation was successful.
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </sect1>

    <sect1 id="compiling_cluster">
      <title>Compiling cluster configuration with Firewall Builder</title>

      <para>
        As we have seen in previous sections, clusters are represented
        by objects of type "Cluster" located in the object group
        "Clusters". To generate configuration for all cluster member
        firewalls and install it on each, you need to compile it just
        like you would compile regular standalone firewall
        object. Here are the ways to do this:

        <itemizedlist>
          <listitem>
            <para>
              Open Policy or NAT rule set of the cluster by double
              clicking it in the tree, then use buttons "compile" and
              "install" located in the small toolbar above the rules,
              next to the firewall and ruleset name.
            </para>
          </listitem>

          <listitem>
            <para>
              Another way to start compile process is to select one or more
              cluster objects in the tree, click right mouse button to open
              context menu and use menu items "Compile" or "Install".
            </para>
          </listitem>

          <listitem>
            <para>
              Click "Compile" or "Install" buttons located in the main
              toolbar or use main menu items "Rules/Compile" or
              "Rules/Install" to make the program assemble full list
              of all cluster and firewall objects for processing.
            </para>
          </listitem>
        </itemizedlist>

      </para>

<!-- use sect3 so that it does not appear in TOC -->
      <sect3>
        <title>Using buttons "compile" and "install" located in the
          small toolbar above the rules</title>

        <para>
          Open Policy or NAT rule set of the cluster by double
          clicking it in the tree, then use buttons "compile" and
          "install" located in the small toolbar above the rules,
          next to the firewall and ruleset name as shown in
          <xref linkend="compile-cluster-1"/>:
        </para>

        <para>
          <figure id="compile-cluster-1">
            <title>Using toolbar buttons to compile and install cluster configuration</title>
            <graphic scale="70" fileref="compile-cluster-1.png"/>
          </figure>
        </para>

        <para>
          Toolbar buttons located above the rules act only on the currently
          visible firewall or cluster object and the tooltip shown when you
          hover mouse cursor over these buttons makes it clear:
        </para>

        <para>
          <figure id="compile-cluster-1-1">
            <title>Toolbar buttons to compile and install currently visible cluster configuration</title>
            <graphic scale="70" fileref="compile-cluster-1-1.png"/>
          </figure>
        </para>


        <para>
          This opens dialog with the list of firewalls to be
          compiled. The list includes only the cluster and its
          member firewalls as shown in
          <xref linkend="compile-cluster-2"/>.  Note that the tree
          in <xref linkend="compile-cluster-1"/> has other
          clusters and firewall objects but they do not appear in
          the list. Clicking toolbar buttons located next to the
          name of the firewall and rule set acts only on the
          firewall or cluster the currently visible policy or NAT
          rule set belongs to; the porgram ignores other firewall
          and cluster objects.
        </para>

        <para>
          <figure id="compile-cluster-2">
            <title>Compiling cluster object with two members</title>
            <graphic scale="70" fileref="compile-cluster-2.png"/>
          </figure>
        </para>

        <para>
          In the compile dialog list there are two columns of
          checkboxes: "compile" and "Install". When you compile a
          cluster, the "Compile" checkboxes appear only next to
          the cluster object while "Install" checkboxes appear
          only next to the member firewall objects. This is
          because to compile, policy compiler needs to read
          cluster object to get all informaiton about cluster
          configuration, including the list of member firewalls.
          However when generated configuration is ready and needs
          to be installed on member firewalls, the program needs
          to communicate with each member firewall separately. So
          the "install" checkboxes are next to the member
          firewalls in the list, letting you turn installation on
          and off on each member separately.
        </para>

        <tip>
          <para>
            PIX cluster is an exception to the rule though. In PIX
            cluster, you only need to update configuration of the
            active unit in the failover pair. The active unit then
            pushes configuation to the second unit in the pair
            automatically. Firewall Builder is aware of this and the
            "Install" checkbox is only enabled next to the member
            firewall marked as "master" in the cluster configuration.
          </para>
        </tip>
      </sect3>

      <sect3>
        <title>Using context menu in the tree</title>

        <para>
          Another way to start compile process is to select one or more
          cluster objects in the tree, click right mouse button to open
          context menu and use menu items "Compile" or "Install".
        </para>

        <para>
          <figure id="compile-cluster-3">
            <title>Using context menu to compiling two cluster objects</title>
            <graphic scale="70" fileref="compile-cluster-3.png"/>
          </figure>
        </para>

        <para>
          This method allows you to compile several cluster
          objects, all of them appear in the list in the compile dialog
          together with their member firewalls:
        </para>

        <para>
          <figure id="compile-cluster-4">
            <title>Compiling two cluster objects</title>
            <graphic scale="70" fileref="compile-cluster-4.png"/>
          </figure>
        </para>
      </sect3>

      <sect3>
        <title>Using "Compile" and "Install" buttons in the  main toolbar</title>

        <para>
          Finally, if you click "Compile" or "Install" buttons
          located in the main toolbar or use main menu items
          "Rules/Compile" or "Rules/Install", the program
          assembles full list of all cluster and firewall objects
          for processing.
        </para>

        <para>
          <figure id="compile-cluster-5">
            <title>Using buttons in the main toolbar to compiling all cluster and firewall objects</title>
            <graphic scale="70" fileref="compile-cluster-5.png"/>
          </figure>
        </para>

        <para>
          <figure id="compile-cluster-6">
            <title>Compiling all cluster and firewall objects</title>
            <graphic scale="70" fileref="compile-cluster-6.png"/>
          </figure>
        </para>

        <para>
          The data file used for these examples has a mix of
          cluster objects with corresponding member firewalls and
          standalone firewall objects that do not belong to any
          cluster. The latter get both "Compile" and "Install"
          checkboxes as visible in <xref linkend="compile-cluster-6"/>.
        </para>
      </sect3>

      <para>
        You can try to compile a firewall object that is a member of
        some cluster by selecting it in the tree and using context
        menu. When you do this, the program treats the object as
        standalone firewall rather than cluster member and does not
        generate any cluster-related part so the configuration, such
        as policy rules for the failover protocols, configuration
        script for failover interfaces and so on. This is because a
        firewall object can actually be a member of several clusters,
        which is useful to test different cluster configurations or
        for transitions. In some cases a firewall object by itself may
        be so generic that it can describe member firewalls in
        different locations (if potential address collisions are not
        an issue or all addresses are dynamic). For these reasons, the
        program does not try to guess wether given firewall object
        might be a cluster member and which cluster it is a member of
        and falls back to treating it as a simple standalone firewall
        object. It however shows a warning to indicate this as shown
        in <xref linkend="compile-cluster-7"/>. Here I selected
        firewall object "linux-test-1" in the tree and then used
        context menu to initiate compilation, forgetting that it is a
        member of two different cluster configurations:
      </para>

      <para>
        <figure id="compile-cluster-7">
          <title>Compiling a member firewall as standalone firewall objects</title>
          <graphic scale="70" fileref="compile-cluster-7.png"/>
        </figure>
      </para>


    </sect1>



  </chapter>
