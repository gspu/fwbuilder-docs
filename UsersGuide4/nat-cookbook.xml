<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">


    <sect1 id="nat-cookbook">
    <title>Examples of NAT Rules</title>

	<sect2>
        <title>"1-1" NAT</title>

  
        <para>
          Examples above were "hiding" multiple internal addresses
          behind just one external address. We a had whole network
          (potentially 254 hosts) use the same external address to
          access the Internet. Sometimes it is necessary to do
          translation where each internal host has a dedicated
          corresponding address on the outside.  This is often called
          "1-1" NAT. Here is how this is done in fwbuilder when a
          whole network of the same dimension is available on the
          outside:
        </para>
  

        <figure float="1"><title/><graphic scale="50" fileref="snat-rule-2.png"/></figure>

        <para>
          Network object <emphasis>ext net</emphasis> defines network
          "192.0.2.0/24", which is the same size as the internal
          network (this is a hypothetical example). Here is iptables
          command produced for this rule:
        </para>
  

        <programlisting>

# Rule 0 (NAT)
# 
$IPTABLES -t nat -A POSTROUTING   -s 172.16.22.0/24 -j NETMAP --to 192.0.2.0/24 

        </programlisting>

        <para>
          NETMAP target maps a whole network of addresses onto another
          network of addresses.
        </para>
  

        <para>
          In PF the following "nat" command is used:
        </para>
  

        <programlisting>

# Rule  0 (NAT)
# 
nat proto {tcp udp icmp} from 172.16.22.0/24 to any -&gt; 192.0.2.0/24 

        </programlisting>

        <para>
          For PIX, fwbuilder generates a "global" address pool the
          size of the 192.0.2.0/24 network:
        </para>
  

        <programlisting>

! Rule  0 (NAT)
! 
global (outside) 1 192.0.2.0 netmask 255.255.255.0
access-list id54756X30286.0 permit ip 172.16.22.0 255.255.255.0  any 
nat (inside) 1 access-list id54756X30286.0 tcp 0 0

        </programlisting>

	</sect2>

   	<sect2>
          <title>Using Address of "wrong" Interface for Source Address
          Translation</title>

          <para>
            Normally, generated iptables SNAT rule includes a "-o
            &lt;interface&gt;" clause to make it more specific and
            only translate packets that really leave the
            network. Firewall Builder guesses which interface to put
            in the "-o" parameter by looking at the object in the
            Translated Source of the NAT rule. If this object is the
            firewall's interface or an address of one of its
            interfaces, then it uses that interface for the "-o"
            parameter. There is one configuration that requires the
            "-o" parameter to be different from the address used for
            SNAT translation. This configuration is useful when you
            have small block of publicly routable addresses and want
            to host a server in DMZ, but the block is so small that
            subnetting it does not make sense.
          </para>
          

          <figure float="1">
            <title/>
            <graphic scale="50" fileref="fwobj-snat-3.png"/>
          </figure>

          <para>
            Firewall object <emphasis>fw-1-1</emphasis> has 4
            interfaces:
          </para>

          <table>
	    <title></title>
            <tgroup cols='3' align='left'  rowsep='1'>
              <colspec colnum="1" colname="col1" colwidth="1*"/>
              <colspec colnum="2" colname="col2" colwidth="1*"/>
              <colspec colnum="3" colname="col3" colwidth="1*"/>
	      <tbody>

                <row>
                  <entry>Interface</entry>
                  <entry>Network zone</entry>
                  <entry>Address</entry>
                </row>

                <row>
                  <entry><emphasis>eth0</emphasis></entry>
                  <entry>external interface</entry>
                  <entry>dynamic</entry>
                </row>

                <row>
                  <entry><emphasis>eth1</emphasis></entry>
                  <entry>internal interface</entry>
                  <entry>172.16.22.1/24</entry>
                </row>

                <row>
                  <entry><emphasis>eth2</emphasis></entry>
                  <entry>DMZ</entry>
                  <entry>192.0.2.1/29</entry>
                </row>

                <row>
                  <entry><emphasis>lo</emphasis></entry>
                  <entry>loopback</entry>
                  <entry>127.0.0.1</entry>
                </row>
              </tbody>
            </tgroup>
          </table>



        <para>
          Here the publicly routable address block is very small,
          it is just a /29 (6 usable addresses). It is assigned
          to the DMZ interface <emphasis>eth2</emphasis>, and the firewall's address
          is 192.0.2.1. The outside interface <emphasis>eth0</emphasis> can
          be either dynamic or have private address. In fact,
          this is a rather typical configuration for when your
          firewall is behind a DSL router and segment between
          the firewall and the router uses private addresses
          such as 192.168.1.0. It is more useful to keep that
          segment private and allocate all routable addresses
          to the DMZ instead of trying to subnet the routable
          subnet. The problem now is that a Source Address
          translation rule should use address that belongs to
          the DMZ interface <emphasis>eth2</emphasis> but "-o" parameter
          should use interface <emphasis>eth0</emphasis> or should be
          omitted all together. The "-o eth2" would not work
          at all.
        </para>
        

        <para>
          To do this is Firewall Builder, create an Address
          object with an IP address equivalent to the one you
          want to use for source NAT. Since in this example we
          want to use address 192.0.2.1 which belongs to the
          firewall, we call this new address object "like
          fw-1-1:eth2:ip". This is just a regular IPv4 address
          object, there is nothing special about it:
        </para>
        

        <figure>
          <title/>
          <graphic scale="50" fileref="snat-address-obj-2.png"/>
        </figure>

        <para>
          Now we use it in the NAT rule:
        </para>
        

        <figure>
          <title/>
          <graphic scale="50" fileref="snat-rule-6.png"/>
        </figure>

        <para>
          Here is what fwbuilder generates for iptables for
          this rule:
        </para>
        

        <programlisting>
# Rule 0 (NAT)
# 
$IPTABLES -t nat -A POSTROUTING -o eth+  -s 172.16.22.0/24 -j SNAT --to-source 192.0.2.1 
        </programlisting>

        <para>
          Compiler added "-o eth+" parameter that matches any
          outbound interface and used address 192.0.2.1 in
          SNAT target as required.
        </para>
        </sect2>

	<sect2>
        <title>"No NAT" rules</title>
  

        <para>
  
                Sometimes a firewall that is doing NAT should skip
                translation for some pairs of source and destination
                addresses. One example when this is necessary is when
                you have DMZ segment that uses private addresses, so
                you need to use NAT to provide access to servers in
                DMZ from outside, but no NAT is needed for access to
                the same servers from internal network. Here is how it
                looks like:
              
        </para>
  
        <figure float="1"><title/><graphic scale="50" fileref="fwobj-dnat-3.png"/></figure>

        <para>
          
          Firewall object <emphasis>fw-1</emphasis> has 4
          interfaces:
        </para>
  
                    

        <table>
	  <title></title>
          <tgroup cols='3' align='left'  rowsep='1'>
            <colspec colnum="1" colname="col1" colwidth="1*"/>
            <colspec colnum="2" colname="col2" colwidth="1*"/>
            <colspec colnum="3" colname="col3" colwidth="1*"/>
	    <tbody>

              <row>
                <entry>Interface</entry>
                <entry>Network zone</entry>
                <entry>Address</entry>
              </row>

              <row>
                <entry><emphasis>eth0</emphasis></entry>
                <entry>external interface</entry>
                <entry>192.0.2.1/24</entry>
              </row>

              <row>
                <entry><emphasis>eth1</emphasis></entry>
                <entry>internal interface</entry>
                <entry>172.16.22.1/24</entry>
              </row>

              <row>
                <entry><emphasis>eth2</emphasis></entry>
                <entry>DMZ</entry>
                <entry>192.168.2.1/24</entry>
              </row>

              <row>
                <entry><emphasis>lo</emphasis></entry>
                <entry>loopback</entry>
                <entry>127.0.0.1</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          Internal interface <emphasis>eth1</emphasis> also has IPv6 address
          but it is not used in this example.
        </para>
  

        <para>
          Here is a NAT rule to permit access to the DMZ network
          (192.168.2.10) from internal network directly without
          NAT.
        </para>
  

        <figure float="1"><title/><graphic scale="50" fileref="dnat-rule-4.png"/></figure>

        <para>
  
          Here is the script generated for iptables:
              
        </para>
  

  <programlisting>

# 
# Rule 0 (NAT)
# 
$IPTABLES -t nat -A POSTROUTING   -s 172.16.22.0/24 -d 192.168.2.0/24 -j ACCEPT  
$IPTABLES -t nat -A PREROUTING   -s 172.16.22.0/24 -d 192.168.2.0/24 -j ACCEPT  

  </programlisting>

  <para>
    
    For PF we get this:
    
  </para>
  

  <programlisting>

# Rule  0 (NAT)
# 
no nat proto {tcp udp icmp} from 172.16.22.0/24 to 192.168.2.0/24 
no rdr proto {tcp udp icmp} from 172.16.22.0/24 to 192.168.2.0/24 

              </programlisting>

        <para>
  
                For PIX Firewall Builder generates "nat 0" rule:
              
  </para>
  

  <programlisting>

! Rule  0 (NAT)
!
access-list nat0.inside permit ip 172.16.22.0 255.255.255.0 192.168.2.0 255.255.255.0
nat (inside) 0 access-list nat0.inside
! 

              </programlisting>

	</sect2>

	<sect2>
        <title>Redirection rules</title>

  

        <para>
  
                Another useful class of destination translation rule
                is the one that does redirection. Rule like this makes
                the firewall send matching packets to itself, usually
                on a different port. This rule can be used to set up a
                transparent proxy. To set up a redirection rule in
                Firewall Builder, place firewall object or one of its
                interfaces in <guilabel>Translated Destination</guilabel>. Here is an
                example:
              
  </para>
  

        <figure float="1"><title/><graphic scale="50" fileref="dnat-rule-6.png"/></figure>

        <para>
  
                And here is what is generated for iptables:
              
  </para>
  

  <programlisting>

# Rule 0 (NAT)
# 
$IPTABLES -t nat -A PREROUTING  -p tcp -m tcp  -s 172.16.22.0/24 \
     --dport 80 -j REDIRECT --to-ports 3128 

              </programlisting>

        <para>
  
                Iptables uses special target <emphasis>REDIRECT</emphasis> for this
                kind of redirection.
              
  </para>
  

        <para>
  
                For PF we get this:
              
  </para>
  

  <programlisting>

# Rule  0 (NAT)
# 
rdr proto tcp from 172.16.22.0/24 to any port 80 -&gt; 127.0.0.1 port 3128 
# 

              </programlisting>

	</sect2>


    <sect2>
      <title>Destination NAT Onto the Same Network</title>

      <para>This situation is described in iptables HOWTO <ulink
      url="http://www.netfilter.org/documentation/HOWTO//NAT-HOWTO.html">
      http://www.netfilter.org/documentation/HOWTO//NAT-HOWTO.html</ulink></para>

      <para>This problem occurs when machines on an internal LAN try to access a
      server (let's say a web server) that is actually located on the same
      LAN and NAT'ed through the firewall for external access. If internal
      users access it by its external NAT'ed address, then they send their TCP
      packets through the firewall, which translates them and sends them to
      the server on LAN. The server, however, replies back to the clients
      directly because they are on the same network. Since the reply has
      server's real address in the source, clients do not recognize it and
      the connection cannot be established.</para>

      <para>To resolve this problem you need to make NAT rule to replace the source
      address of the packet with the address of firewall's internal interface.
      This should happen in addition to the translation of the destination
      address described in the previous chapters. If the source address of the
      packet that hits the server belongs to the firewall, the server replies
      to it; the firewall then translates again before sending the packet back
      to the client. Client sees the address it expects and the connection gets
      established.</para>

      <para>Fortunately, Firewall Builder supports this kind of a dual-translation NAT rule. Rule #0 in <xref
      linkend="dnat-back-to-same-net" /> does just that: it translates both the 
      source and destination addresses of the packet.</para>

      <para>The firewall's <emphasis>eth0</emphasis> interface is internal and is
      connected to the same subnet the <emphasis>web server</emphasis>
      belongs to. For any packet headed for any address of the firewall, TCP
      port 80, the rule #0 substitutes its source address with the address of
      interface <emphasis>eth0</emphasis> and its destination address with the
      address of the <emphasis>web server</emphasis>. The packet reaches the
      server because its destination address has been changed. This also makes
      the server reply back to the firewall, which in turn provides reverse
      translation before it sends these reply packets back to client
      hosts.</para>

      <figure id="dnat-back-to-same-net">
          <title>DNAT back to the same LAN</title>
              <graphic scale="60" fileref="dnat-back-to-same-net.png" />
        </figure>

      <para>Rule in <xref linkend="dnat-back-to-same-net" /> replaces source
      address of all packets regardless of their origin. Because of this, the
      web server sees all connections as if they were coming from the firewall
      rather than from the real clients. If having real client addresses in
      the web server log is necessary, the scope of this rule can be narrowed
      by placing object representing internal network in the
      <emphasis>Original Src</emphasis>. Since the source address needs to
      be translated only in the connections coming from the internal net, dual
      translation rule should only be needed for these connections.
      Connections coming from the Internet can be translated as usual.
      Combination of rules that implement this configuration is shown in <xref
      linkend="dnat-back-to-same-net-2" />. Rule #0 does dual translation,
      while rule #1 does a simple destination address translation. Dual
      translation rule must be the first in the pair because if it weren't,
      another one would match connections coming from the internal net and
      translate destination address without changing the source address.</para>

      <figure id="dnat-back-to-same-net-2">
          <title>Using dual translation only for connections coming from
          internal network</title>
              <graphic scale="60" fileref="dnat-back-to-same-net-2.png" />
        </figure>

      <note>
        <para>Not all firewall platforms provide features Firewall Builder
        needs to implement dual translation rules. Currently dual translation
        rules are supported only with iptables and OpenBSD PF.</para>
      </note>
    </sect2>
    
    </sect1>

