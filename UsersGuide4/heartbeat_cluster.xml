<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <sect2 id="heartbeat_cluster">
    <title>Linux cluster using heartbeat</title>

    <para>
      In this example we work with two Linux machines running
      heartbeat for failover that form High Availability (HA)
      firewall pair, and another machine behind them that will use
      this pair as a firewall. The set up is shown in figure
      <xref linkend="cookbook_linux_hb_cluster_1"/>. Machines <emphasis>linux-test-1</emphasis>
      and <emphasis>linux-test-2</emphasis> are the firewalls and
      <emphasis>linux-test-3</emphasis> is a workstation behind
      them. All testing is done on an isolated network using private
      IP addresses, subnet "outside" the firewalls is
      10.3.14.0/255.255.255.0 and subnet "behind" the firewalls is
      10.1.1.0/255.255.255.0. In fact, this network was located
      behind a router and another firewall that provided connection
      to the Inetrnet. In real configurations subnet that is
      10.3.14.0 here will probably use publicly routable IP
      addresses.
    </para>

    <figure id="cookbook_linux_hb_cluster_1">
      <title>HA configuration using two Linux machines running heartbeat</title>
      <graphic scale="50" fileref="linux-heartbeat-cluster-1.png"/>
    </figure>

    <note>
      <para>
        IPv6 addresses are not used in this recipe. Some interface
        objects in the screenshots have ipv6 addresses because firewall
        objects were "discovered" using snmp which finds ipv6
        addresses. You can disregard these addresses while working
        with examples in this chapter.
      </para>
    </note>

    <sect3>
      <title>Setting up heartbeat</title>

      <para>As shown in
        <xref linkend="cookbook_linux_hb_cluster_1"/>, machines
        linux-test-1 and linux-test-2 run heartbeat daemon
        (<ulink url="http://www.linux-ha.org/"><citetitle>Linux-HA
            home page</citetitle></ulink>) to create virtual IP address
        on both subnets. Heartbeat adds virtual IP address to the
        same interface eth0 or eth1. One of the daemons becomes
        master and takes owbership of the virtual address by adding
        it to the interface with the label "eth0:0" or "eth1:0".
      </para>

      <note>
        <para>
          <xref linkend="linux_cluster"/> explains that this "eth0:0"
          is not an interface and should not be used as the name of
          the interface object in fwbuilder configuration. See
          <xref linkend="linux_cluster"/> for more detailed explanation.
        </para>
      </note>

      <para>
        Heartbeat sends UDP datagram to the multicast address
        225.0.0.1 every second or so to declare that it is up and
        running and owns the address. If the machine it is running
        on shuts down for any reason, this stream of packets from
        the master stops and after pre-determined timeout the second
        machine becomes master and assumes the virtual IP
        address. Heartbeat atually is more complex than that, it can
        be configured to monitor certain resources on the machine
        and give up the address if some conditions are met. In that
        case, two daemons negotiate transfer of the address from one
        machine to another and the second machine becomes
        active. These aspects of heartbeat configuration are outside
        the scope of this manual and we will not go into more
        details about it. See heartbeat documentation
        on <ulink url="http://www.linux-ha.org/"><citetitle>Linux-HA
            home page</citetitle></ulink> or heartbeat manual for that.
      </para>

      <para>
        Unlike VRRPd, heartbeat does not replace MAC address of the
        active machine with a virtual one, it uses gratutious ARP to
        announce changing MAC address. This does not change anything
        in the fwbuilder configuration for the cluster.
      </para>

      <para>
        Assuming you have followed installation instructions for the
        heartbeat and have correct package on the machine, you can
        build simple configuration for it by creating just three
        files:

        <itemizedlist>
          <listitem>
            <para> ha.cf, the main configuration file</para>
          </listitem>
          <listitem>
            <para>haresources, resource configuration file</para>
          </listitem>
          <listitem>
            <para>authkeys, authentication information</para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        Here is the configuration for the test setup I am using:
      </para>

      <figure id="heartbeat_mcast_config_1">
        <title>Heartbeat configuration files</title>
        <screen>
# cat ha.cf:

mcast eth0 225.0.0.1 694 1 0
mcast eth1 225.0.0.1 694 1 0
auto_failback on
node linux-test-1
node linux-test-2


# cat haresources 

linux-test-1 IPaddr::10.3.14.150/24/eth0/10.3.14.255
linux-test-1 IPaddr::10.1.1.254/24/eth1/10.1.1.255 


# cat authkeys 

auth 3
3 md5 hb-auth-key
        </screen>
      </figure>

      <para>
        This tells heartbeat to run two sessions, on interfaces eth0
        and eth1, using multicast with default group address
        225.0.0.1 and udp port 694. There are two nodes,
        "linux-test-1" and
        "linux-test-2". File <emphasis>haresources</emphasis>
        defines virtual IP addresses on both subnets and file
        authkeys sets up md5 authentication with a simple shared
        key. Nice aspect of the heartbeat configuration is that all
        three files are identical on both machines in the cluster.
        File <emphasis>authkeys</emphasis> should have permissions
        "0600", other files can have permissions "0644":
      </para>

      <screen>
root@linux-test-1:/etc/ha.d# ls -la authkeys  haresources ha.cf 
-rw------- 1 root root   648 2010-02-03 09:17 authkeys
-rw-r--r-- 1 root root 10610 2010-02-03 09:28 ha.cf
-rw-r--r-- 1 root root   106 2010-02-04 10:21 haresources
      </screen>

      <para>
        Now we can start heartbeat on both machines
        using <emphasis>"/etc/init.d/heartbeat start"</emphasis>
        command (on Ubuntu). If everything is done correctly,
        heartbeat daemons should come up and after a while one of
        them becomes active. Which one is determined by the node
        name that is the first word in each line of
        the <emphasis>haresources</emphasis> file. Daemons log their
        progress, as well as warnings and errors in the
        /var/log/messages file. When active daemon takes over virtual
        ip address, it is added to the interface and look like this
        (virtual addresses are highlited in red):
      </para>

      <screen id="cookbook_ip_addresses_heartbeat_members">
root@linux-test-1:~# ip -4 addr ls
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    inet 127.0.0.1/8 scope host lo
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    inet 10.3.14.108/24 brd 10.3.14.255 scope global eth0
    <emphasis role="redtext">inet 10.3.14.150/24 brd 10.3.14.255 scope global secondary eth0:0</emphasis>
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    inet 10.1.1.1/24 brd 10.1.1.255 scope global eth1
    <emphasis role="redtext">inet 10.1.1.254/24 brd 10.1.1.255 scope global secondary eth1:0</emphasis>

root@linux-test-2:~# ip -4 addr ls
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    inet 127.0.0.1/8 scope host lo
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    inet 10.3.14.109/24 brd 10.3.14.255 scope global eth0
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    inet 10.1.1.2/24 brd 10.1.1.255 scope global eth1
      </screen>

    </sect3>

    <sect3>
      <title>Firewall and Cluster objects for the HA firewall
        configuration with heartbeat</title>

      <para>
        Now we can create objects in Firewall Builder to represent
        this cluster. We start with two firewall objects configured
        with ip addresses but no policy or NAT rules. Interfaces,
        their addresses and netmasks are shown on
        <xref linkend="cookbook_linux_hb_cluster_2"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_2">
        <title>Interfaces and addresses of the cluster members</title>
        <graphic scale="50" fileref="linux-hb-cluster-2.png"/>
      </figure>

      <para>
        Now create new cluster. First, select firewalls
        "linux-test-1" and "linux-test-2" in the tree, then click
        right mouse button to open context menu and use item "New
        cluster from selected firewalls" as shown on
        <xref linkend="cookbook_linux_hb_cluster_3"/>.
      </para>

      <figure id="cookbook_linux_hb_cluster_3">
        <title>Creating new cluster object from selected member
          firewalls</title>
        <graphic scale="50" fileref="linux-hb-cluster-3.png"/>
      </figure>

      <para>
        This method opens up wizard that creates new cluster object
        with the list of the firewalls that shows two firewalls that
        were selected in the tree:
      </para>

      <figure id="cookbook_linux_hb_cluster_4">
        <title>Creating new cluster object</title>
        <graphic scale="50" fileref="linux-hb-cluster-4.png"/>
      </figure>

      <para>
        After you click "Next", you aarrive on the next page where
        you establish correspondence between cluster interfaces and
        interfaces of the member firewalls. The program finds
        interfaces of the members with the same name that can be
        used for a cluster and preconfigures cluster interfaces
        using this information. In our case, it created cluster
        interfaces <emphasis>"eth0"</emphasis>, <emphasis>"eth1"</emphasis>
        and <emphasis>"lo"</emphasis> and mapped them to the
        inetrfaces with the same name in both members. See
        <xref linkend="cookbook_linux_hb_cluster_5"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_5">
        <title>Arranging cluster interfaces</title>
        <graphic scale="50" fileref="linux-hb-cluster-5.png"/>
      </figure>

      <para>
        This example is straightforward because there is direct
        correspondence between them. In more complex cases member
        firewalls may have different number of interfaces, only some
        of which should be used for the cluster configuration. Or
        failover protocol used for the cluster may create its own
        interfaces, such as CARP on OpenBSD. In that case the name
        of the interface that is configured at the top of the wizard
        page would be "carp0" and we would map it to interfaces of
        the members, say "en0" on both, using controls at the bottom
        of the wizard page. However heartbeat does not create new
        interface so the cluster interface objects must have the
        same name as corresponding member interfaces, in our
        case <emphasis>"eth0"</emphasis>, <emphasis>"eth1"</emphasis>
        and
        <emphasis>"lo"</emphasis>. You can create new cluster
        interfaces or delete existing ones on this page using the
        "+" and "x" buttons. See <xref linkend="linux_cluster"/> for
        more information on the cluster interfaces in Firewall
        Builder.
      </para>

      <para>
        We assign IP addresses and choose failover protocols for the
        cluster interfaces on the next page of the wizard
        <xref linkend="cookbook_linux_hb_cluster_6"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_6">
        <title>Configuring IP addresses of the cluster interfaces</title>
        <graphic scale="50" fileref="linux-hb-cluster-6.png"/>
      </figure>

      <para>
        Most protocols require IP address which you can add by
        clicking "Add address" button.  The only exception at this
        time is Cisco PIX where HA pair uses IP addresses of the
        master instead of using special virtual addresses. In that
        case the part of the wizard page where you configure IP
        addresses will be disabled.
      </para>

      <para>
        Choose failover protocol using drop-down list. Among other
        "real" protocols list includes item "None". Use this item if
        you do not want fwbuilder to add automatic policy rules to the
        generated configuration and plan to do this yourself. Also use
        this "protocol" to configure cluster loopback interface. In
        any case cluster interfaces must be configured with
        corresponding interfaces of the member firewalls to establish
        the mapping.
      </para>

      <note>
        <para>
          The address and netmask pair of the cluster interface must
          be configured exactly the same as done by the cluster
          software. In the case of heartbeat, the netmask is /24.
          See the output of "ip addr show" command above where it is
          visible that the address added by heartbeat comes with
          netmask /24. The netmask is defined in
          the <emphasis>"haresources"</emphasis> file. We use the
          same netmask in the address configuration in cluster
          interfaces <emphasis>eth0</emphasis>
          and <emphasis>eth1</emphasis>. See
          <xref linkend="cookbook_managing_cluster_addresses"/> for
          the explanation of why this netmask is important.
        </para>
      </note>

      <para>
        Final page of the
        wizard <xref linkend="cookbook_linux_hb_cluster_7"/> allows you to
        choose to copy Policy and NAT rules from one of the members to
        the new cluster object.  This can be useful if you used to
        manage a cluster with fwbuilder by maitaining two firewall
        objects manually or with the aid of external scripts. If you
        decide to use this option, fwbuilder GUI copies policy and NAT
        rules from the member you choose to the new cluster object,
        then creates backup copies of both member firewall objects
        with the name with suffix "-bak" and deletes all Policy and
        NAT rules in the rule sets of the member firewall objects it
        uses for the cluster. This way, you can always return to your
        old setup using these backup objects and at the same time, new
        cluster configuration has all the rules in the cluster object.
      </para>

      <note>
        <para>
          This is important because if member firewall object has Policy
          or NAT rule set with the same name as the one in the cluster,
          then fwbuilder will use rules from the rule set of the member,
          thus overriding all the rules in the cluster's rule set with
          the same name. This allows you to create complex
          configurations where majority of the rules are defined and
          maintained in the cluster object, but a few rules can be
          created separately in the members to complement rules of the
          cluster.
        </para>
      </note>

      <figure id="cookbook_linux_hb_cluster_7">
        <title>Final page of the new cluster wizard</title>
        <graphic scale="50" fileref="linux-hb-cluster-7.png"/>
      </figure>

      <para>
        Screenshot <xref linkend="cookbook_linux_hb_cluster_8"/>
        demonstrates newly created cluster object.
      </para>

      <figure id="cookbook_linux_hb_cluster_8">
        <title>Cluster object</title>
        <graphic scale="50" fileref="linux-hb-cluster-8.png"/>
      </figure>

      <para>
        Each cluster interface has additional child object (located
        underneath it in the tree) with the
        name <emphasis>linux-test-1:eth0:members</emphasis> and
        <emphasis>linux-test-1:eth1:members</emphasis>. These objects
        are failover groups, this is where the failover protocol and
        mapping between the cluster and member interfaces is
        configured. Screenshot <xref linkend="cookbook_linux_hb_cluster_9"/>
        highlights failover group that belongs to interface eth0:
      </para>

      <figure id="cookbook_linux_hb_cluster_9">
        <title>Cluster Failover Group in the object tree</title>
        <graphic scale="50" fileref="linux-hb-cluster-9.png"/>
      </figure>

      <para>
        Failover group is configured with the name, protocol and
        interfaces of the member firewalls that correspond to the
        cluster interface this failover group belongs to. Failover group
        object selected on <xref linkend="cookbook_linux_hb_cluster_9"/>
        looks like this:
      </para>

      <figure id="cookbook_linux_hb_cluster_10">
        <title>Cluster Failover Group object</title>
        <graphic scale="50" fileref="linux-hb-cluster-10.png"/>
      </figure>


      <para>
        Failover group for the interface <emphasis>eth1</emphasis>
        should look the same, except for using
        interfaces <emphasis>eth1</emphasis> of the member
        firewalls. Use button <emphasis>Manage Members</emphasis> to
        open a dialog that lets you add and remove member firewall
        interfaces in the failover group.
      </para>


      <para>
        Another new type of object that appears in the clusters is
        State Synchronization group
        <xref linkend="cookbook_linux_hb_cluster_11"/>. This group object
        defines state synchronization protocol used for the cluster
        and interfaces of the member firewalls where this protocol
        runs. In the case of Linux firewalls
        only <emphasis>conntrack</emphasis> protocol is available.
      </para>

      <note>
        <para>
          The purpose of this new object is to provide all necessary
          configuration parameters to let fwbuilder generate policy
          rules to permit packets of this protocol. In some other cases,
          such as with PF on OpenBSD where state synchronization is done
          via <emphasis>pfsync</emphasis> interface, fwbuilder can
          generate actual configuration for the protocol itself. However
          at this time fwbuilder does not generate configuration or
          command line for the conntrackd daemon.
        </para>
      </note>

      <figure id="cookbook_linux_hb_cluster_11">
        <title>State Synchronization Group in the object tree</title>
        <graphic scale="50" fileref="linux-hb-cluster-11.png"/>
      </figure>

      <para>
        Just like Failover Group, State Synchronization Group object is
        configured with the name, protocol and member interfaces:
      </para>

      <figure id="cookbook_linux_hb_cluster_12">
        <title>State Synchronization Group object</title>
        <graphic scale="50" fileref="linux-hb-cluster-12.png"/>
      </figure>

      <para>
        If you do not use <emphasis>conntrackd</emphasis> in your
        cluster setup and do not need iptables rules to permit its
        packets in the generated script, then just do not configure
        State Synchronization group object with inetrfaces of the
        member firewalls. Such empty State Synchronization group
        object will look like this when opened in the editor:
      </para>

      <figure id="cookbook_linux_hb_cluster_12-1">
        <title>Empty State Synchronization Group object</title>
        <graphic scale="50" fileref="linux-cluster-empty-state-sync-group.png"/>
      </figure>

      <para>
        You can edit parameters of the state synchronization protocol,
        such as IP address of the multicast group it uses and port
        number if you click <emphasis>Edit protocol
          parameters</emphasis> button:
      </para>

      <figure id="cookbook_linux_hb_cluster_13">
        <title>State Synchronization protocol parameters</title>
        <graphic scale="50" fileref="linux-hb-cluster-13.png"/>
      </figure>

      <para>
        Firewall Builder uses this information to generate policy
        rules to permit conntrack packets. See examples of the output
        generated by the policy compiler below.
      </para>



      <para>

      </para>




      <note>
        <para>
          There is very little difference between building a cluster
          using VRRPd or heartbeat in Firewall Builder. To switch
          from one protocol to the other you would need to do the
          following:
          <itemizedlist>
            <listitem><para>Open each failover group object in the editor and change protocol</para></listitem>
            <listitem><para>VRRPd uses netmask /32 for the virtual IP addresses, so if your heartbeat setup uses /24, then you need to change these too.</para></listitem>
          </itemizedlist>
          This is it. If your heartbeat setup uses /32 netmask, then
          all you need to do is switch the protocol in the failover
          groups.
        </para>
      </note>

    </sect3>


    <sect3>
      <title>Policy rules for the cluster</title>

      <note>
        <para>
          Examples in this recipe illustrate another useful feature of
          cluster configurations in Firewall Builder: cluster object
          <emphasis>"linux-cluster-hb"</emphasis> used in this recipe
          and cluster object <emphasis>"linux-cluster"</emphasis> from
          the previous one (<xref linkend="vrrpd_cluster"/>) use the
          same firewall objects as member firewalls but generate
          configurations for clusters based on different failover
          protocols.  The same member firewall object may be used with
          several cluster objects to test different configurations or
          for migration.
        </para>
      </note>

      <para>
        Now we can move on to building cluster policy and NAT
        rules. In the examples below I am using a new feature in
        Firewall Builder 4.0 that lets you quickly compile single rule
        and see the result in the bottom panel of the GUI
        immediately. To do this, click right mouse button anywhere in
        the rule to open context menu and use item "Compile" or
        highlight the rule and hit keyboard key
        "X". <xref linkend="cookbook_linux_hb_cluster_14"/>
      </para>

      <figure id="cookbook_linux_hb_cluster_14">
        <title>Compiling single rule</title>
        <graphic scale="50" fileref="linux-vrrpd-cluster-14.png"/>
      </figure>

      <para>
        <xref linkend="cookbook_linux_hb_cluster_15"/> demonstrates minimal
        policy rule set for the cluster that demonstrates general
        principles used by fwbuilder to generate configurations for
        the member firewalls.
      </para>

      <figure id="cookbook_linux_hb_cluster_15">
        <title>Simple policy for the cluster, also showing generated
          iptables commands for the anti-spoofing rule</title>
        <graphic scale="50" fileref="linux-hb-cluster-15.png"/>
      </figure>


      <para>
        Lets inspect policy rules shown in
        <xref linkend="cookbook_linux_hb_cluster_15"/>. All rules are built
        with global option "Assume firewall is part of any" turned off
        in both linux-test-1 and linux-test-2 firewalls.
      </para>

      <itemizedlist>
        <listitem>
          <para>Rule 0: anti-spoofing rule. When we build
            anti-spoofing rule for a standalone firewall, we put
            firewall object in "Source", its external interface in
            "Interface" and make direction "Inbound". When we do this
            for a cluster, we put cluster object in "Source" instead of
            the member firewall object. The interface object in
            "Interface" element of this rule is the one that belongs to
            the cluster rather than its members. All other aspects of
            the rule are the same. Fwbuilder generates iptables commands
            for this rule using ip addresses of the cluster (10.3.14.150
            and 10.1.1.254 in our example) and addresses of the member
            firewall it compiles for, in this case 10.3.14.108 and
            10.1.1.1 for linux-test-1 and 10.3.14.109 and 10.1.1.2 for
            linux-test-2. This is clearly visible in the generated
            output shown in <xref linkend="cookbook_linux_hb_cluster_15"/>. In
            other words, policy compiler processes rules twice, first
            compiling for the first member firewall and then for the
            second one. On each pass, cluster object represents
            corresponding member, plus virtual addresses configured in
            the cluster's interfaces.
          </para>
        </listitem>

        <listitem>
          <para>Rules 1 and 2: heartbeat can be configured to use
          either multicast or unicast addresses. See below for the
          example of configuration with unicast addresses, but by
          default it is assumed to use multicast.  Rules 1 and 2
          permit IGMP packets that the system needs to be able to join
          multicast group.  Rules 1 and 2 permit packets sent to the
          standard multicast address registered for IGMP in both
          directions (in and out). These rules use standard IPv4
          address object "IGMP" that is available in the Standard
          objects library. The rules could be even more restrictive
          and also match IP service object "IGMP", also available in
          the Standard objects library.  Since this service object
          matches protocol number 2 and IP option
          "router-alert". Unfortunately only the very latest Linux
          distributions ship iptables module ipv4options that is
          needed to match IP options so I did not put the service
          object in the rule. Here is how generated iptables script
          look like when "Service" field on the rules 1 and 2 is "any"
          </para>

          <para>
            <screen>
linux-test-1 / Policy / rule 1 
$IPTABLES -A OUTPUT -d 224.0.0.22 -m state --state NEW -j ACCEPT

linux-test-2 / Policy / rule 1 
$IPTABLES -A OUTPUT -d 224.0.0.22 -m state --state NEW -j ACCEPT
            </screen>


            <screen>
linux-test-1 / Policy / rule 2 
$IPTABLES -A INPUT -s 224.0.0.22 -m state --state NEW -j ACCEPT

linux-test-2 / Policy / rule 2 
$IPTABLES -A INPUT -s 224.0.0.22 -m state --state NEW -j ACCEPT
            </screen>

          </para>

          <para>
            If I put standard IP service object "IGMP" in the
            "Service" field of rules 1 and 2, I get the following
            iptables commands for the rule 1:
          </para>

          <para>
            <screen>
linux-test-1 / Policy / rule 1 
$IPTABLES -A OUTPUT -p 2 -d 224.0.0.22 -m ipv4options --ra -m state --state NEW -j ACCEPT

linux-test-2 / Policy / rule 1 
$IPTABLES -A OUTPUT -p 2 -d 224.0.0.22 -m ipv4options --ra -m state --state NEW -j ACCEPT
            </screen>
          </para>
        </listitem>


        <listitem>
          <para>
            The rest of the rules are fairly usual and serve to
            illustrate that building a policy for the cluster is no
            different than building the policy for a regular
            standalone firewall. Rules 3 and 4 permit access from the
            firewall to internal network and the other way
            around. Generated iptables commands use INPUT and OUTPUT
            chains and look like this:
          </para>
          
          <para>
            <screen>
linux-test-1 / Policy / rule 3 
$IPTABLES -A OUTPUT -d 10.1.1.0/24 -m state --state NEW -j ACCEPT

linux-test-2 / Policy / rule 3 
$IPTABLES -A OUTPUT -d 10.1.1.0/24 -m state --state NEW -j ACCEPT
            </screen>

            <screen>
linux-test-1 / Policy / rule 4 
$IPTABLES -A INPUT -s 10.1.1.0/24 -m state --state NEW -j ACCEPT

linux-test-2 / Policy / rule 4 
$IPTABLES -A INPUT -s 10.1.1.0/24 -m state --state NEW -j ACCEPT
            </screen>
          </para>
        </listitem>

        <listitem>
          <para>
            Rule 5 permits outbound access from the internal net to the
            Internet and uses chain FORWARD. Generated iptables code for
            this rule is no different from that produced for a regular
            standalone firewall.
          </para>
        </listitem>

      </itemizedlist>

      <para>
        Note that we don't need to add explicit rule to permit heartbeat
        and conntrackd packets to the policy. This is because
        fwbuilder adds these rules automatically. Here is how they
        look like in the generated iptables script for
        the <emphasis>linux-test-1</emphasis> firewall:
      </para>

      <screen>
# ================ Table 'filter', rule set Policy
# 
# Rule -6 heartbeat (automatic)
# 
$IPTABLES -A OUTPUT -o eth1 -p udp -m udp -d 224.0.10.100 --dport 694 -j ACCEPT
# 
# Rule -5 heartbeat (automatic)
# 
$IPTABLES -A INPUT -i eth1 -p udp -m udp -d 224.0.10.100 --dport 694 -j ACCEPT
# 
# Rule -4 heartbeat (automatic)
# 
$IPTABLES -A OUTPUT -o eth0 -p udp -m udp -d 224.0.10.100 --dport 694 -j ACCEPT
# 
# Rule -3 heartbeat (automatic)
# 
$IPTABLES -A INPUT -i eth0 -p udp -m udp -d 224.0.10.100 --dport 694 -j ACCEPT
# 
# Rule -2 CONNTRACK (automatic)
# 
$IPTABLES -A OUTPUT -o eth1 -p udp -m udp -d 225.0.0.50 --dport 3780 -j ACCEPT
# 
# Rule -1 CONNTRACK (automatic)
# 
$IPTABLES -A INPUT -i eth1 -p udp -m udp -d 225.0.0.50 --dport 3780 -j ACCEPT
      </screen>

      <para>
        Rules for conntrack are associated with ineterface eth1
        because the State Synchronization group is configured with
        interfaces eth1 of the member firewalls (<xref linkend="cookbook_linux_hb_cluster_12"/>).
      </para>
    </sect3>

    <sect3>
      <title>Using unicast configuration for heartbeat and conntrack</title>

      <para>
        Failover protocol heartbeat and state synchronization protocol
        conntrack can work using either multicast or unicast
        addresses. Configuration described in this recipe so far used
        multicast addresses for both. To switch to unicast, you need
        to change configuration of heartbeat in the ha.cnf file to use
        unicast. Here is how it looks like for the machine
        linux-test-1:

        <screen>
# cat ha.cnf
ucast eth0 10.3.14.109
ucast eth1 10.1.1.2
        </screen>

        Before, when heartbeat was configured to use multicast, the
        ha.cnf file was identical on both cluster member firewalls.
        Now that each machine is configured with IP address of the
        other machine in the cluster, ha.cnf files are different.
      </para>

      <para>
        Apparently conntrackd can also work using unicast addresses
        however I can not provide example of its configuration.
      </para>

      <para>
        To build iptables rules for heartbeat and conntrack working
        with unicast addresses, open failover group objects associated
        with cluster interfaces as shown in
        <xref linkend="cookbook_linux_hb_cluster_9"/> and
        <xref linkend="cookbook_linux_hb_cluster_10"/>, click
        <emphasis>"Edit protocol parameters"</emphasis> button and
        turn on checkbox "Use unicast address":
      </para>

      <figure id="cookbook_linux_hb_cluster_unicast_heartbeat">
        <title>Using heartbeat in unicast mode</title>
        <graphic scale="50" fileref="linux-hb-cluster-unicast-heartbeat.png"/>
      </figure>

      <para>
        To switch to unicast for conntrackd, open State
        Synchronization group object in the editor and
        click <emphasis>"Edit protocol parameters"</emphasis>
        button, then turn on "Use unicast address" checkbox:
      </para>

      <figure id="cookbook_linux_hb_cluster_unicast_conntrack">
        <title>Using heartbeat in unicast mode</title>
        <graphic scale="50" fileref="linux-hb-cluster-unicast-conntrack.png"/>
      </figure>

      <note>
        <para>
          When you switch to unicast, the "Address" input field in the
          heartbeat and conntrack protocol parameters dialogs becomes
          disabled.
        </para>
      </note>

      <para>
        Switching to unicast makes fwbuilder generate iptables
        commands that match IP address of the peer firewall for the
        corresponding interface pair. Here is the script generated for
        the machine <emphasis>linux-test-1</emphasis>:
      </para>

      <screen>
# Rule -4 heartbeat (automatic)
# 
$IPTABLES -A OUTPUT -o eth0 -p udp -m udp -d 10.3.14.109 --dport 694 -j ACCEPT
# 
# Rule -3 heartbeat (automatic)
# 
$IPTABLES -A INPUT -i eth0 -p udp -m udp -s 10.3.14.109 --dport 694 -j ACCEPT
# 
# Rule -2 CONNTRACK (automatic)
# 
$IPTABLES -A OUTPUT -o eth1 -p udp -m udp -d 10.1.1.2 --dport 3780 -j ACCEPT
# 
# Rule -1 CONNTRACK (automatic)
# 
$IPTABLES -A INPUT -i eth1 -p udp -m udp -s 10.1.1.2 --dport 3780 -j ACCEPT
      </screen>
    </sect3>

    <sect3>
      <title>NAT rules for the cluster</title>

      <para>
        Now lets look at the NAT rule built for this cluster
        <xref linkend="cookbook_linux_hb_cluster_16"/>
      </para>

      <figure id="cookbook_linux_hb_cluster_16">
        <title>NAT rule for the cluster</title>
        <graphic scale="50" fileref="linux-hb-cluster-16.png"/>
      </figure>


      <para>
        Interface <emphasis>eth0</emphasis> used in the "Translated
        Source" element of this rule is the one that belongs to the
        cluster, not member firewalls. Generated iptables commands use
        cluster interface that belongs to this interface for the
        translation. Otherwise this is very common SNAT rule.
      </para>

    </sect3>


    <sect3>
      <title>Managing IP addresses of the interfaces in heartbeat cluster setup</title>

      <para>
        In order to ensure the environment in which generated iptables
        rules will work really matches assumptions under which these
        rules were generated, fwbuilder can manage IP addresses of the
        interfaces of the firewall machine. This feature is optional
        and is controlled by the checkbox "Configure interfaces of the
        firewall machine" in the "Script" tab of the firewall object
        "advanced settings" dialog,
        <xref linkend="cookbook_linux_hb_cluster_17"/>:

        <figure id="cookbook_linux_hb_cluster_17">
          <title>Options in the "Script" tab of the firewall object dialog</title>
          <graphic scale="50" fileref="linux-vrrpd-cluster-17.png"/>
        </figure>
        
        The reason for this is that if the program generates rules
        assuming certain addresses belong to the firewall, but in fact
        they do not, packets will go into chains different from those
        used in the generated iptables commands and behavior of the
        firewall will be wrong.
      </para>

      <para>
        The code that manages addresses of interfaces should be able
        to find and ignore addresses added by the failover daemons
        such as VRRPd, heartbeat or keepalived. The program does this
        by looking at the ip addresses of the cluster interfaces. It
        is important therefore to configure these addresses exactly as
        they are done by the failover daemons, including both the
        address and netmask. Heartbeat configuration used in the
        recipe <xref linkend="heartbeat_mcast_config_1"/> configure
        virtual IP address with netmask /24. The addresses of the
        cluster interfaces must be configured just like that,
        otherwise generated script will kill them when it activates
        firewall policy. This is shown in <xref linkend="cookbook_linux_hb_cluster_6"/>
      </para>

    </sect3>



  </sect2>

