<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <chapter id="compile-install-detail">
    <title>Installing a Policy onto a Firewall</title>


    <para>      
      After firewall configuration has been generated by
      one of the policy compilers and saved in a file on
      disk in the format required by the target firewall,
      it needs to be transferred to the firewall machine
      and activated. This function is performed by the
      component we call "Policy Installer", which is part
      of the Firewall Builder GUI.
      
    </para>

    <para>
      
      The installer needs to be able to copy the generated firewall
      script to the firewall and then run it there. In order
      to do so, it uses secure shell. The program does not
      include ssh code; it uses an external ssh client.  On
      Linux, BSD and Mac OS X it uses the standard ssh
      client <emphasis>ssh</emphasis> and secure shell file copy
      program <emphasis>SCP</emphasis> that come with the system; on
      Windows it uses <emphasis>plink.exe</emphasis> and <emphasis>pscp.exe</emphasis>.
      The full directory path to the ssh client program can be
      configured in the Preferences dialog (accessible via
      Edit/Preferences menu). However if you are on Linux,
      *BSD or Mac and use the standard ssh client 
      available via your PATH environment variable, you do
      not need to change the default value there.
      
    </para>
  

    <para>
      
      Installer works differently depending on the target
      platform. In the case of Linux and BSD-based firewalls, it
      uses <emphasis>SCP</emphasis> to copy the generated configuration files
      to the firewall machine and then uses <emphasis>ssh</emphasis> to
      log in and run the script. In the case of Cisco routers or
      ASA appliance (PIX), it logs in, switches
      to <emphasis>enable</emphasis> and then <emphasis>configuration</emphasis> mode
      and executes configuration commands one by one in a
      manner similar to <emphasis>expect</emphasis> scripts. It inspects the 
      router's replies looking for errors and stops if it
      detects one. In the end, it issues the command <emphasis>write
        mem</emphasis> to store the new configuration in memory, then logs
      out.
      
    </para>
    

    <para>
      
      The built-in policy installer has been designed to work
      with a dedicated firewall machine, in other words, when the 
      computer where you run Firewall Builder and the actual
      firewall are different machines. Nevertheless, it can
      be used when they are the same machine as well. The
      only difference is that in all commands below you
      would use the name or address of the machine where you
      run Firewall Builder instead of the name or address of
      the dedicated firewall. The SSH client will then connect
      back to the same machine where it runs and everything
      will work exactly the same as if it was different
      computer.
      
    </para>
    <!-- ***************************************************** -->

  <sect1 id="fw_address">
    <title>How does installer decide what address to use to connect to
                the firewall</title>

    <para>
      Installer does not use the name of the firewall when it
      connects; it always uses the firewall's IP address. Installer
      starts by scanning interfaces of the firewall object looking for
      one that is marked as "Management interface" in the interface
      object dialog. Installer uses the address of this interface to
      connect. The <guilabel>Management interface</guilabel> checkbox
      looks this:
    </para>
  

    <figure>
      <title/>
      <graphic scale="50" fileref="management_interface.png"/>
    </figure>

          <para>
  
                  If your firewall has multiple addresses and you want
                  to use the one that is not assigned to its interface
                  in the fwbuilder object, then you can overwrite the
                  address using the entry field in
                  the <emphasis>"Installer"</emphasis> tab of the "Advanced"
                  firewall object settings dialog, like this:
                
          </para>
  

          <figure>
            <title/>
            <graphic scale="50" fileref="alternative_fw_address.png"/>
          </figure>

          <para>
  
                  More about other input fields in this dialog below.
                
          </para>
  

          <para>
  
                  Finally, you can overwrite the address on a one-time
                  basis just for a particular install session using the entry field
                  in the installer options dialog. This is the same
                  dialog where you enter your password:
                
          </para>
  

        <figure>
          <title/>
          <graphic scale="50" fileref="alternative_fw_address_2.png"/>
        </figure>

        <note>        <para>
                  This works for all supported firewall
                  platforms, i.e. iptables on Linux, pf on OpenBSD and
                  FreeBSD, ipfw on FreeBSD and Mac OS X, ipfilter on
                  FreeBSD, Cisco IOS access lists and Cisco ASA
                  (PIX). Regardless of the platform, the installer follows
                  the rules described here to determine what address
                  it should use to connect to the firewall.
                        </para></note>
  <!-- ***************************************************** -->

    </sect1>

    <sect1 id="install-putty">
        <title>Configuring Installer on Windows</title>

  
          <para>
            You can skip this section if you run Firewall
            Builder GUI on Linux, *BSD or Mac OS X.
          </para>
  

          <para>
            Here is the link to
            <ulink url="http://www.fwbuilder.org/slideshows/using_putty/slide_1.html">
              slide show </ulink> that demonstrates the process.
          </para>
  

          <para>
            Download and install putty.exe, plink.exe and pscp.exe
            somewhere on your machine (say, in C:\putty). Download URL
            is
  <ulink url="http://www.chiark.greenend.org.uk/~sgtatham/putty/">http://www.chiark.greenend.org.uk/~sgtatham/putty/</ulink>
          </para>
  

          <para>
            Installer does not use <emphasis>putty.exe</emphasis>, but
            it will be very useful for troubleshooting and for setting
            up sessions and ssh keys.
          </para>
  

          <para>
            In the <guimenuitem>Edit/Preferences</guimenuitem> dialog,
            in the <guilabel>SSH</guilabel> tab, use
            the <guibutton>Browse</guibutton> button to
            locate <emphasis>plink.exe</emphasis>.
            Click <guibutton>OK</guibutton> to save preferences. If
            you installed it in <emphasis>C:\putty</emphasis>, then
            you should end up
            with <emphasis>C:\putty\plink.exe</emphasis> in this entry
            field. Do the same to configure the path
            to <emphasis>pscp.exe</emphasis>.
          </para>
  

          <para>
            You may log in to the firewall using a regular user
            account or as root. See instructions below for an
            explanation how to configure sudo if you use regular user
            accounts. This part of the configuration does not depend
            on the OS on which you run Firewall Builder.
          </para>
  

          <para>
            Before you try to use fwbuilder installer with plink.exe
            and pscp.exe, test it from the command line to make sure
            you can log in to your firewall. If this is the first time
            you've tried to log into the firewall machine using
            putty.exe, plink.exe or pscp.exe, then the program will
            discover a new host key, ask you if it is correct and ask
            if you want to save it in cache. There are lots of
            resources on the Internet that explain what this means and
            how you should verify key accuracy before you accept
            it. If the key is already known to the program it will not
            ask you about it and will just proceed to the part where
            it asks you to enter a password. Enter the password and
            press Enter to see if you can log in.
          </para>
  

          <para>
            Here is the command (assuming you use account "fwadmin" to
            manage firewall "guardian"):
          </para>
  

          <programlisting>
C:\Users\vadim&gt;c:\PuTTY\plink.exe -l fwadmin guardian
          </programlisting>

          <para>
            <figure><title/>
              <graphic scale="50" fileref="plink_login.png"/></figure>
          </para>
  

          <note>
            <para>
              The installer does not use the GUI ssh
              client <emphasis>putty.exe</emphasis>, it uses command
              line utilities that come from the same
              author: <emphasis>plink.exe</emphasis>
              and <emphasis>pscp.exe</emphasis>. You can test SSH
              connectivity with <emphasis>putty.exe</emphasis>, but do
              not enter path to it in the SSH tab of the Preferences
              dialog in Firewall Builder. It won't work.
            </para>
          </note>

  <!-- *************************************************** -->

      </sect1>

      <sect1 id="install_with_regular_user">
        <title>Configuring installer to use regular user account to
        manage the firewall:</title>

        <para>
          Before fwbuilder v3.0.4, the built-in installer could only
          use a regular account to activate a policy if this account
          was configured on the firewall to use sudo without a
          password. Starting with v3.0.4, this is not necessary
          anymore because the installer can recognize sudo password
          prompts and enter the password when needed.
          </para>
  

  <itemizedlist>

  <listitem>        <para>
  
                  Create an account on the firewall (say,
                  "fwadmin"), create a group "fwadmin" and make
                  this user a member of this group. Most modern
                  Linux systems automatically create group with
                  the name the same as the user
                  account.


  <programlisting>
  useradd fwadmin
</programlisting>
                        </para>
  </listitem>
  

                

  <listitem>        <para>
  
                  Create directory /etc/fw/ on the firewall, make
                  it belong to group fwadmin, make it group
                  writable.
  <programlisting>
mkdir /etc/fw
chgrp fwadmin /etc/fw
chmod g+w fwadmin /etc/fw
</programlisting>
                        </para>
  </listitem>
  
  <listitem>        <para>
  
                    Configure sudo to permit user fwadmin to execute the
                    firewall script and a couple of other commands
                    used by the fwbuilder policy installer.  Run
                    <emphasis>visudo</emphasis> on the firewall to edit file
                    <emphasis>/etc/sudoers</emphasis> as follows:


          </para>
  

  <programlisting>
Defaults:%fwbadmin   !lecture , passwd_timeout=1 , timestamp_timeout=1
# User alias specification
%fwbadmin  ALL = PASSWD: /etc/fw/&lt;FWNAME&gt;.fw , /usr/bin/pkill , /sbin/shutdown
</programlisting>
          <para>
                      
                    Here &lt;FWNAME&gt; is the name of the firewall.
                    Installer will log in to the firewall as user
                    fwadmin, copy the firewall script to file
                    /etc/fw/&lt;FWNAME&gt;.fw and then use the
                    following command to execute it:

	  </para>

  <programlisting>
ssh fwadmin@firewall sudo -S /etc/fw/&lt;FWNAME&gt;.fw
  </programlisting>
                  

                  

          <para>
  
                    Installer needs to be able to run <emphasis>pkill
                      shutdown</emphasis> to kill <emphasis>shutdown</emphasis> command
                    that may be running if you tried to install
                    policy in <emphasis>testing mode</emphasis> before. In
                    testing mode the installer copies the firewall
                    script to temporary directory <emphasis>/tmp</emphasis>,
                    then runs command <emphasis>shutdown -r
                      timeout</emphasis> to schedule reboot in a few
                    minutes, and finally runs the firewall script. To
                    cancel the scheduled reboot you need to install the
                    policy again with test mode checkbox turned
                    off. In this case the installer will copy the
                    firewall script to its permanent place and
                    use <emphasis>pkill</emphasis> to kill the running shutdown
                    command, canceling reboot.
                  
          </para>
  
                       
  </listitem>
  

                

  <listitem>        <para>
  
                  Set up ssh access to the firewall. Make sure you
                  can log in as user fwadmin using ssh from your
                  management workstation:



  <programlisting>
$ ssh -l fwadmin &lt;FWNAME&gt;
  </programlisting>

                  You may use either password or public key
                  authentication; the installer will work either
                  way. Use <emphasis>putty.exe</emphasis> or <emphasis>plink.exe</emphasis> to
                  test ssh access if you are on Windows (see above for
                  the explanation how to do this).
                        </para>
  </listitem>
  

                

  <listitem>        <para>
  
                  In the <guilabel>installer</guilabel> tab of the <guilabel>firewall settings</guilabel>
                  dialog of the firewall object, put in your user name (here it
                  is <emphasis>"fwadmin"</emphasis>):
                        </para>
	  <para>
        <figure float="1"><title/><graphic scale="50" fileref="installer_tab_1.png"/></figure>
          </para>
  

  </listitem>

  <listitem>        <para>
  
                  If you need to use an alternative name or IP
                  address to communicate with the firewall, put it
                  in the corresponding field in the same dialog
                  page.
                        </para>
  </listitem>
  
                

  <listitem>        <para>
  
                  Make sure the entry field <guilabel>directory on the firewall
                  where script should be installed</guilabel> is set
                  to <emphasis>/etc/fw</emphasis>. Firewall Builder is not going to
                  create this directory, so you need to create it
                  manually before you install the firewall policy (see
                  above).
                        </para>
  </listitem>
  
                

  <listitem>        <para>
  
                  Leave "Policy install script" and "Command line options" fields blank.
                        </para>
  </listitem>
  
              </itemizedlist><!-- *************************************************** -->

      </sect1>


      <sect1 id="install_using_root_account">
        <title>Configuring installer if you use root account to manage the firewall:</title>

        <itemizedlist>
          
          <listitem>        <para>
              Create directory /etc/fw/ on the firewall, make it
              belong to root, make it writable.
            </para>
          </listitem>
          
          <listitem>        <para>
              
              Set up ssh access to the firewall. Make sure you
              can log in as root using ssh from your
              management workstation:



              <programlisting>
$ ssh -l root &lt;firewall_name&gt;
              </programlisting>

              You may use either password or public key
              authentication; the installer will work either
              way.
            </para>
          </listitem>
  

          

          <listitem>        <para>
              
              In the <guilabel>installer</guilabel> tab of the <guilabel>firewall
                settings</guilabel> dialog of the firewall object put
              "root" as the user name you use to log in to the
              firewall.
            </para>
          </listitem>
          
          

          <listitem>        <para>
              
              Make sure entry field <guilabel>directory on the firewall
                where script should be installed</guilabel> is set
              to <emphasis>/etc/fw</emphasis>
            </para>
          </listitem>
          
          

          <listitem>        <para>
              Leave <guilabel>Policy install script</guilabel> and <guilabel>Command line options</guilabel> fields are blank
            </para>
          </listitem>
          
        </itemizedlist>

<!-- ***************************************************** -->

	</sect1>

	<sect1 id="installer_in_mixed_environment">
        <title>Configuring installer if you regularly switch between Unix and Windows workstations using the same .fwb file and want to manage the firewall from both</title>

  

          <para>
  
                First of all, the .fwb file is portable and can be
                copied back and forth between Linux/BSD and windows
                machines. Even comments and object names entered in a 
                local language should be preserved since the GUI
                uses UTF-8 internally.
              
          </para>
  

          <para>
  
                Built-in installer relies on path settings for ssh
                and SCP in <guimenuitem>Edit/Preferences/SSH</guimenuitem>.  Since preferences
                are stored outside of the .fwb file, the installer
                should work just fine when .fwb file is copied from
                Unix to Windows and back. Just configure the path to ssh
                program in preferences on each system using default
                settings "ssh" on Linux and path to plink.exe on Windows
                and give it a try.
              
          </para>
  <!-- **************************************************** -->
    </sect1>

    <sect1 id="backup_ssh_access_rule">
        <title>Always permit SSH access from the management
        workstation to the firewall</title>

  

          <para>
            One of the typical errors that even experienced
            administrators make sometimes is to deploy a firewall that
            blocks ssh access to the firewall from the management
            workstation. You need your workstation to be able to
            communicate with the firewall in order to be able to make
            changes to the policy, so you always need to add a rule to
            permit ssh from the management workstation.  Firewall
            Builder can simplify this and generate this rule
            automatically if you put an IP address of your workstation
            in the entry field on the first page of firewall settings
            dialog. Here is the screenshot that illustrates this
            setting for an iptables firewall. The management
            workstation has an IP address 192.168.1.100
          </para>
  

          <para>
                

        <figure float="1"><title/><graphic scale="50" fileref="backup_access.png"/></figure>
          </para>
  <!-- *************************************************** -->

      </sect1>

      <sect1 id="using_putty">
        <title>Using putty sessions on Windows</title>

        <para>
          putty allows you to store a destination host name or
          address, user name and bunch of other parameters in a
          session so that they all can be called up at once. If you
          wish to use sessions, do the following:
              
          </para>

        <itemizedlist>

          <listitem>        <para>
              
              Configure putty as usual, create and test a session
              for the firewall, test it using putty outside of
              Firewall Builder. When you use a session, the 
              firewall host name and user name are stored in the
              session file. Firewall Builder allows you to enter the 
              session name in the entry field in the firewall
              settings dialog where you would normally enter an 
              alternative address of the firewall. A comment next
              to the entry field reminds you about this.  Just
              type the session name in that field, leave the user name
              field blank and save the settings.
            </para>
          </listitem>
          
          

          <listitem>        <para>
              
              Once you start the installer, do not enter your user
              name in the "User name" field on the first page of
              installer wizard. You do, however, need to enter the
              login and enable passwords. Configure the rest of
              installer options as usual. They do not change
              when you use putty sessions.
            </para>
          </listitem>
          
        </itemizedlist>

      </sect1>

      <sect1 id="install_using_alternative_ssh_port">
        <title>How to configure the installer to use an alternate ssh
              port number</title>

          <para>
            If the ssh daemon on your firewall is listening on an
            alternate port, then you need to configure the built-in
            installer so that it will run <emphasis>SCP</emphasis>
            and <emphasis>ssh</emphasis> clients with command line
            parameters that would make them connect to this port. This
            is done in the <guilabel>installer</guilabel> tab of the
            firewall object
                <guilabel>advanced</guilabel> settings dialog as shown on the following
                screenshot (here we set the port to "2222"):
          </para>
  

          <para>
  
                

        <figure float="1"><title/><graphic scale="50" fileref="different_ssh_port.png"/></figure>
          </para>
  

        <note> <para> On Unix, the command line option that specifies
            the port number is different for <emphasis>ssh</emphasis>
            and <emphasis>SCP</emphasis>. It is
            lowercase <emphasis>-p</emphasis>
            for <emphasis>ssh</emphasis> and
            uppercase <emphasis>-P</emphasis>
            for <emphasis>SCP</emphasis>.  If you use
            the <emphasis>putty</emphasis>
            tool <emphasis>plink.exe</emphasis>
            and <emphasis>pscp.exe</emphasis> on Windows, the option
            to specify an alternate port number
            is <emphasis>-P</emphasis> (capital "P") for both.
                      </para></note>
  

          <para>
  
            You can use the same input fields in this dialog to add
            any other command line parameters
            for <emphasis>ssh</emphasis>
            and <emphasis>SCP</emphasis>. For example, this is where
            you can configure parameters to make it use an alternate
            identity file (private keys). This information is saved
            with a firewall object rather than globally because you
            may need to use different parameters for different
            firewall machines, such as different key files or ports.
              
          </para>
  
      </sect1>

      <sect1 id="install_using_ssh_keys">
        <title>How to configure the installer to use ssh private keys
              from a special file</title>

          <para>
  
            You can use the same entry fields in this dialog to
            provide other additional command line parameters for
            <emphasis>ssh</emphasis> and <emphasis>SCP</emphasis>, for
            example to use keys from a different identity file. Here
            is how it looks:
              
          </para>
  

          <para>
        <figure float="1"><title/><graphic scale="50" fileref="different_ssh_keys.png"/></figure>
          </para>
  

          <para>
  
            Here we configure <emphasis>ssh</emphasis>
            and <emphasis>SCP</emphasis> to use an alternate port and
            an alternate identity
            file <filename>~/.ssh/fwadmin_identity</filename>. The
            command line parameter for the port is different
            for <emphasis>ssh</emphasis> and <emphasis>SCP</emphasis>,
            but the parameter for the identity file is the same
            (<emphasis>-i</emphasis>) for both utilities.
              
          </para>
  

          <para>
  
            On Windows, the simplest way (or maybe the only way) to
            use alternative keys is to use putty sessions.
              
          </para>
  
    </sect1>

    <sect1 id="troubleshooting_ssh_access_to_fw">
        <title>Troubleshooting ssh access to the firewall</title>

          <para>
  
            The built-in policy installer will not work if ssh access
            to the firewall is not working. Test it using this command
            on Linux (assuming you user "fwadmin" to manage the
            firewall):
              
          </para>
  

          <programlisting>
ssh -l fwadmin firewall
          </programlisting>

          <para>
  
            If you use the root account to manage the firewall, the
            command becomes
              
          </para>
  

          <programlisting>
ssh -l root firewall
          </programlisting>

          <para>
  
            On Windows use <emphasis>putty.exe</emphasis>
            or <emphasis>plink.exe</emphasis> to do this:
              
          </para>
  

          <programlisting>
C:\Users\vadim&gt;c:\PuTTY\plink.exe -l fwadmin firewall
          </programlisting>

          <programlisting>
C:\Users\vadim&gt;c:\PuTTY\plink.exe -l root firewall
          </programlisting>

          <para>
    
            If you cannot log in using ssh at this point, verify that
            the ssh daemon is working on the firewall, that the
            existing firewall policy does not block ssh access and
            that ssh daemon configuration
            in <filename>/etc/ssh/sshd_config</filename> permits login
            for root (if you plan to use the root account to manage
            the policy).
    
          </para>
  

          <para>
  
            You may get the following error in the installer output
            (the same error appears if you try to test
            using <emphasis>SCP</emphasis>
            or <emphasis>pscp.exe</emphasis> from the command line):
              
          </para>
  

          <programlisting>
SCP: warning: Executing SCP1 compatibility. 
SCP: FATAL: Executing ssh1 in compatibility mode failed (Check that SCP1 is in your PATH). 
Lost connection 
SSH session terminated, exit status: 1
          </programlisting>

          <para>
  
            This error may happen when you run fwbuilder on any
            platform; it is not specific to putty/pscp.
              
          </para>
  

          <para>
  
            This error means <emphasis>SCP</emphasis>
            or <emphasis>pscp.exe</emphasis> was able to connect to
            the firewall but encountered ssh protocol version
            mismatch. ssh tried to switch back to ssh1 compatibility
            mode, but failed. Here is an explanation of the problem:

            <ulink url="http://www.snailbook.com/faq/SCP-ossh-to-ssh2.auto.html">http://www.snailbook.com/faq/SCP-ossh-to-ssh2.auto.html</ulink>. This
            really has nothing to do with fwbuilder or even
            SCP/putty/pscp on the client side. This happens if you
            have two versions of ssh package installed on the
            firewall. ssh daemon accepts connection from pscp with ssh
            protocol v2, starts SCP utility (still on the firewall)
            but the SCP utility it gets is from the other package and
            is probably an older version that does not support ssh2
            protocol. To resolve this, try switching to sftp. Here is
            how to test this from the command line. First, reproduce
            the error:
              
          </para>
  

          <programlisting>
C:\Users\vadim&gt;c:\PuTTY\pscp.exe test.txt root@firewall:
          </programlisting>

          <para>
  
            If this command works, then it should work from inside
            fwbuilder too. However if you get an error
            saying <emphasis>SCP: FATAL: Executing ssh1 in
            compatibility mode failed </emphasis>, try to use sftp.
              
          </para>
  

          <note>        <para>
              For this to work, sftp should be enabled on the server
              side. There are many resources on the web that explain
              how to do this, for
              example 

              <ulink url="http://www.linux.com/feature/62254">this
                article</ulink>.  See also the man page for <emphasis>sshd_config</emphasis>
              and search for "Subsystem" in it.
          </para></note>
  

          <programlisting>
C:\Users\vadim&gt;c:\PuTTY\pscp.exe -sftp test.txt root@firewall:
          </programlisting>

          <note>        <para>
              Note that there is only one '-' in front of "sftp"
              here.
          </para></note>
  

          <para>
  
            If this works, then you need to add "-sftp" to the list of
            additional command line parameters for SCP in the
            "Installer" tab of the firewall object dialog as explained
            above.
              
          </para>
  

          <para>
  
            Another common source of problems
            with <emphasis>SCP</emphasis>
            and <emphasis>pscp.exe</emphasis> is described in this

            <ulink url="http://www.openssh.org/faq.html#2.9">SSH
              FAQ</ulink>.  When you use SCP to transfer a file, it
              actually launches a login shell on the server side. So
              if your shell initialization script
              (<emphasis>.profile</emphasis>, <emphasis>.bashrc</emphasis>, <emphasis>.cshrc</emphasis>,
              etc) produces any kind of output, SCP gets confused and
              fails.
              
          </para>
  <!-- **************************************************** -->

      </sect1>

      <sect1 id="running_built_in_installer">
        <title>Running built-in installer to copy generated
                firewall policy to the firewall machine and activate
                it there</title>

          <para>
  
            Now that all preparations are complete, we can move on and
            actually try to install a newly generated firewall
            policy. Select the firewall object in the object tree in
            Firewall Builder, right-click and use menu
            item <guimenuitem>Install</guimenuitem>.
              
          </para>
  

          <figure float="1"><title/><graphic scale="50" fileref="installer_list_page.png"/></figure>

          <para>
  
            On this page of the wizard the program shows the list of
            all firewall objects with checkboxes that let you choose
            which ones should be recompiled and installed. Time stamps
            in the three columns show the time when each firewall
            object was modified, compiled and installed the last
            time. You can turn checkboxes on and off to make the
            program recompile and then install any number of firewall
            objects. It will first run the compiler for all of those
            marked for compile, then it will run the installer for all
            those marked for installation.  Installer will ask for the
            user name and password, as well as other parameters,
            before running the install process for each of the
            firewalls.  We will return to this page of the wizard
            later when we discuss batch install. After you
            click <guibutton>Next</guibutton> on this page, the
            program re-compiles the policy and opens the installer
            dialog for the first firewall marked for installation.
              
          </para>
  

          <para>
        <figure float="1"><title/><graphic scale="50" fileref="installer_iptables.png"/></figure>
          </para>
  

          <para>
  
            This screenshot shows how the installer options dialog
            looks for iptables, pf, ipfilter and ipfw firewalls. See
            below for the demonstration of how it looks while
            installing on Cisco router or ASA (PIX) device.
              
          </para>
  

          <para>
  
            Here the program already entered the user
            name <emphasis>fwadmin</emphasis> in the "User Name"
            field, but you can change it for one installation session
            if you wish. Next you need to enter the password for this
            user. <emphasis>This is the password of user fwadmin on
            the firewall machine</emphasis>. The address that will be
            used to communicate with the firewall is also entered by
            the program automatically; it is taken from the firewall
            settings. You can change it for one installation session
            as well.
              
          </para>
  

          <para>
  
            Other installer parameters do the following:
              
          </para>
  

          <para>
  
                
          </para>
  

          <itemizedlist>

            <listitem>        <para>
                <emphasis>Quiet install</emphasis>: as the name implies,
                this checkbox suppresses all progress output of
                the installer.
              </para>
            </listitem>
            

            

            <listitem>        <para>
                <emphasis>Verbose</emphasis>: this checkbox has the opposite
                action: it makes the installer print a lot of
                debugging information, including ssh client debug
                output.
              </para>
            </listitem>
            

            

            <listitem>        <para>
                <emphasis>Store a copy of fwb file on the
                  firewall</emphasis>: if this checkbox is on, the
                installer will copy not only generated firewall
                configuration files to the directory on the
                firewall machine that is configured in the
                "installer" tab of the firewall object dialog,
                but also the original .fwb data file as well. <emphasis>Use
                  of this option is discouraged if you manage many
                  firewalls from the same .fwb file because
                  distributing the file that contains the security policy
                  of multiple firewalls to all of them is a bad
                  idea</emphasis>.
              </para>
            </listitem>
            

            

            <listitem>        <para>
                <emphasis>Test run</emphasis>: if this checkbox is on,
                policy installer will copy firewall
                configuration files to a temporary directory on
                the firewall and will run them from there. The
                intent is to test generated configuration
                without making it permanent. If firewall machine
                reboots, it will activate the previous firewall
                policy. Installer uses subdirectory <emphasis>"tmp"</emphasis>
                inside the installation directory on the firewall
                machine that is configured in the "installer"
                tab of the firewall object dialog. If the 
                installation directory configured there
                is <emphasis>/etc/fw</emphasis> (as in the screenshot earlier
                in this HOWTO), then installer will put files in
                the directory <emphasis>/etc/fw/tmp</emphasis> when the test
                install option is in effect. <emphasis>You need to
                  create this directory on the firewall before
                  using this installation mode</emphasis>.
              </para>
            </listitem>
            
            
            

            <listitem>        <para>
                
                <emphasis>Schedule reboot in... </emphasis>: If this option is
                on, installer schedules firewall reboot after
                given time in minutes. This can be used as a
                measure of last resort to protect against loss
                of communication with the firewall, which may
                happen if there is an error in the new firewall
                policy which makes it block ssh access from the
                management machine. Installer uses
                command <emphasis>shutdown -r +10min</emphasis> to schedule
                reboot in 10 min. If installation has been
                successful and everything works right, you need
                to repeat installation with options "test
                install" and "Schedule reboot" turned off to
                cancel reboot and install new policy
                permanently.
              </para>
            </listitem>
            

          </itemizedlist>

          <para>
  
            After all parameters are set and the password entered,
            click <guibutton>OK</guibutton> to start installation.
              
          </para>
  

          <para>
  
            If this is the first time your management machine is
            logging in to the firewall via ssh, it will find out that
            ssh host key of the firewall is unknown to it and will
            present you with a dialog:
              
          </para>
  

          <para>
  
                

            <figure float="1"><title/><graphic scale="50" fileref="new_ssh_host_key_dlg.png"/></figure>
          </para>
  

          <para>
  
            Here is says that it does not know host key of the
            firewall "crash". This is nothing more than a copy of the
            warning message presented by the ssh client. You should
            verify the host key manually and if it matches,
            click <guibutton>Yes</guibutton>. If you
            click <guibutton>No</guibutton> in the dialog, the
            installation process will be interrupted.
              
          </para>
  

        <note> <para> Installer only recognizes the ssh client warning
            message about unknown public host keys. If you rebuild
            your firewall machine, which means its host key changes,
            ssh will print a different warning message that fwbuilder
            installer does not recognise. In this case, you will see
            this message in the installer progress window, but
            installation process will get stuck. You need to use ssh
            client (<emphasis>ssh</emphasis> on Unix
            or <emphasis>putty.exe</emphasis> on Windows) to update
            the host key before you can use fwbuilder policy installer
            with this firewall again.
        </para></note>
  

        <para>
  
          After this, installer copies files to the firewall and runs
          policy script there. You can monitor its progress in the
          dialog as shown on the screenshot:
              
        </para>
  

        <para>
  
                

        <figure float="1"><title/><graphic scale="50" fileref="install_dialog_overview.png"/></figure>
        </para>
  

        <para>
          
          This is an example of a successful installation
          session. Installer records the status in the left side panel
          of the dialog. If you use the installer to update several
          firewall machines in one session, their names and
          corresponding status of the installation session for each
          will be shown in the panel on the left. You can save the
          installer log to a file using <guibutton>Save log to
          file</guibutton> button. This can be useful for
          documentation or troubleshooting.
              
          </para>
  

          <para>
  
            If you marked multiple firewall objects for installation
            on the first page of the installer wizard (the one with
            the list of firewalls), then the program will repeat the
            installation process for the next object from the list
            when you
            click <guibutton>Next</guibutton>. The <guibutton>Next</guibutton>
            button will be enabled if there are more firewalls to
            install to.
              
          </para>
  <!-- **************************************************** -->

      </sect1>

      <sect1 id="running_installer_to_cisco">
        <title>Running built-in installer to copy generated
                firewall policy to Cisco router or ASA (PIX)
        </title>

        <para>
  
          From the user's point of view the installer works the same
          when you manage Cisco router or ASA firewall, with only few
          minor differences. First of all, the first screen of the
          installer, where you enter the password, offers another
          input field for the <emphasis>enable</emphasis> password as
          well.
              
        </para>
  

        <note> <para> You should be able to use an IPv6 address to
            communicate with the router.
        </para></note>
  

        <para>
  
        <figure float="1"><title/><graphic scale="50" fileref="install_dialog_cisco.png"/></figure>
        </para>
  

        <para>
  
          Most of the options and parameters in this dialog are the
          same as those for Linux firewalls (see above). The following
          parameters work differently for Cisco devices:
              
        </para>
  

          <para>
  
                
          </para>
  

          <itemizedlist>

            <listitem>        <para>
                <emphasis>Test run</emphasis>: if this checkbox is on, policy
                installer will copy new access lists configuration
                to the router or ASA appliance but will not
                issue <emphasis>write mem</emphasis> command in the end.
              </para>
            </listitem>
            
            
            

            <listitem>        <para>
                
                <emphasis>Schedule reboot in... </emphasis>: If this option is
                on, installer issues command <emphasis>reload in NNN</emphasis>
                after the new configuration has been loaded. This
                schedules reboot in NNN minutes. In combination
                with "test run" option, this can serve as a
                roll-back mechanism in case of complete loss of
                contact with the router or firewall because of an
                error in the policy. Since "test run" does not
                perform <emphasis>"write mem"</emphasis> in the end, the
                original access list stays in the startup
                configuration of the router and will be loaded
                after reboot.
              </para>
            </listitem>
            

            

            <listitem>        <para>
                
                <emphasis>Cancel reboot if policy activation was
                  successful</emphasis>: If this option is on, installer
                issues command <emphasis>reload cancel</emphasis> in the end of
                the policy activation process to cancel previously
                scheduled reboot.
              </para>
            </listitem>
            

          </itemizedlist>

          <para>
  
                Here is a screenshot of installation session to a
                Cisco router. Note the output at the very top of the
                log that shows how the installer detected a previously
                unknown RSA host key and accepted it after the user
                clicked "Yes" in the pop-up dialog (not shown on the
                screenshot). It then logged into the router. You can
                see the <emphasis>banner motd</emphasis> output from the
                router. After this, the installer switched
                to <emphasis>enable</emphasis> mode, set terminal width and turned
                off terminal pagination using the <emphasis>terminal length 0</emphasis>
                command and finally switched to the <emphasis>configuration
                mode</emphasis>. It then started entering the generated
                configuration line by line.
              
          </para>
  

          <para>

        <figure float="1"><title/><graphic scale="50" fileref="install_cisco_progress.png"/></figure>
          </para>
  

          <para>
  
                The final part of the installation session looks like
                this:
              
          </para>
  

          <para>
  
                

        <figure float="1"><title/><graphic scale="50" fileref="install_cisco_progress_end.png"/></figure>
          </para>
  

          <para>
  
                This was a successful installation session, with no
                errors. Installer finished entering configuration
                lines and issued the <emphasis>exit</emphasis> command to exit
                configuration mode, then the <emphasis>wr mem</emphasis> command to save
                configuration to memory and finally <emphasis>exit</emphasis> again
                to log out.
              
          </para>
  <!-- **************************************************** -->

    </sect1>

    <sect1 id="batch_install">
        <title>Batch install</title>

          <para>
  
                Firewall Builder can help you manage the configuration of
                multiple firewalls if they all use the same user name
                and password for authentication. To update the policy on
                multiple firewalls in one operation, use the batch mode of
                the built-in installer. When you start the installer by
                clicking "Install" button in the toolbar or using main
                menu <emphasis>"Rules/Install"</emphasis>, the program opens the
                first page of the built-in installer where it lists
                all firewall objects. The checkbox <emphasis>"Perform batch
                install"</emphasis> turns batch mode install on.
              
          </para>
  

        <figure float="1"><title/><graphic scale="50" fileref="installer_batch_list_page.png"/></figure>

          <para>
  
                When you click "Next", the program opens simplified
                version of the installation parameters dialog:
              
          </para>
  

        <figure float="1"><title/><graphic scale="50" fileref="installer_batch_1.png"/></figure>

          <para>
  
                This is the same dialog as when we tried to install to a
                single firewall, except the batch mode dialog does not
                offer an input fields for the alternative address and
                some other parameters. You cannot enter alternative
                addresses in the install dialog while running it in
                batch mode because it will talk to multiple firewalls
                and one alternative address is not going to be useful.
                Other than that, this dialog always shows an entry field
                for the "enable" password which you need to fill only
                if some of the firewalls in the batch are Cisco
                routers or ASA (PIX) devices, otherwise leave it
                blank. When you run installer in the batch mode, it
                asks to enter parameters only once before the
                installation process begins. Afters that, it uses this
                data to connect to each firewall that was marked for
                installation in the first page of the installer wizard
                in turn, log in, upload new configuration and activate
                it there.
              
          </para>
    </sect1>
		
    <sect1 id="load_policy_on_reboot">
      <title>How to make your firewall load your firewall policy on reboot</title>
			
      <sect2>
        <title>How to make firewall load firewall policy after reboot  -- iptables</title>

  

        <para>
  
                  It depends on what Linux distribution your firewall
                  is based on. Firewall Builder generates the policy
                  in a form of a shell script for the firewall based
                  on Linux and iptables. To activate policy at a boot
                  time you need to execute this script at a boot time
                  one way or another.
                
  </para>
  

        <para>
  
                  The universal method is to put generated script in
                  /etc or /etc/firewall directory and add a line at
                  the bottom of script
                  <emphasis>/etc/rc.d/rc.local</emphasis> (Mandrake and
                  RedHat), <emphasis>/etc/rc.local</emphasis> (Debian, Ubuntu and derivatives)
		  or <emphasis>/etc/init.d/boot.local</emphasis>
                  (SuSE) like this:
        </para>
  

        <programlisting>
/etc/firewall/firewall.fw
        </programlisting>

        <para>
  
                  This way, firewall script runs when machine executes
                  boot-time scripts. The name of the file is the same
                  as the name of the firewall object in Firewall
                  Builder GUI, with extension ".fw".  So, if
                  firewall object name is <emphasis>guardian</emphasis>, then
                  fwbuilder puts generated policy in the file
                  <emphasis>guardian.fw</emphasis>.
                
  </para>
  

        <para>
  
                  Since the firewall policy generated by fwbuilder is
                  installed by running this script at a boot time, any
                  other firewall startup script that might be supplied
                  by the vendor of your Linux distribution should be
                  disabled. On Mandrake and RedHat this can be done
                  using command


        </para>
  

        <programlisting>
chkconfig --level 2345 iptables off
        </programlisting>

        <para>
   

                  On SuSE use command


        </para>
  

        <programlisting>
chkconfig -e
        </programlisting>

        <para>
   

                  and change state of services as follows:


        </para>
  

        <programlisting>
SuSEfirewall2_final       off
SuSEfirewall2_init        off
SuSEfirewall2_setup       off
        </programlisting>

        <para>
  

                  (There must be better way to turn firewall off on SuSE, but we do not know it.
                
  </para>
  

        <para>
  
                  Another method to get firewall policy automatically
                  installed at boot time uses scripts supplied by
                  Mandrake or RedHat. You still need to copy generated
                  script to the firewall machine and execute it there
                  (this can be done using installer scripts
                  fwb_install or fwbinstaller). Once the policy has
                  been tested and works as expected, you just execute
                  <command>service iptables save</command> to
                  save the policy. Now the policy will be activated at
                  a boot time if service <emphasis>iptables</emphasis> is
                  active. You can make it active on Mandrake and
                  RedHat using command


        </para>
  

        <programlisting>
chkconfig --level 2345 iptables on
        </programlisting>

        <note><para>
  
                    The script generated by Firewall Builder
                    does more than just set iptables rules, it also
                    adds virtual IP addresses to the interfaces of the
                    firewall and configures kernel parameters. It can
                    get real IP addresses of interfaces with dynamic
                    addresses and checks if interfaces are present and
                    "up" at the time when firewall policy is
                    applied. Standard
                    scripts <emphasis>iptables-save</emphasis>
                    and <emphasis>iptables-restore</emphasis> only manage
                    iptables rules; other tasks performed by the
                    script generated by Firewall Builder will not be
                    done upon reboot if you use this method.

                </para></note>

<sect3>
        <title>How to restart firewall script when interface address changes</title>

        <para>
  
                  Firewall policy script generated by fwbuilder for
                  iptables firewall needs to be restarted every time
                  IP address of a dynamic interface changes.  This
                  section explains why is it so and how this can be
                  done.
                
  </para>
  

        <para>
  
                  iptables firewall policy script generated by the
                  Firewall Builder determines IP addresses of all
                  dynamic interfaces and assigns them to variables
                  which it then uses in the policy rules. This helps
                  to build rules that require knowing address of the
                  interface correctly, such as anti-spoofing rules.
                  On the other hand, if interface's address changes
                  after the policy has been loaded and activated, the
                  firewall script needs to be restarted.
                
  </para>
  

        <para>
  
                  The firewall can be restarted from one of the
                  scripts that get called by PPP or DHCP daemons
                  whenever connection is established or new address
                  lease is obtained. For example, DHCP daemon
                  distributed with all major Linux distributions calls
                  script <emphasis>/etc/dhclient-exit-hooks</emphasis> when new DHCP
                  lease is obtained. To restart the firewall, just
                  create file <emphasis>/etc/dhclient-exit-hooks</emphasis> and call
                  your firewall script from it:


        </para>
  

        <programlisting>
#!/bin/sh
/etc/firewall/firewall.fw
        </programlisting>
        
        <para>
  
                  See man page dhclient-script(8) for a detailed explanation.
                
  </para>
  

        <note><para>

                    On SUSE you should use YAST to
                    configure this. Start Yast control center, go to
                    "System", then "Editor for
                    /etc/sysconfig files" in the right panel, and
                    when the editor appears, choose
                    "Network/DHCP/DHCP client" in the tree
                    and edit "DHCLIENT_SCRIPT_EXE".

                </para></note>
  

        <para>
  
                  PPP daemon calls script <emphasis>/etc/ppp/ip-up</emphasis> when
                  connection is established and IP address
                  obtained. This script can be used to restart the
                  firewall as well. Just like
                  with <emphasis>/etc/dhclient-exit-hooks</emphasis>, just add a
                  call to <emphasis>/etc/firewall/firewall.fw</emphasis> at the
                  bottom of <emphasis>/etc/ppp/ip-up</emphasis>
                
  </para>
  

        <note><para>
  
                  <emphasis>"/etc/firewall/firewall.fw"</emphasis> should be
                  replaced everywhere with the real name of the firewall
                  script. Firewall Builder stores firewall commands in
                  the file with the name the same as the name of the
                  firewall object, with an extension ".fw".
                
  </para></note>
  

        <note><para>
  
                  Currently Firewall Builder requires
                  restart of the firewall script only on iptables
                  firewalls. Firewalls based on OpenBSD pf do not
                  require this because pf can dynamically load IP
                  address of the interface when it changes. As of the
                  moment of this writing, on ipfilter and ipfw
                  firewalls address of the dynamic interface has to be
                  entered in the GUI, or it cannot be used in the
                  rule. This limitation will be removed in the future
                  versions of the product.
                
  </para></note>
  
				</sect3>
      </sect2>

			<sect2>
        <title>How to make firewall load firewall policy after reboot  --  pf</title>

        <para>
  
                  For OpenBSD pf fwbuilder puts firewall policy in the
                  file <emphasis>firewall.conf</emphasis> and activation script
                  in <emphasis>firewall.fw</emphasis>
                
  </para>
  

        <para>
  
                  To activate the policy copy both files to the
                  directory <emphasis>/etc</emphasis> on the firewall
                  machine using <emphasis>fwbinstaller</emphasis>.
                  <emphasis>Fwbinstaller</emphasis> executes the
                  activation script to install the policy
                  immediately. Activation script not only loads PF
                  rules, it also configured aliased IP addresses on
                  the firewall's interfaces which is important if you
                  use multiple addresses for NAT and want fwbuilder to
                  configure them for you. It also sets kernel
                  parameters defined in the "Network" tab of the
                  firewall dialog (such as IP forwarding etc.) In
                  order to make the firewall activate it at a boot
                  time, call firewall script from the
                  file <emphasis>/etc/rc.local</emphasis> as follows:


        </para>
  

        <programlisting>
/etc/firewall.fw
        </programlisting>

        <para>
  
                  If you do not want to use activation script provided
                  by fwbuilder, you can use standard mechanisms
                  supplied by OpenBSD. Edit
                  file <emphasis>/etc/rc.conf</emphasis> as follows:


        </para>
  

        <programlisting>
pf=YES                          # Packet filter / NAT
pf_rules=/etc/firewall.conf     # Packet filter rules file
pflogd_flags=                   # add more flags, i.e. "-s 256"
        </programlisting>

      </sect2>

<sect2>
        <title>How to make firewall load firewall policy after reboot  --  ipfw</title>

  

        <para>
  
                  For ipfw fwbuilder generates policy in the form of a shell script (just like for iptables).
                
  </para>
  

        <para>
  
                  To install the policy, copy generated script
                  to <emphasis>/usr/local/etc/</emphasis> directory
                  using <emphasis>ssh</emphasis> and then execute it.  To
                  make the firewall run this script at a boot time
                  make the following modifications to
                  the <emphasis>/etc/rc.conf</emphasis> file:


        </para>
  

        <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
        </programlisting>

      </sect2>

<sect2>
        <title>How to make firewall load firewall policy after reboot  --  ipfilter</title>

  

        <para>
  
                  On FreeBSD fwbuilder generates firewall policy in
                  three files. Assuming firewall object's name
                  is <emphasis>firewall</emphasis>, these files are
                  <emphasis>firewall-ipf.conf, firewall-nat.conf,
                  firewall.fw</emphasis>. First two files contain
                  configuration for ipfilter, while the last one is a
                  shell script that activates it. This script can also
                  configure aliased IP addresses on firewall's
                  interfaces which is important if you use multiple
                  addresses for NAT and want fwbuilder to configure
                  them for you.
                
  </para>
  

        <para>
  
                  The simplest way to activate generated policy and to
                  make sure it is activated at boot time is to put all
                  three files in
                  <emphasis>/usr/local/etc/</emphasis> directory modify
                  script <emphasis>/etc/rc.conf</emphasis> by adding the following
                  lines:


        </para>
  

        <programlisting>
firewall_enable="YES"                        
# Set to YES to enable firewall functionality
firewall_script="/usr/local/etc/firewall.fw" 
# Which script to run to set up the firewall
        </programlisting>

        <para>
  
                  You can use script <emphasis>fwbinstaller</emphasis> to copy all
                  three generated files from the firewall management
                  workstation to the firewall machine.
                
        </para>
  

        <para>
  
                  See also excellent mini-HOWTO: <ulink url="http://nil59.pisem.net/fwbuilder-relative/index.html"><citetitle>Deploy fwbuilder-generated policy to remote FreeBSD-and-ipfilter-based firewall</citetitle></ulink> by Daniel Podolsky.
                
        </para>
  

        <para>
  
                  Another option is to copy generated
                  files <emphasis>firewall-ipf.conf and
                  firewall-nat.conf</emphasis> to the
                  directory <emphasis>/etc/</emphasis> on the firewall
                  machine using names <emphasis>ipf.rules</emphasis>
                  and <emphasis>ipnat.rules</emphasis> and then use
                  standard way of loading ipfilter policy.  In order
                  to activate it, edit
                  file <emphasis>/etc/rc.conf</emphasis> by adding the
                  following lines to it:


        </para>
  
        
        <programlisting>
ipfilter_enable="YES"           # Set to YES to enable ipfilter functionality
ipfilter_program="/sbin/ipf"    # where the ipfilter program lives
ipfilter_rules="/etc/ipf.rules" # rules definition file for ipfilter, see
# /usr/src/contrib/ipfilter/rules for examples
ipnat_enable="YES"              # Set to YES to enable ipnat functionality
ipnat_program="/sbin/ipnat"     # where the ipnat program lives
ipnat_rules="/etc/ipnat.rules"  # rules definition file for ipnat
        </programlisting>

</sect2>
					
    </sect1>
  </chapter>
  
