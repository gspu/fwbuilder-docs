    <sect2 id="anti-spoofing-rules-with-dynamic-addresses">
      <title>Anti-spoofing rules for the firewall with dynamic address</title>

      <para>
        Anti-spoofing rule must match all addresses of the firewall to
        leave no holes. However it is difficult to do if one interface
        of the firewall gets its ip address dynamically via DHCP or
        PPP protocol. This address is unknown at the compile time and
        proper configuration can not be generated by just including
        it. Some firewall platforms have syntax in their configuration
        language that provides a way to match an address of an
        interface at run time, but other platforms do not have
        anything like this. Lets see how fwbuilder works around this problem.
      </para>

      <para>
        In this test I use variation of the same firewall object where
         external interface <emphasis>"eth0"</emphasis> is configured
         as "dynamic". The anti-spoofing rule looks exactly like the
         rule in the previous example and matches the same external
         interface "eth0", direction "inbound":
      </para>

      <figure id="anti-spoof-rule-2">
        <title>Basic anti-spoofing rule</title>
        <graphic scale="50" fileref="cookbook/policy_rules/images/policy-antispoof-rule-2.png" />
      </figure>

      <para>
        Generated iptables script looks like this:
      </para>

      <programlisting>
getaddr eth0  i_eth0


# Rule 0 (eth0)
# 
# anti spoofing rule
# 
$IPTABLES -N In_RULE_0
test -n "$i_eth0" &amp;&amp; $IPTABLES -A INPUT  -i eth0   -s $i_eth0   -j In_RULE_0 
$IPTABLES -A INPUT  -i eth0   -s 192.168.1.1   -j In_RULE_0 
$IPTABLES -A INPUT  -i eth0   -s 192.168.1.0/24   -j In_RULE_0 
test -n "$i_eth0" &amp;&amp; $IPTABLES -A FORWARD  -i eth0   -s $i_eth0   -j In_RULE_0 
$IPTABLES -A FORWARD  -i eth0   -s 192.168.1.1   -j In_RULE_0 
$IPTABLES -A FORWARD  -i eth0   -s 192.168.1.0/24   -j In_RULE_0 
$IPTABLES -A In_RULE_0  -j LOG  --log-level info --log-prefix "RULE 0 -- DENY "
$IPTABLES -A In_RULE_0  -j DROP 
      </programlisting>

      <para>
        The script defines shell
        function <emphasis>"getaddr"</emphasis> at the beginning. This
        function uses <emphasis>"ip addr show"</emphasis> command to
        determine actual address of the interface at the time when
        script is running and assigns the address to the shell
        variable <emphasis>i_eth0</emphasis>. Iptables commands then
        use this variable to build rules matching address of this
        interface. Otherwise generated rules are the same as in the
        previous example.
      </para>

      <para>
        Here is what is generated for PF:
      </para>

      <programlisting>
table &lt;tbl.r0.d&gt; { en0 , 192.168.1.1 } 

# Rule  0 (en0)
# anti spoofing rule
# 
block in   log  quick on en0 inet  from &lt;tbl.r0.d&gt;  to any 
block in   log  quick on en0 inet  from 192.168.1.0/24  to any 
      </programlisting>

      <para>
        In PF, one can place interface name ("en0") in the table and
        PF will use its address at the execution time.
      </para>

      <para>
        Unfortunately there is no workaround for this problem for PIX.
      </para>

    </sect2>

