<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

  <sect2 id="heartbeat_vlan_cluster">
    <title>Linux cluster using heartbeat and VLAN interfaces</title>

    

    <para>
      In this recipe we are looking at the Linux cluster configuration
      using heartbeat and VLANs shown in
      <xref linkend="cookbook_linux_hb_cluster_vlan"/>. Interface <emphasis>eth1</emphasis>
      of both firewalls is configured to run two
      VLANs, <emphasis>101</emphasis> and <emphasis>102</emphasis>,
      connected to the protected subnet and DMZ
      respectively. Heartbeat runs on all three
      connections: <emphasis>eth0</emphasis>,
      <emphasis>eth1.101</emphasis> and <emphasis>eth1.102</emphasis>.
      This recipe demosntrates use of VLAN interfaces in fwbuilder.


      <figure id="cookbook_linux_hb_cluster_vlan">
        <title>Linux cluster using heartbeat and VLANs</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-heartbeat-cluster-vlan.png"/>
      </figure>
    </para>

    <note>
      <para>
        IPv6 addresses are not used in this recipe. Some interface
        objects in the screenshots have ipv6 addresses because firewall
        objects were "discovered" using snmp which finds ipv6
        addresses. You can disregard these addresses while working
        with examples in this chapter.
      </para>
    </note>

    <sect3>
      <title>Configuring member firewall objects</title>

      <para>
        As in the previous examples, we start with member firewall
        objcts. The difference between this and previous examples is
        that now we need to configure VLAN interfaces. Lets start with a
        firewall objects with interfaces <emphasis>eth0</emphasis>
        and <emphasis>eth1</emphasis>. In fact, these objects are copies
        of the <emphasis>linux-test-1</emphasis>
        and <emphasis>linux-test-2</emphasis> objects used in
        <xref linkend="heartbeat_cluster"/>. New objects have names
        <emphasis>linux-test-3</emphasis>
        and <emphasis>linux-test-4</emphasis>. I am going to add VLAN
        interfaces and rearrange IP address objects to match network diagram
        <xref linkend="cookbook_linux_hb_cluster_vlan"/>
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_1">
        <title>Member firewall objects without VLAN interfaces</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-1.png"/>
      </figure>

      <para>
        First, we need to add VLAN subinterface to eth1. To do this,
        select eth1 in the tree and click right mouse button to open
        context menu. Click "New interface" item to add interface
        object:
      </para>

      <table frame='none' tabstyle='two_columns_layout_table'>
        <title></title>
        <tgroup cols='2' align='left'  rowsep='1'>
          <colspec colnum="1" colname="col1" colwidth="1*"/>
          <colspec colnum="2" colname="col2" colwidth="1*"/>
	  <tbody valign='top'>
            <row>
              <entry>
                <para>
                  <figure id="cookbook_linux_hb_cluster_vlan_2">
                    <title>Using context menu to add subinterface</title>
                    <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-2.png"/>
                  </figure>
                </para>
              </entry>
              <entry>
                <para>
                  <figure id="cookbook_linux_hb_cluster_vlan_3">
                    <title>Subinterface has been created with default name</title>
                    <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-3.png"/>
                  </figure>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        New interface object is created with default name
        "Interface". Double click it to open it in the editor and rename
        it to <emphasis>eth1.101</emphasis>:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_3_1">
        <title>VLAN subinterface in the editor</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-3-1.png"/>
      </figure>


      <para>
        Click the "Advanced interface settings" button to verify its
        VLAN configuration:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_4">
        <title>VLAN configuration of the subinterface</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-4.png"/>
      </figure>

      <para>
        Note that interface type has been set to VLAN
        automatically. This is because Firewall Builder analyses the
        name of the subinterface and automatically chooses correct type
        in the "Advanced" settings dialog. If interface name matches
        standard vlan interface name for the chosen host OS, then it
        will automatically become VLAN subinterface and the program will
        extract VLAN ID from its name. For example, supported vlan
        interface names on Linux are "eth1.101", "eth1.0101", "vlan101",
        "vlan0101". On other OS naming conventions are often different.
      </para>

      <para>
        Create subinterface <emphasis>eth1.102</emphasis> using the same
        method.
      </para>

      <para>
        Now you can move IP address objects from the
        interface <emphasis>eth1</emphasis> to
        subinterface <emphasis>eth1.101</emphasis>. Use context menu
        items <emphasis>Cut</emphasis> and <emphasis>Paste</emphasis> to
        do this. While doing this, I also got rid of IPv6 addresses that
        are not used in this example. You should arrive at the following
        configuration:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_5">
        <title>IP addresses reassigned to the subinterface</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-5.png"/>
      </figure>

      <para>
        We also need to configure IP address for the second VLAN
        interface <emphasis>eth1.102</emphasis> using context menu item
        "New address".
      </para>

      <para>
        Finally, we have firewall
        object <emphasis>linux-test-3</emphasis> configured according to
        the network diagram
        <xref linkend="cookbook_linux_hb_cluster_vlan"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_7">
        <title>Adding IP addresses to VLAN subinterface</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-7.png"/>
      </figure>

      <para>
        This is not quite all yet
        though. Interface <emphasis>eth1</emphasis> is now a parent of
        two VLAN subinterfaces <emphasis>eth1.101</emphasis>
        and <emphasis>eth1.102</emphasis>.  In this
        configuration <emphasis>eth1</emphasis> does not have an IP
        address of its own. To reflect this, open it in the editor and
        check "Unnumbered" interface button as shown below:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_7_1">
        <title>Interface eth1 is unnumbered</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-7-1.png"/>
      </figure>


      <para>
        We need to configure the second firewall
        object <emphasis>linux-test-4</emphasis> as well. You can repeat
        the process you just used to add subinterfaces and addresses
        like it was done for <emphasis>linux-test-3</emphasis>, or
        instead of doing this from scratch, you can copy and paste interface objects
        <emphasis>eth1.101</emphasis> and <emphasis>eth1.102</emphasis>
        from <emphasis>linux-test-3</emphasis> to
        interface <emphasis>eth1</emphasis>
        of <emphasis>linux-test-4</emphasis> and then just edit
        addresses. Here is the final configuration of both member
        firewalls:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_8">
        <title>VLAN subinterface and addresses of both member firewalls</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-8.png"/>
      </figure>

    </sect3>

    <sect3>
      <title>Building cluster object</title>

      <para>
        Now that both member firewall objects are ready, we can create
        an object for the cluster. Use "New Object" menu, item
        "Cluster" to launch the wizard. On the first page of the
        wizard, choose <emphasis>linux-test-3</emphasis>
        and <emphasis>linux-test-4</emphasis> firewalls and enter the
        name for the cluster object:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_9">
        <title>Creating cluster object</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-9.png"/>
      </figure>

      <para>
        On the next page of the wizard you can build cluster
        interfaces. The program finds interfaces of the member
        firewalls with the same name and preconfigures cluster
        interface objects. On this page of the wizard you can add or
        delete cluster interface and establuish correspondence between
        them and interfaces of the member firewalls. Screenshot
        <xref linkend="cookbook_linux_hb_cluster_vlan_10"/> shows this page:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_10">
        <title>Interfaces of the cluster</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-10.png"/>
      </figure>

      <note>
        <para>
          You only need to create interfaces of the cluster object
          that correspond to the inetrfaces of member firewalls that
          actually pass traffic and run failover protocols. This means
          you
          need <emphasis>eth1.101</emphasis>, <emphasis>eth1.102</emphasis>
          cluster interfaces but do not
          need <emphasis>eth1</emphasis>.
        </para>
      </note>

      <para>
        Moving on, on the next page of the wizard we configure IP
        addresses of the cluster interfaces accroding to our network diagram
        <xref linkend="cookbook_linux_hb_cluster_vlan"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_11">
        <title>IP addresses of the cluster interfacess</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-11.png"/>
      </figure>

      <para>
        Next page of the wizard offers an opportunity to use policy
        and nat rules of one of the member firewalls for the
        cluster. However since our member firewalls have no rules, we
        do not need to use this feature and can just finish creating
        new cluster object. New cluster object is shown on
        <xref linkend="cookbook_linux_hb_cluster_vlan_12"/>:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_12">
        <title>Cluster object configuration</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-12.png"/>
      </figure>

    </sect3>

    <sect3>
      <title>Managing VLAN interfaces and their IP addresses</title>

      <para>
        Firewall Builder can generate shell script to configure VLAN
        interfaces for both member firewalls. The script is in fact a
        shell function inside the common firewall configuration script
        that it creates for each firewall. To activate this feature,
        open each member firewall object in the editor by double
        clicking it in the tree and click "Firewall Settings" button,
        then navigate to the "Script" tab of the dialog. Screenshot
        <xref linkend="cookbook_linux_hb_cluster_vlan_13"/> shows this 
        tab. Turn checkbox  "Configure VLAN interfaces" on:
      </para>

      <figure id="cookbook_linux_hb_cluster_vlan_13">
        <title>Turn VLAN configuration on</title>
        <graphic scale="50" fileref="cookbook/cluster/images/linux-hb-cluster-vlan-13.png"/>
      </figure>

      <para>
        If you compile the policy for the cluster (or a standalone
        firewall) whth "Configure VLAN interfaces" checkbox turned on,
        generated script gets the following fragment that is executed
        before iptables rules are loaded:

        <programlisting>
configure_interfaces() {
    :
    # Configure interfaces
    <emphasis role="redtext">update_vlans_of_interface "eth1 eth1.101 eth1.102"</emphasis>
    <emphasis role="redtext">clear_vlans_except_known eth1.101@eth1 eth1.102@eth1</emphasis>
    update_addresses_of_interface "lo 127.0.0.1/8" ""
    update_addresses_of_interface "eth0 10.3.14.108/24" "10.3.14.150/24"
    update_addresses_of_interface "eth1" ""
    update_addresses_of_interface "eth1.101 10.1.1.1/24" "10.1.1.254/24"
    update_addresses_of_interface "eth1.102 10.1.2.1/24" "10.1.2.254/24"
}
        </programlisting>

        Lines highlighted in red configure VLAN interfaces. The first
        command, a call to
        the <emphasis>update_vlans_of_interface</emphasis> shell
        function, checks if vlan interfaces eth1.101 and eth1.102
        already exist and adds them if they are not there. It
        uses <emphasis>vconfig</emphasis> utility to do this. If vlan
        interfaces with these names already exist, the function does
        nothing. This allows for incremental management of the vlan
        interfaces, that is, when the script runs again, it does not
        try to add interfaces that already exist. It does not remove
        and add them back, either.
      </para>

      <tip>
        <para>
          Several naming conventions exist for vlan interfaces
          on Linux and the script recognizes all of them.  You call
          vlan interface <emphasis>"eth1.101"</emphasis>,
          <emphasis>"eth1.0101"</emphasis>, <emphasis>"vlan101"</emphasis>
          or <emphasis>"vlan0101"</emphasis>.
        </para>
      </tip>

      <para>
        To test this feature, you can run generated script with
        command line parameter "test_interfaces". This makes the
        script analyse interfaces and print commands that it would
        normally execute to configure them, but it does not actually
        execute these commands but only prints them. To illustrate
        this, I start with machine linux-test-4 in the state where it
        has no VLAN interfaces and some IP addresses do not match
        configuration defined in fwbuilder. Running the script with
        "test_interfaces" command line parameter demonstrates what it
        is going to do to bring configuration of the machine in sync
        with setup configured in fwbuilder:
      </para>

      <programlisting>
root@linux-test-4:~# ip addr ls
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    link/ether 00:0c:29:fc:67:8c brd ff:ff:ff:ff:ff:ff
    inet 10.3.14.109/24 brd 10.3.14.255 scope global eth0
    inet6 fe80::20c:29ff:fefc:678c/64 scope link 
       valid_lft forever preferred_lft forever
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    link/ether 00:0c:29:fc:67:96 brd ff:ff:ff:ff:ff:ff
    inet 10.1.1.2/24 brd 10.1.1.255 scope global eth1
    inet6 fe80::20c:29ff:fefc:6796/64 scope link 
       valid_lft forever preferred_lft forever

root@linux-test-4:~# /etc/fw/linux-test-4.fw test_interfaces
<emphasis role="redtext"># Adding VLAN interface eth1.101 (parent: eth1)
vconfig set_name_type DEV_PLUS_VID_NO_PAD
vconfig add eth1 101
ifconfig eth1.101 up
# Adding VLAN interface eth1.102 (parent: eth1)
vconfig set_name_type DEV_PLUS_VID_NO_PAD
vconfig add eth1 102
ifconfig eth1.102 up</emphasis>
# Removing ip address: eth1 10.1.1.2/24
ip addr del 10.1.1.2/24 dev eth1
ifconfig eth1 up
# Interface eth1.101 does not exist
# Adding ip address: eth1.101 10.1.1.2/24
ip addr add 10.1.1.2/24 dev eth1.101
ifconfig eth1.101 up
# Interface eth1.102 does not exist
# Adding ip address: eth1.102 10.1.2.2/24
ip addr add 10.1.2.2/24 dev eth1.102
ifconfig eth1.102 up
      </programlisting>

      <para>
        Commands that manage VLAN interfaces are highlighted in
        red. The script adds vlan interfaces eth1.101 and eth1.102 to
        eth1 and brings them up, then removes IP address 10.1.1.2 from
        eth1 and adds addresses 10.1.1.2 to eth1.101 and 10.1.2.2 to
        eth1.102.
      </para>

      <para>
        To set interfaces up and load iptables rules, just run the
        script with command line parameter "start". If you only want
        to try to configure interfaces but not load iptables rules
        just yet, run the script with command line parameter
        "inetrfaces". Here is what happens:
      </para>

      <programlisting>
root@linux-test-2:~# /etc/fw/linux-test-4.fw interfaces
# Adding VLAN interface eth1.101 (parent: eth1)
Set name-type for VLAN subsystem. Should be visible in /proc/net/vlan/config
Added VLAN with VID == 101 to IF -:eth1:-
# Adding VLAN interface eth1.102 (parent: eth1)
Set name-type for VLAN subsystem. Should be visible in /proc/net/vlan/config
Added VLAN with VID == 102 to IF -:eth1:-
# Removing ip address: eth1 10.1.1.2/24
# Adding ip address: eth1.101 10.1.1.2/24
# Adding ip address: eth1.102 10.1.2.2/24
      </programlisting>

      <para>
        We can now verify that the script added vlan inetrfaces and
        configured IP addresses:
      </para>

      <programlisting>
root@linux-test-2:~# ip addr ls
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    link/ether 00:0c:29:fc:67:8c brd ff:ff:ff:ff:ff:ff
    inet 10.3.14.109/24 brd 10.3.14.255 scope global eth0
    inet6 fe80::20c:29ff:fefc:678c/64 scope link 
       valid_lft forever preferred_lft forever
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 1000
    link/ether 00:0c:29:fc:67:96 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::20c:29ff:fefc:6796/64 scope link 
       valid_lft forever preferred_lft forever
4: eth1.101@eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP 
    link/ether 00:0c:29:fc:67:96 brd ff:ff:ff:ff:ff:ff
    inet 10.1.1.2/24 scope global eth1.101
    inet6 fe80::20c:29ff:fefc:6796/64 scope link 
       valid_lft forever preferred_lft forever
5: eth1.102@eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP 
    link/ether 00:0c:29:fc:67:96 brd ff:ff:ff:ff:ff:ff
    inet 10.1.2.2/24 scope global eth1.102
    inet6 fe80::20c:29ff:fefc:6796/64 scope link 
       valid_lft forever preferred_lft forever
      </programlisting>

      <para>
        Now that vlan interfaces are there and IP addresses are
        correct, lets see what happens if we run the script again:
      </para>

      <programlisting>
root@linux-test-2:~# /etc/fw/linux-test-4.fw test_interfaces
root@linux-test-2:~# 
      </programlisting>

      <para>
        The script verified configuration and has found that it does
        not need to change anything.
      </para>

    </sect3>

    <sect3>
      <title>Heartbeat configuration</title>

      <para>
        Heartbeat configuration in this setup is rather
        straightforward and is not very different from the one we used
        in the previous recipe <xref linkend="heartbeat_cluster"/>.
      </para>

      <figure id="heartbeat_mcast_config_2">
        <title>Heartbeat configuration files</title>
        <programlisting>
# cat ha.cf:

mcast eth0 225.0.0.1 694 1 0
mcast eth1.101 225.0.0.1 694 1 0
mcast eth1.102 225.0.0.1 694 1 0
auto_failback on
node linux-test-1
node linux-test-2


# cat haresources 

linux-test-1 IPaddr::10.3.14.150/24/eth0/10.3.14.255
linux-test-1 IPaddr::10.1.1.254/24/eth1.101/10.1.1.255 
linux-test-1 IPaddr::10.1.2.254/24/eth1.102/10.1.2.255 


# cat authkeys 

auth 3
3 md5 hb-auth-key
        </programlisting>
      </figure>

      <para>
        The difference between heartbeat configuration in
        <xref linkend="heartbeat_cluster"/> and this is that we now
        run it over three interfaces, using vlan
        interfaces <emphasis>eth1.101</emphasis>
        and <emphasis>eth1.102</emphasis> instead
        of <emphasis>eth1</emphasis>. Otherwise it works exacly the
        same and manages virtual
        addresses <emphasis>10.3.14.150</emphasis>, <emphasis>10.1.1.254</emphasis>
        and <emphasis>10.1.2.254</emphasis> on corresponding subnets.
      </para>

      <para>
        Policy and NAT rules configuration in this setup is also the
        same as in <xref linkend="heartbeat_cluster"/> and we won't
        repeat it here.
      </para>

    </sect3>
  </sect2>

