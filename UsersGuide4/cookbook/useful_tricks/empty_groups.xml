  <sect2>
    <title>Using Empty Groups</title>

    <para>
    This example shows how the option "Ignore empty groups" can be used to 
    build a rule controlling access to or from an often-changing group of 
    computers. Suppose we need to set up a rule to control access to or 
    from a group of computers. In principle this should be easy: we create 
    a Host object for each computer, then create a group and put all these 
    Host objects in it. We can use this group in the Source or Destination 
    of the policy rule to achieve our goal. If we ever need to add a new 
    machine to the control list, we create a new Host object and add it to 
    the group; if we need to remove the machine from the list, we just 
    remove it from the group. But what should happen if after the last 
    machine has been removed the group becomes empty? If the empty group is 
    in the Source of the rule, shouldn't the compiler treat it as Any? This 
    is confusing, to say the least.
    </para>

    <para>
    Here is how it works in Firewall Builder. The behavior of the compiler is 
    controlled by the <guilabel>Ignore empty groups in rules</guilabel> checkbox 
    in the "Compiler" tab of the Firewall Settings dialog. If this checkbox is 
    off, then compiler treats empty groups as an error and stops processing of 
    the ruleset as soon as it encounters such group. This is the default setting. 
    However, if this checkbox is on, then compiler simply removes empty group 
    from the rule and continues processing. This makes sense, since an empty group 
    defines no objects and if the rule element has some other objects in it, 
    removing an empty group does not change its meaning. It becomes tricky when 
    the empty group is the only object in the rule element though. In this case, 
    removing the group from the rule element makes it empty, which is equivalent 
    to Any. All of the sudden, instead of controlling access to or from a group 
    of hosts, the rule expands its action to any host! To avoid this unexpected 
    side effect, compiler drops a rule if rule element becomes empty after the 
    last empty group has been removed. Again, it works this way only if the 
    checkbox "Ignore empty groups" is on.
    </para>

    <para>
    For example, this feature can be used to set up a rule to control Internet 
    access from a bunch of a student computers. Suppose some students may be 
    denied access once in a while, in which case their machine is removed from 
    the group. If at some point of time all machines were removed from the group, 
    the compiler would simply ignore this rule instead of inadvertently creating 
    a hole in the policy.
    </para>
  </sect2>

