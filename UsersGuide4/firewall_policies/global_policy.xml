    <sect1 id="global-policy">
      <title>Firewall Access Policy Rulesets</title>

      <figure id="global-policy1">
        <title>Access Policy</title>
        <graphic scale="50" fileref="firewall_policies/images/policy_example_1.png" />
      </figure>

      <para>The main Firewall access policy consists of a set of
      rules. Packets are analysed by comparing their parameters with
      rules in the policy, one after the other, from top to bottom.
      The first rule that matches the packet has
      it's <guilabel>Action</guilabel> applied to the packet.</para>

      <para>Each rule includes a standard set of parameters,
      or <emphasis>Rule Elements</emphasis>, that are used for
      comparison with the packet. Rule elements include "Source",
      "Destination", "Service", "Interface", "Direction", and
      "Time". For example, if a packet entering the firewall has a
      source address that matches the object in
      the <guilabel>Source</guilabel> field of the rule, its
      destination address matches the object
      in <guilabel>Destination</guilabel>, its protocol and port
      numbers match the object in <guilabel>Service</guilabel>, the
      interface it passes through matches
      the <guilabel>Interface</guilabel> field, its direction matches
      that specified in <guilabel>Direction</guilabel>, and it's time
      matches <guilabel>Time</guilabel>, then the firewall will take
      action, specified in the <guilabel>Action</guilabel> field of
      the matching rule. Of course, a field with "Any" or "All" in it
      will match all packets for that field.</para>

      <para>
        For example, in <xref linkend="global-policy1" />, rule #0 is
        "anti-spoofing", it denies all packets coming throuh the
        outside interface with source address claiming to be that of
        the firewall itself or internal network it protects. This rule
        utilizes interface and direction matching in addition to the
        source address. Rule #2 says that connection from the internal
        network (object <emphasis>net-192.168.1.0</emphasis>) to the
        firewall itself (object <emphasis>firewall</emphasis>)
        using <emphasis>ssh</emphasis> is allowed
        (action <emphasis>Accept</emphasis>). The "Catch all" rule #6
        denies all packets that have not been matched by any rule
        above it. The access policy in <xref linkend="global-policy1"
        /> is built to allow only specific services and deny
        everything else, which is a good practice.
      </para>

      <para>Access Policy rules represent access control because they
      define which packets will be permitted and which will be
      denied. Access Policy rules operate on the packet's source and
      destination addresses and protocol parameters. These rules work
      regardless of the interface and direction of the packet, unless
      a particular interface or direction, or set of interfaces, is
      assigned to the rule.</para>

      <sect2>
        <title>Source and Destination</title>

        <para>
          The <guilabel>Source</guilabel>
          and <guilabel>Destination</guilabel> fields allow you to
          match a packet to a rule based on source and destination IP
          address.
        </para>

        <para>
          Either field may be set to "any", which means that the
          packet will match on that field regardless. Or, you can set
          a field to a particular IPv4 address (Address object), IPv6
          address (Address IPv6 object), the IP address or addresses
          associated with all interfaces of a host (Host object), a
          range of IP addresses (Address Range object), all the
          addresses in a particular subnet (Network object), an
          address configured as DNS "A" record for a given host name
          (DNS Name object), or a group of any of the above. You can
          place more than one object in either field,
          too. <xref linkend="addressable-objects" /> has more
          detailed information on these address objects.
        </para>

        <para>
          In addition, you can "negate" an object by dragging it to a
          field, then selecting <guimenuitem>Negate</guimenuitem> from
          the right-click menu. In
          <xref linkend="policies-rule-negate-rfc1918" />, the RFC
          1918 address range object has been negated, so the rule
          matches any destination address that
          is <emphasis>not</emphasis> part of private address
          space.
        </para>

      <figure  id="policies-rule-negate-rfc1918">
        <title>Destination matches any IP that is <emphasis>not</emphasis> an RFC 1918 address</title>
            <graphic scale="60" fileref="firewall_policies/images/policy_rule_negate_rfc1918.png" />
      </figure>
      </sect2>

      <sect2>
        <title>Service</title>

        <para>
          The <guilabel>Service</guilabel> field is also used to
          match packets to rules. Use Service Objects
          (<xref linkend="working-with-services" />) to specify what
          services should be matched.
        </para>

        <para>
          As in the Source and Destination fields, you can
          "negate" an object by dragging it to a field, then
          selecting <guimenuitem>Negate</guimenuitem> from the
          right-click menu.
        </para>

      </sect2>

      <sect2>
        <title>Interface</title>

        <para>
          By default, all rules created in Firewall Builder affect all
          firewall interfaces, regardless of the target
          platform. However, sometimes you want to assign a rule to a
          particular interface, or set of interfaces, only. To
          populate this field, drag an interface from the firewall
          object.
        </para>

        <para>
          If you also want to assign a "direction" to the rule, use
          the next field.
        </para>

        <para>
          This field applies to <emphasis>firewall</emphasis>
          interfaces only, not host interfaces.
        </para>

      </sect2>

      <sect2 id="direction">
        <title>Direction</title>

        <para>
          The "direction" for a rule is defined with respect to the
          firewall machine, not to the network behind it. For example,
          packets that leave the internal network through the firewall
          are considered "inbound" on firewall's internal interface
          and "outbound" on its external interface. Likewise, packets
          that come from the Internet are "inbound" on the firewall's
          external interface and "outbound" on its internal
          interface. <xref linkend="f-directions" /> illustrates
          directions for packets entering or exiting the firewall
          interface.
        </para>

        <figure id="f-directions">
          <title>Directions</title>
          <graphic scale="70" fileref="firewall_policies/images/directions.png" />
        </figure>

        <para>
          As shown later in <xref linkend="changing_direction"/>,
          there are three possible settings of direction in policy
          rules: "Inbound", "Outbound" and "Both":

          <figure id="editing-policy-direction">
            <title>Modifying the Direction of the Policy Rule</title>
            <graphic scale="50" fileref="firewall_policies/images/editing_policy4.png" />
          </figure>
        </para>

        <para>
          When you use direction "Both" in a rule, the program first
          converts it to two rules, with direction "Inbound" and
          "Outbound". Then it checks if both of them make sense by
          looking at addresses in source and destination and drops one
          of the rules if necessary. If you build a rule with firewall
          object in destination and direction "Both", you should only
          get PF rule with "pass in" which is equivalent to direction
          "Inbound" in the original rule in the GUI. In case of
          iptables, the rule will be placed in the chain INPUT in this
          case. If firewall object is found in "source" field of the
          rule, then the program will automatically change direction
          "Both" to "Outbound" and process the rule accordingly. 
        </para>

        <para>
          This automatic change of the direction is only done when you
          use direction "Both". If you use direction "Inbound" or
          "Outbound", the program follows your setting and does not
          change the rule. This is how anti-spoofing rules are built,
          for example, because in rules of this kind the firewall object
          and objects representing addresses and networks behind it are
          in "source", yet direction has to be set to "inbound".
        </para>

        <para>
          Many supported firewall platforms allow for rules to be
          written without nailing direction "in" or "out", such as
          "pass quick proto tcp .. .." in PF configuration or iptables
          rules in the FORWARD chain without "-i interface" or "-o
          interface" clause. Firewall Builder always tries to use this
          construct for rules with direction "Both" unless addresses
          in source and destination indicate that the rule can be made
          more specific.
        </para>

      </sect2>

      <sect2 id="action">
        <title>Action</title>

        <para>
          The Action is the action taken on a rule that matches on
          the Source, Destination, Service, Interface, Direction, and
          Time fields.
        </para>

        <para>
          The policy rule action can be one of the options listed
          below. Not all firewalls support all options, but the GUI
          will only allow options that are valid for the indicated
          firewall target. In addition, the same action may have a
          different name on different platforms.
        </para>

        <para>
          Some actions can have parameters. To set a parameter for an
          action, first select the action, then double-click on the
          icon. (You can also right-click and
          select <guimenuitem>parameters</guimenuitem>.) The
          parameters dialog appears:
        </para>

        <figure id="action-parameters-reject">
          <title>Parameter options for the Reject action</title>
          <graphic scale="70" fileref="firewall_policies/images/action-parameters-reject.png" />
        </figure>


        <itemizedlist spacing="compact">
          <listitem>
            <para>Accept:</para>

            <para>
              Allows the packet through the firewall. No
              subsequent rules are applied. This action has no
              parameters.
            </para>
          </listitem>

          <listitem>
            <para>Deny:</para>

            <para>
              Silently drops the packet. No subsequent rules are
              applied. This action has no parameters.
            </para>
          </listitem>

          <listitem>
            <para>Reject:</para>

            <para>
              Packet is dropped and an appropriate message is sent
              back to the sender. No subsequent rules are
              applied. This action has a parameter that lets you
              specify how the firewall reacts to the packet. Parameter
              options include TCP RST and a number of ICMP
              messages.
            </para>
          </listitem>

          <listitem>
            <para>Accounting/Count:</para>

            <para>
              Counts packets that match the rule, but makes no
              decision on the packet. Even if the packet matches, the
              inspection process continues with other rules below
              it. This action has a parameter for specifying the rule
              name for accounting.
            </para>
          </listitem>

          <listitem>
            <para>Queue/Pipe:</para>

            <para>
              Passes the packet to a user space process for
              inspection. It is translated into QUEUE for iptables and
              "divert" for ipfw. This action is only supported by
              compilers for iptables and ipfw. This action has no
              parameters.
            </para>
          </listitem>

          <listitem>
            <para>Tag/Mark:</para>

            <para>
              Associates a tag with the packet. The tag can later be
              inspected using service object TagService. This action
              is translated into MARK target with
              corresponding --set-mark parameter and optionally
              additional an rule with a CONNMARK --save-mark target
              for iptables. If the option that activates CONNMARK
              target is used, the compiler also adds a rule at the
              very top of the policy to restore the mark. Rules are
              placed in INPUT,OUTPUT and FORWARD chain of the "mangle"
              table, which ensures that DNAT happens before rules in
              the mangle table see the packet. The PREROUTING chain in
              the mangle table is executed before the PREROUTING chain
              in the NAT table, so placing tagging rules in the
              PREROUTING chain would make them fire before DNAT. The
              POSTROUTING chain of the mangle table, as well as its
              FORWARD and OUTPUT chains, work before corresponding
              chains of the NAT table. In all cases the goal is to
              make sure DNAT rules process the packet before, and SNAT
              rules process it after, filtering and tagging
              rules.
            </para>

            <para>
              For PF this action is translated into tag. Supported
              only by compilers for iptables and PF. This action's
              parameter lets you specify which TagService service
              object to apply to the matching packet.
            </para>
          </listitem>

          <listitem>
            <para>Classify:</para>

            <para>
              Allows the firewall to define a QoS class for the packet
              that matches the rule. It is translated into CLASSIFY
              for iptables, with parameter --set-class. For PF it is
              translated into "queue". The compiler for ipfw can use
              "pipe", "queue" or "divert" depending on how the action
              is configured in the GUI. This action is only supported
              by compilers for iptables, PF and ipfw. This action has
              a parameter that lets you specify a Classify
              string.
            </para>
          </listitem>

          <listitem>
            <para>Custom:</para>

            <para>
              Allows you to specify an arbitrary piece of code to be
              used in place of an action. Supported by compilers for
              iptables, ipf and ipfw. A parameter lets you specify the
              string.
            </para>
          </listitem>

          <listitem>
            <para>Branch/Chain/Anchor:</para>

            <para>
              Used to branch to a different rule set. It works on
              target platforms that provide suitable syntax and allow
              control to return to the higher level rule set if the
              branch cannot make a final decision about the
              packet. For iptables this action is translated into a
              user-defined chain. The name of the chain is the name of
              the branch chosen by the administrator. For PF this
              action is translated into an anchor with the same name
              as the branch rule set. This action is only supported by
              compilers for iptables and PF. A parameter lets you
              specify which other rule set to branch into.
            </para>
          </listitem>

          <listitem>
            <para>Routing:</para>

            <para>
              Makes the firewall route matching packets through a
              specified interface or a gateway. This action is
              translated into ROUTE target for iptables and route
              option for PF and ipfilter. Compilers for PF and
              ipfilter support "fastroute", "route-to", "reply-to" and
              "dup-to" options. Parameters let you change the inbound
              and outbound interface and route the packet through a
              specified gateway. You can also tell the firewall to
              continue inspecting the packet after a match, and you
              can tell the firewall to make these changes to
              a <emphasis>copy</emphasis> of the packet while allowing
              the original packet to proceed normally.
            </para>
          </listitem>

          <listitem>
            <para>Continue:</para>

            <para>
              Essentially an empty action. Can be used when you want
              to assign an option, such as logging, to a match but
              take no other action in that rule. This action has no
              parameters.
            </para>
          </listitem>
        </itemizedlist>

        <figure id="actions">
          <title>Rule Actions</title>
          <graphic scale="70" fileref="firewall_policies/images/actions.png" />
        </figure>
      </sect2>

      <sect2>
        <title>Time</title>

        <para>
          The <guilabel>Time</guilabel> field allows you to restrict a
          match to a particular time
          interval. <xref linkend="time-interval-objects" /> has
          information on creating and using Time Interval objects in a
          rule.
        </para>

      </sect2>

      <sect2 id="options">
        <title>Options</title>

        <para>
          The <guilabel>Options</guilabel> field allows you to specify
          certain options with regard to packets that match the
          rule. Almost all platforms have options related to logging,
          and some platforms have more extensive
          options. Click <guibutton>Help</guibutton> in the Options
          dialog for platform-specific help.
        </para>

        <para>
          If the options of a particular rule have been changed from
          their default, a <inlinegraphic fileref="firewall_policies/images/option-icon.png"/>
          appears in the Option field for that rule. Keep in mind that
          not all rules have the same default options. For example, by
          default a Deny rule is stateless, because there is no reason
          to keep state on a connection that won't be allowed. So, if
          you turn on state for a Deny rule, you'll see the icon.
        </para>

        <para>
          An Accept rule has the opposite behaviour. By default, state
          is kept for Accept rules, so no icon appears when state is
          on. If you turn state keeping off, in other words, if you
          change the default behaviour for that rule, then the icon is
          displayed.
        </para>

      </sect2>

      <sect2 id="multiple_policy_rule_sets">
        <title>Working with multiple policy rule sets</title>

          <para>
            Every Firewall object created in Firewall Builder has a
            single Policy rule set to start. For many firewalls, this
            is all you need. However, with Firewall Builder, you can
            create multiple access policy rule sets, and, if you
            platform supports it, branch between them. This can help
            you modularize your policy.
          </para>

          <para>
            Here we have Firewall object "fw" with three policy rule
            sets, Policy, Policy_2 and mgmt:
          </para>

          <figure id="policy-rulesets1">
            <title>Firewall with more than one Policy rule set</title>
            <graphic scale="70" fileref="firewall_policies/images/policy-rulesets1.png" />
          </figure>

        <para>
          To create an additional rule set, right-click on the
          Firewall object in the tree and select <guimenuitem>Add
          Policy Rule Set</guimenuitem>.
        </para>

        <para>
          All Policy rule sets have configurable parameters. To see a
          Policy rule set's parameters, double-click on it in the tree
          to open it in the editor.
        </para>

        <figure id="policy-rulesets2">
          <title>Policy Rule Set Dialog (iptables)</title>
          <graphic scale="70" fileref="firewall_policies/images/policy-rulesets2.png" />
        </figure>

        <para>
          This dialog has
          a <guilabel>Name</guilabel>, <guilabel>IPv4/IPv6
          setting</guilabel> and a <guilabel>Top ruleset</guilabel>
          checkbox. For iptables firewalls, there is also a pair of
          radio buttons that indicates whether the policy should
          affect <guilabel>filter+mangle</guilabel> tables or
          just <guilabel>mangle</guilabel> table.
        </para>

        <para>
          The IPv4/IPv6 pull-down menu lets you select whether the
          rule set should be compiled for IPv4 only (ignoring any
          IPv6-related rules), IPv6 only (ignoring any IPv4-related
          rules), or for both IPv4 and IPv6. If both IPv4 and IPv6 are
          selected, the compiler "does the right thing" and puts each
          rule into the correct part of the configuration.
        </para>

        <para>
          Only one rule set can be tagged as the "top" rule set. The
          "top" rule set is the primary rule set that is assigned to
          the device. Only one rule set of each type, can be marked as
          "top". The "top" rule set is always used (if it has any
          rules). Other rule sets are only used if they are the
          targets of branching. (In Firewall Builder 3.X, only the
          Policy rule set can branch.)
        </para>

      <itemizedlist>
          <listitem>
            <para>iptables: rules defined in the "top" rule set will
            go into built-in chains INPUT,OUTPUT,FORWARD. Rules
            defined in rule sets where this checkbox is not checked go
            into a user-defined chain with the same name as the rule
            set.</para>
          </listitem>

          <listitem>
            <para>PF: rules defined in the rule set with <guilabel>top
            rule set</guilabel> checkbox turned off go into an anchor
            with the name of the rule set.</para>
          </listitem>

          <listitem>
            <para>Cisco IOS access lists: if the <guilabel>top rule
            set</guilabel> checkbox is turned off, the rules go into
            access list with the name prefixed with the name of the
            rule set; this access list will not be assigned to
            interfaces via "ip access-group" command. Rulesets with
            checkbox <guilabel>top rule set</guilabel> checked
            generate ACLs with names consisting of the shortened name
            of interface and direction abbreviation ("in" or
            "out"). Only these lists are assigned to
            interfaces.</para>
          </listitem>
        </itemizedlist>

        <para>You can fork processing between rule sets with the
        "Branch/Chain/Anchor" (depending on platform) Action in a
        rule. This rule causes packets headed for the "fw-mgmt" host
        to be passed to the "mgmt" rule set.</para>

        <figure id="policy-rulesets3">
          <title>Passing a packet to the "mgmt" rule set</title>
          <graphic scale="70" fileref="firewall_policies/images/policy-rulesets3.png" />
        </figure>

        <para>A packet directed to the "mgmt" rule set leaves the main
        rule set and begins matching against rules in the "mgmt" rule
        set. If it matches in the "mgmt" rule set, then that action is
        taken. If it does not match in the "mgmt" rule set, then
        processing is passed back to the calling rule set.</para>
      </sect2>
    </sect1>

